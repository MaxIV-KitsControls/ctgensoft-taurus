#LyX 1.4.2 created this file. For more info see http://www.lyx.org/
\lyxformat 245
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{a4wide}
\end_preamble
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single
\papersize a4paper
\use_geometry false
\use_amsmath 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 5
\tocdepth 5
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes true
\end_header

\begin_body

\begin_layout Title
The "Sardana" device pool
\end_layout

\begin_layout Author
Emmanuel Taurel, Tiago Coutinho
\end_layout

\begin_layout Standard
\begin_inset LatexCommand \tableofcontents{}

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
This paper describes what could be the implementation of the Sardana device
 pool.
 This work is based on Jorg's paper called "Reordered SPEC".
 It is 
\series bold
not at all
\series default
 a final version of this device pool.
 It is rather a first approach to define this pool more precisely and to
 help defining its features and the way it could be implemented.
\end_layout

\begin_layout Section
Overall pool design
\end_layout

\begin_layout Standard
The pool could be seen as a kind of intelligent Tango device container to
 control the experiment hardware.
 In a first approach, it requires that the hardware to be controlled is
 connected to the control computer or to external crate(s) connected to
 the control computer using bus coupler.
 It has two basic features which are:
\end_layout

\begin_layout Enumerate
Hardware access using dynamically created/deleted Tango devices according
 to the experiment needs
\end_layout

\begin_layout Enumerate
Management of some very common and well defined action regularly done on
 a beam line (scanning, motor position archiving....)
\end_layout

\begin_layout Standard
To achieve these two goals and to provide the user with a way to control
 its behavior, it is implemented as a Tango class with commands and attributes
 like any other Tango class.
\end_layout

\begin_layout Subsection
Hardware access
\end_layout

\begin_layout Subsubsection
Core hardware access
\end_layout

\begin_layout Standard
Most of the times, it is possible to define a list of very common devices
 found in most of the experiments, a list of communication link used between
 the experiment hardware and the control computer(s) and some of the most
 commonly used protocol used on these communication links.
 Devices commonly used to drive an experiment are:
\end_layout

\begin_layout Itemize
Motor
\end_layout

\begin_layout Itemize
Group of motor
\end_layout

\begin_layout Itemize
Pseudo motor
\end_layout

\begin_layout Itemize
Counter/Timer
\end_layout

\begin_layout Itemize
Multi Channel Analyzer
\end_layout

\begin_layout Itemize
CCD cameras
\end_layout

\begin_layout Itemize
And some other that I don't know
\end_layout

\begin_layout Standard
Communication link used to drive experiment devices are:
\end_layout

\begin_layout Itemize
Serial line
\end_layout

\begin_layout Itemize
GPIB
\end_layout

\begin_layout Itemize
Socket
\end_layout

\begin_layout Itemize
And some other that I don't know (USB????)
\end_layout

\begin_layout Standard
Protocol used on the communication links are:
\end_layout

\begin_layout Itemize
Modbus
\end_layout

\begin_layout Itemize
Ans some other that I don't know
\end_layout

\begin_layout Standard
Each of the controlled hardware (one motor, one pseudo-motor, one serial
 line device,...) will be driven by independent Tango classes.
 The pool device server will embed all these Tango classes together (statically
 linked).
 The pool Tango device is the "container interface" and allows the user
 to create/delete classical Tango devices which are instances of these embedded
 classes.
 This is summarized in the following drawing
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename hard.eps

\end_inset


\begin_inset ERT
status open

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Therefore, the three main actions to control a new equipment using the pool
 will be (assuming the equipment is connected to the control computer via
 a serial line):
\end_layout

\begin_layout Enumerate
Create the serial line Tango device with one of the Pool device command
 assigning it a name like "MyNewEquipment".
 
\end_layout

\begin_layout Enumerate
Connect to this newly created Tango device using its assigned name
\end_layout

\begin_layout Enumerate
Send order or write/read data to/from the new equipment using for instance
 the WriteRead command of the serial line Tango device
\end_layout

\begin_layout Standard
When the experiment does not need this new equipment any more, the user
 can delete the serial line Tango device with another pool device command.
 Note that most of the time, creating Tango device means defining some device
 configuration parameters (Property in Tango language).
 The Tango wizard will be used to retrieve which properties have to be defined
 and will allow the user to set them on the fly.
 This means that all the Tango classes embedded within the Pool must have
 their wizard initialized.
\end_layout

\begin_layout Subsubsection
Extending pool features
\end_layout

\begin_layout Standard
From time to time, it could be useful to extend the list of Tango classes
 known by the device pool in case a new kind of equipment (not using the
 core hardware access) is added to the experiment.
 Starting with Tango 5.5 (and the associated Pogo), each Tango class has
 a method which allow the class to be dynamically loaded into a running
 process.
 This feature will be used to extend the pool feature.
 It has to be checked that it is possible for Tango Python class
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename dyn.eps

\end_inset


\begin_inset ERT
status open

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To achieve this feature, the pool Tango device will have commands to
\end_layout

\begin_layout Itemize
Load a Tango class.
 This command will dynamically add two other commands and one attribute
 to the pool device Tango interface.
 These commands and the attribute are:
\end_layout

\begin_deeper
\begin_layout Itemize
Command: Create a device of the newly loaded class
\end_layout

\begin_layout Itemize
Command: Delete a device of the newly loaded class
\end_layout

\begin_layout Itemize
Attribute: Get the list of Tango devices instances of the newly created
 class
\end_layout

\end_deeper
\begin_layout Itemize
Unload a Tango class
\end_layout

\begin_layout Itemize
Reload a Tango class
\end_layout

\begin_layout Subsection
Global actions
\end_layout

\begin_layout Standard
The following common actions regularly done on a beam line experiment will
 be done by the pool device server:
\end_layout

\begin_layout Itemize
Evaluating user constraint(s) before moving motor(s)
\end_layout

\begin_layout Itemize
Scanning
\end_layout

\begin_layout Itemize
Saving experiment data
\end_layout

\begin_layout Itemize
Experiment management
\end_layout

\begin_layout Itemize
Archiving motor positions
\end_layout

\begin_layout Section
Sardana core hardware access
\end_layout

\begin_layout Subsection
The Sardana Motor management
\end_layout

\begin_layout Subsubsection
The user motor interface 
\end_layout

\begin_layout Standard
The motor interface is a first approach of what could be a complete motor
 interface.
 It is statically linked with the Pool device server and supports several
 attributes and commands.
 It is implemented in C++ and used a set of the so-called "controller" methods.
 The motor interface is always the same whatever the hardware is.
 This is the rule of the "controller" to access the hardware using the communica
tion link supported by the motor controller hardware (network link, serial
 line...).
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename motor.eps

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The controller code has a well-defined interface and can be written using
 Python or C++.
 In both cases, it will be dynamically loaded into the pool device server
 process.
\end_layout

\begin_layout Paragraph
The states
\end_layout

\begin_layout Standard
The motor interface knows five states which are ON, MOVING, ALARM, FAULT
 and UNKNOWN.
 A motor device is in MOVING state when it is moving! It is in ALARM state
 when it has reached one of the limit switches and is in FAULT if its controller
 software is not available (impossible to load it) or if a fault is reported
 from the hardware controller.
 The motor is in the UNKNOWN state if an exception occurs during the communicati
on between the pool and the hardware controller.
 When the motor is in ALARM state, its status will indicate which limit
 switches is active.
\end_layout

\begin_layout Paragraph
The commands
\end_layout

\begin_layout Standard
The motor interface supports 3 commands on top of the Tango classical Init,
 State and Status commands.
 These commands are summarized in the following table:
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Command name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Input data type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Output data type
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Abort
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
SetPosition
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevDouble
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
SaveConfig
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status open

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
Abort
\series default
: It aborts a running motion.
 This command does not have input or output argument.
\end_layout

\begin_layout Itemize

\series bold
SetPosition
\series default
: Loads a position into controller.
 It has one input argument which is the new position value (a double).
 It is allowed only in the ON or ALARM states.
 The unit used for the command input value is the physical unit: millimeters
 or milli-radians.
 It is always an absolute position.
\end_layout

\begin_layout Itemize

\series bold
SaveConfig
\series default
: Write some of the motor parameters in database.
 Today, it writes the motor acceleration, deceleration, base_rate and velocity
 into database as motor device properties.
 It is allowed only in the ON or ALARM states
\end_layout

\begin_layout Standard
The classical Tango Init command destroys the motor and re-create it.
\end_layout

\begin_layout Paragraph
The attributes
\end_layout

\begin_layout Standard
The motor interface supports several attributes which are summarized in
 the following table:
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="6">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<column alignment="center" valignment="top" rightline="true" width="0">
<column alignment="center" valignment="top" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Data type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Data format
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Writable
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Memorized
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Ope/Expert
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Position
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevDouble
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Scalar
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R/W
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No *
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Ope
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DialPosition
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevDouble
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Scalar
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Exp
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Offset
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevDouble
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Scalar
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R/W
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Exp
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Acceleration
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevDouble
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Scalar
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R/W
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Exp
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Base_rate
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevDouble
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Scalar
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R/W
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Exp
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Deceleration
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevDouble
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Scalar
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R/W
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Exp
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Velocity
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevDouble
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Scalar
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R/W
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Exp
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Limit_Switches
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevBoolean
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Spectrum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Exp
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
SimulationMode
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevBoolean
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Scalar
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Exp
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Step_per_unit
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevDouble
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Scalar
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R/W
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Exp
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Backlash
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevLong
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Scalar
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R/W
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Exp
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
Position
\series default
: This is read-write scalar double attribute.
 With the classical Tango min and max_value attribute properties, it is
 easy to define authorized limit for this attribute.
 See the definition of the DialPosition and Offset attributes to get a precise
 definition of the meaning of this attribute.
 It is not allowed to read or write this attribute when the motor is in
 FAULT or UNKNOWN state.
 It is also not possible to write this attribute when the motor is already
 MOVING.
 
\series bold
The unit used for this attribute is the physical unit: millimeters or milli-radi
an.
 It is always an
\series default
 
\series bold
absolute
\series default
 
\series bold
position.
 
\series default
The value of this attribute is memorized in the Tango database but not by
 the default Tango system memorization.
 See chapter 
\begin_inset LatexCommand \ref{sub:Archiving-motor-position}

\end_inset

 for details about motor position archiving.
\end_layout

\begin_layout Itemize

\series bold
DialPosition
\series default
: This attribute is the motor dial position.
 The following formula links together the Position, DialPosition and Offset
 attributes:
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset

Position = DialPosition + Offset
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset

 This allows to have the motor position centered around any position defined
 by the Offset attribute (classically the X ray beam position).
 It is a read only attribute.
 To set the motor position, the user has to use the Position attribute.
 It is not allowed to read this attribute when the motor is in FAULT or
 UNKNOWN mode.
 The unit used for this attribute is the physical unit: millimeters or milli-rad
ian.
 It is also always an 
\series bold
absolute
\series default
 position.
\end_layout

\begin_layout Itemize

\series bold
Offset
\series default
: The offset to be applied in the motor position computation.
 By default set to 0.
 It is a memorized attribute.
 It is not allowed to read or write this attribute when the motor is in
 FAULT, MOVING or UNKNOWN mode.
\end_layout

\begin_layout Itemize

\series bold
Acceleration
\series default
: This is an expert read-write scalar double attribute.
 This parameter value is written in database when the SaveConfig command
 is executed.
 It is not allowed to read or write this attribute when the motor is in
 FAULT or UNKNOWN state.
\end_layout

\begin_layout Itemize

\series bold
Deceleration
\series default
: This is an expert read-write scalar double attribute.
 This parameter value is written in database when the SaveConfig command
 is executed.
 It is not allowed to read or write this attribute when the motor is in
 FAULT or UNKNOWN state.
\end_layout

\begin_layout Itemize

\series bold
Base_rate
\series default
: This is an expert read-write scalar double attribute.
 This parameter value is written in database when the SaveConfig command
 is executed.
 It is not allowed to read or write this attribute when the motor is in
 FAULT or UNKNOWN state.
\end_layout

\begin_layout Itemize

\series bold
Velocity
\series default
: This is an expert read-write scalar double attribute.
 This parameter value is written in database when the SaveConfig command
 is executed.
 It is not allowed to read or write this attribute when the motor is in
 FAULT or UNKNOWN state.
\end_layout

\begin_layout Itemize

\series bold
Limit_Switches
\series default
: Three limit switches are managed by this attribute.
 Each of the switch are represented by a boolean value: False means inactive
 while True means active.
 It is a read only attribute.
 It is not possible to read this attribute when the motor is in UNKNOWN
 mode.
 It is a spectrum attribute with 3 values which are:
\end_layout

\begin_deeper
\begin_layout Itemize
Data[0] : The Home switch value
\end_layout

\begin_layout Itemize
Data[1] : The Upper switch value
\end_layout

\begin_layout Itemize
Data[2] : The Lower switch value
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
SimulationMode
\series default
: This is a read only scalar boolean attribute.
 When set, all motion requests are not forwarded to the software controller
 and then to the hardware.
 When set, the motor position is simulated and is immediately set to the
 value written by the user.
 To set this attribute, the user has to used the pool device Tango interface.
 The value of the position, acceleration, deceleration, base_rate, velocity
 and offset attributes are memorized at the moment this attribute is set.
 When this mode is turned off, if the value of any of the previously memorized
 attributes has changed, it is reapplied to the memorized value.
 It is not allowed to read this attribute when the motor is in FAULT or
 UNKNOWN states.
\end_layout

\begin_layout Itemize

\series bold
Step_per_unit
\series default
: This is the number of motor step per millimeter or per degree.
 It is a memorized attribute.
 It is not allowed to read or write this attribute when the motor is in
 FAULT or UNKNOWN mode.
 It is also not allowed to write this attribute when the motor is MOVING.
 The default value is 1.
\end_layout

\begin_layout Itemize

\series bold
Backlash
\series default
: If this attribute is defined to something different than 0, the motor
 will always stop the motion coming from the same mechanical direction.
 This means that it could be possible to ask the motor to go a little bit
 after the desired position and then to return to the desired position.
 The attribute value is the number of steps the motor will pass the desired
 position if it arrives from the "wrong" direction.
 This is a signed value.
 If the sign is positive, this means that the authorized direction to stop
 the motion is the increasing motor position direction.
 If the sign is negative, this means that the authorized direction to stop
 the motion is the decreasing motor position direction.
 It is a memorized attribute.
 It is not allowed to read or write this attribute when the motor is in
 FAULT or UNKNOWN mode.
 It is also not allowed to write this attribute when the motor is MOVING.
 Some hardware motor controllers are able to manage this backlash feature.
 If it is not the case, the motor interface will implement this behavior.
\end_layout

\begin_layout Standard
All the motor devices will have the already described attributes but some
 hardware motor controller supports other features which are not covered
 by this list of pre-defined attributes.
 Using Tango dynamic attribute creation, a motor device may have extra attribute
s used to get/set the motor hardware controller specific features.
 The main characteristics of these extra attributes are :
\end_layout

\begin_layout Itemize
Name defined by the motor controller software (See next chapter)
\end_layout

\begin_layout Itemize
Data type is BOOLEAN, LONG, DOUBLE or STRING defined by the motor controller
 software (See next chapter)
\end_layout

\begin_layout Itemize
The data format is always Scalar
\end_layout

\begin_layout Itemize
The write type is READ or READ_WRITE defined by the motor controller software
 (See next chapter).
 If the write type is READ_WRITE, the attribute is memorized by the Tango
 layer
\end_layout

\begin_layout Paragraph
The motor properties
\end_layout

\begin_layout Standard
Each motor device has a set of properties.
 Five of these properties are automatically managed by the pool software
 and must not be changed by the user.
 These properties are named Motor_id, _Acceleration, _Velocity, _Base_rate
 and _Deceleration.
 The user properties are:
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Property name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Default value
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Sleep_before_last_read
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset

 This property defines the time in milli-second that the software managing
 a motor movement will wait between it detects the end of the motion and
 the last motor position reading.
\end_layout

\begin_layout Paragraph
Getting motor state and limit switches using event
\end_layout

\begin_layout Standard
The simplest way to know if a motor is moving is to survey its state.
 If the motor is moving, its state will be MOVING.
 When the motion is over, its state will be back to ON (or ALARM if a limit
 switch has been reached).
 The pool motor interface allows client interested by motor state or motor
 limit switches value to use the Tango event system subscribing to motor
 state change event.
 As soon as a motor starts a motion, its state is changed to MOVING and
 an event is sent.
 As soon as the motion is over, the motor state is updated ans another event
 is sent.
 In the same way, as soon as a change in the limit switches value is detected,
 a change event is sent to client(s) which have subscribed to change event
 on the Limit_Switches attribute.
\end_layout

\begin_layout Paragraph
Reading the motor position attribute
\end_layout

\begin_layout Standard
For each motor, the key attribute is its position.
 Special care has been taken on this attribute management.
 When the motor is not moving, reading the Position attribute will generate
 calls to the controller and therefore hardware access.
 When the motor is moving, its position is automatically read every 100
 milli-seconds and stored in the Tango polling buffer.
 This means that a client reading motor Position attribute while the motor
 is moving will get the position from the Tango polling buffer and will
 not generate extra controller calls.
 It is also possible to get a motor position using the Tango event system.
 When the motor is moving, an event is sent to the registered clients when
 the change event criterion is true.
 By default, this change event criterion is set to be a difference in position
 of 5.
 It is tunable on a motor basis using the classical motor Position attribute
 abs_change property or at the pool device basis using its DefaultMotPos_AbsChan
ge property.
 Anyway, not more than 10 events could be sent by second.
 Once the motion is over, the motor position is made unavailable from the
 Tango polling buffer and is read a last time after a tunable waiting time
 (Sleep_bef_last_read property).
 A forced change event with this value is sent to clients using events.
\end_layout

\begin_layout Subsubsection
The Motor Controller
\begin_inset LatexCommand \label{sub:The-Motor-Controller}

\end_inset


\end_layout

\begin_layout Standard
Each controller code is built as a shared library or as a Python module
 which is dynamically loaded by the pool device the first time one controller
 using the shared library (or the module) is created.
 Each controller is uniquely defined by its name following the syntax 
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset

<controller_file_name>.<controller_class_name>/<instance_name>
\begin_inset ERT
status open

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset

At controller creation time, the pool checks the controller unicity on its
 control system (defined by the TANGO_HOST).
 It is possible to write controller using either C++ or Python language.
 Even if a Tango device server is a multi-threaded process, every access
 to the same controller will be serialized by a monitor managed by the Motor
 interface.
 This monitor is attached to the controller class and not to the controller
 instance to handle cases where several instances of the same controller
 class is used.
 For Python controller, this monitor will also take care of taking/releasing
 the Python Global Interpreter Lock (GIL) before any call to the Python
 controller is executed.
\end_layout

\begin_layout Paragraph
The basic
\end_layout

\begin_layout Standard
For motor controller, a pre-defined set of methods has to be implemented
 in the class implementing the controller interface.
 These methods can be splitted in 6 different types which are:
\end_layout

\begin_layout Enumerate
Methods to create/remove motor
\end_layout

\begin_layout Enumerate
Methods to move motor(s)
\end_layout

\begin_layout Enumerate
Methods to read motor(s) position
\end_layout

\begin_layout Enumerate
Methods to get motor(s) state
\end_layout

\begin_layout Enumerate
Methods to configure a motor
\end_layout

\begin_layout Enumerate
Remaining methods.
\end_layout

\begin_layout Standard
These methods, their rules and their execution sequencing is detailed in
 the following sub-chapters.
 The motor controller software layer is also used to inform the upper level
 of the features supported by the underlying hardware.
 This is called the controller 
\series bold
features
\series default
.
 It is detailed in a following sub-chapter.
 Some controller may need some configuration data.
 This will be supported using Tango properties.
 This is detailed in a dedicated sub-chapter.
\end_layout

\begin_layout Paragraph
Specifying the motor controller features
\end_layout

\begin_layout Standard
A controller feature is something that motor hardware controller is able
 to do or require on top of what has been qualified as the basic rules.
 Even if these features are common, not all the controllers implement them.
 Each of these common features are referenced by a pre-defined string.
 The controller code writer defined (from a pre-defined list) which of these
 features his hardware controller implements/requires.
 This list (a Python list or an array of C strings) has a well-defined name
 used by the upper layer software to retrieve it.
 The possible strings in this list are (case independent):
\end_layout

\begin_layout Itemize

\series bold
CanDoBacklash
\series default
: The hardware controller manages the motor backlash if the user defines
 one
\end_layout

\begin_layout Itemize

\series bold
WantRounding
\series default
: The hardware controller wants an integer number of step
\end_layout

\begin_layout Itemize

\series bold
encoder
\series default
: The hardware knows how to deal with encoder
\end_layout

\begin_layout Itemize

\series bold
home
\series default
: The hardware is able to manage home switch
\end_layout

\begin_layout Itemize

\series bold
home_acceleration
\series default
: It is possible to set the acceleration for motor homing
\end_layout

\begin_layout Itemize

\series bold
home_method
\series default
_
\series bold
xxx
\series default
: The hardware knows the home method called xxx
\end_layout

\begin_layout Itemize

\series bold
home_method_yyy
\series default
: The hardware knows the home method called yyy
\end_layout

\begin_layout Standard
The name of this list is simply: 
\series bold
ctrl_features
\series default
.
 If this list is not defined, this means that the hardware does not support/requ
ire any of the additional features.
 The Tango motor class will retrieve this list from the controller before
 the first motor belonging to this controller is created.
 As an example, we suppose that we have a pool with two classes of motor
 controller called Ctrl_A and Ctrl_B.
 The controllers features list are (in Python)
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset

Controller A : ctrl_features = ['CanDoBacklash','encoder']
\newline
ControllerB :
 ctrl_features = ['WantRounding','home','home_method_xxx']
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset

All motors devices belonging to the controller A will have the Encoder and
 Backlash features.
 For these motors, the backlash will be done by the motor controller hardware.
 All the motors belonging to the controller B will have the rounding, home
 and home_method features.
 For these motors, the backlash will be done by the motor interface code.
\end_layout

\begin_layout Paragraph
Specifying the motor controller extra attributes
\begin_inset LatexCommand \label{par:Specifying-the-motor}

\end_inset


\end_layout

\begin_layout Standard
Some of the hardware motor controller will have features not defined in
 the features list or not accessible with a pre-defined feature.
 To provide an interface to these specific hardware features, the controller
 code can define extra attributes.
 Another list called : 
\series bold
ctrl_extra_attributes
\series default
 is used to define them.
 This list (Python dictionary or an array of classical C strings) is used
 to define the name, data and read-write type of the Tango attribute which
 will be created to deal with these extra features.
 The attribute created for these controller extra features are all:
\end_layout

\begin_layout Itemize
Boolean, Long, Double or String
\end_layout

\begin_layout Itemize
Scalar
\end_layout

\begin_layout Itemize
Read or Read/Write (and memorized if Read/Write).
\end_layout

\begin_layout Standard
For Python classes (Python controller class), it is possible to define these
 extra attributes informations using a Python dictionary called 
\series bold
ctrl_extra
\series default
_
\series bold
attributes
\series default
.
 The extra attribute name is the dictionary element key.
 The dictionary element value is another dictionary with two members which
 are the extra attribute data type and the extra attribute read/write type.
 For instance, for our IcePap controller, this dictionary to defined one
 extra attribute called "SuperExtra" of data type Double which is also R/W
 will be
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset

ctrl_extra_attributes = {"SuperExtra":{"Type":"DevDouble","R/W Type","READ_WRITE
"}}
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
For C++ controller class, the extra attributes are defined within an array
 of 
\series bold
Controller::ExtraAttrInfo
\series default
 structures.
 The name of this array has to be <Ctrl_class_name>_ctrl_extra_attributes.
 Each Controller::ExtraAttrInfo structure has three elements which are all
 pointers to classical C string (const char *).
 These elements are:
\end_layout

\begin_layout Enumerate
The extra attribute name
\end_layout

\begin_layout Enumerate
The extra attribute data type
\end_layout

\begin_layout Enumerate
The extra attribute R/W type
\end_layout

\begin_layout Standard
A NULL pointer defined the last extra attribute.
 The following is an example of extra attribute definition for a controller
 class called "DummyController"
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
Controller::ExtraAttrInfo DummyController_ctrl_extra_attributes[] = 
\end_layout

\begin_layout LyX-Code
{{"SuperExtra","DevDouble","Read_Write"},
\end_layout

\begin_layout LyX-Code
 NULL};
\end_layout

\begin_layout Standard
The string describing the extra attribute data type may have the following
 value (case independent):
\end_layout

\begin_layout Itemize
DevBoolean, DevLong, DevDouble or DevString (in Python, a preceding "PyTango."
 is allowed)
\end_layout

\begin_layout Standard
The string describing the extra attribute R/W type may have the following
 value (case independent)
\end_layout

\begin_layout Itemize
Read or Read_Write (in Python, a preceding "PyTango." is allowed)
\end_layout

\begin_layout Paragraph
Methods to create/remove motor from controller
\end_layout

\begin_layout Standard
Two methods are called when creating or removing motor from a controller.
 These methods are called 
\series bold
AddDevice
\series default
 and 
\series bold
DeleteDevice
\series default
.
 The AddDevice method is called when a new motor belonging to the controller
 is created within the pool.
 The DeleteDevice method is called when a motor belonging to the controller
 is removed from the pool.
\end_layout

\begin_layout Paragraph
Methods to move motor(s)
\end_layout

\begin_layout Standard
Four methods are used when a request to move motor(s) is executed.
 These methods are called 
\series bold
PreStartAll
\series default
, 
\series bold
PreStartOne
\series default
, 
\series bold
StartOne
\series default
 and 
\series bold
StartAll
\series default
.
 The algorithm used to move one or several motors is the following :
\end_layout

\begin_layout LyX-Code
/FOR/ Each controller(s) implied in the motion
\end_layout

\begin_layout LyX-Code
     - Call PreStartAll()
\end_layout

\begin_layout LyX-Code
/END FOR/
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
/FOR/ Each motor(s) implied in the motion
\end_layout

\begin_layout LyX-Code
     - ret = PreStartOne(motor to move, new position)
\end_layout

\begin_layout LyX-Code
     - /IF/ ret is true
\end_layout

\begin_layout LyX-Code
          - Call StartOne(motor to move, new position)
\end_layout

\begin_layout LyX-Code
     - /END IF/
\end_layout

\begin_layout LyX-Code
/END FOR/
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
/FOR/ Each controller(s) implied in the motion
\end_layout

\begin_layout LyX-Code
     - Call StartAll()
\end_layout

\begin_layout LyX-Code
/END FOR/
\end_layout

\begin_layout Standard
The following array summarizes the rule of each of these methods :
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin {center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="5">
<features>
<column alignment="block" valignment="top" leftline="true" width="3cm">
<column alignment="block" valignment="top" leftline="true" width="3cm">
<column alignment="block" valignment="top" leftline="true" width="3cm">
<column alignment="block" valignment="top" leftline="true" width="3cm">
<column alignment="block" valignment="top" leftline="true" rightline="true" width="3cm">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
PresStartAll()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
PreStartOne()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
StartOne()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
StartAll()
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Default action
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Does nothing
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return true
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Does nothing
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Does nothing
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Externally called by
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Writing the Position attribute
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Writing the Position attribute
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Writing the Position attribute
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Writing the Position attribute
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Internally called
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Once for each implied controller
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
For each implied motor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
For each implied motor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Once for each implied controller
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Typical rule
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Init internal data for motion
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Check if motor motion is possible
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Set new motor position in internal data
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Send order to physical controller
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end {center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This algorithm covers the sophisticated case where a physical controller
 is able to move several motors at the same time.
 For some simpler controller, it is possible to implement only the StartOne()
 method.
 The default implementation of the three remaining methods is defined in
 a way that the algorithm works even in such a case.
\end_layout

\begin_layout Paragraph
Methods to read motor(s) position
\end_layout

\begin_layout Standard
Four methods are used when a request to read motor(s) position is received.
 These methods are called PreReadAll, PreReadOne, ReadAll and ReadOne.
 The algorithm used to read position of one or several motors is the following
 :
\end_layout

\begin_layout LyX-Code
/FOR/ Each controller(s) implied in the reading
\end_layout

\begin_layout LyX-Code
     - Call PreReadAll()
\end_layout

\begin_layout LyX-Code
/END FOR/
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
/FOR/ Each motor(s) implied in the reading
\end_layout

\begin_layout LyX-Code
     - PreReadOne(motor to read)
\end_layout

\begin_layout LyX-Code
/END FOR/
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
/FOR/ Each controller(s) implied in the reading
\end_layout

\begin_layout LyX-Code
     - Call ReadAll()
\end_layout

\begin_layout LyX-Code
/END FOR/
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
/FOR/ Each motor(s) implied in the reading
\end_layout

\begin_layout LyX-Code
     - Call ReadOne(motor to read)
\end_layout

\begin_layout LyX-Code
/END FOR/
\end_layout

\begin_layout Standard
The following array summarizes the rule of each of these methods :
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin {center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="5">
<features>
<column alignment="block" valignment="top" leftline="true" width="3cm">
<column alignment="block" valignment="top" leftline="true" width="3cm">
<column alignment="block" valignment="top" leftline="true" width="3cm">
<column alignment="block" valignment="top" leftline="true" width="3cm">
<column alignment="block" valignment="top" leftline="true" rightline="true" width="3cm">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
PreReadAll()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
PreReadOne()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ReadAll()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ReadOne()
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Default action
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Does nothing
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Does nothing
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Does nothing
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Print message on the screen and returns NaN.
 Mandatory for Python
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Externally called by
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Reading the Position attribute
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Reading the Position attribute
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Reading the Position attribute
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Reading the Position attribute
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Internally called
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Once for each implied controller
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
For each implied motor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
For each implied controller
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Once for each implied motor
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Typical rule
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Init internal data for reading
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Memorize which motor has to be read
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Send order to physical controller
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return motor position from internal data
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end {center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This algorithm covers the sophisticated case where a physical controller
 is able to read several motors positions at the same time.
 For some simpler controller, it is possible to implement only the ReadOne()
 method.
 The default implementation of the three remaining methods is defined in
 a way that the algorithm works even in such a case.
\end_layout

\begin_layout Paragraph
Methods to get motor(s) state
\begin_inset LatexCommand \label{par:Methods-to-get-state}

\end_inset


\end_layout

\begin_layout Standard
Four methods are used when a request to get motor(s) state is received.
 These methods are called PreStateAll, PreStateOne, StateAll and StateOne.
 The algorithm used to get state of one or several motors is the following
 :
\end_layout

\begin_layout LyX-Code
/FOR/ Each controller(s) implied in the state getting
\end_layout

\begin_layout LyX-Code
     - Call PreStateAll()
\end_layout

\begin_layout LyX-Code
/END FOR/
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
/FOR/ Each motor(s) implied in the state getting
\end_layout

\begin_layout LyX-Code
     - PreStateOne(motor to get state)
\end_layout

\begin_layout LyX-Code
/END FOR/
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
/FOR/ Each controller(s) implied in the state getting
\end_layout

\begin_layout LyX-Code
     - Call StateAll()
\end_layout

\begin_layout LyX-Code
/END FOR/
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
/FOR/ Each motor(s) implied in the getting state
\end_layout

\begin_layout LyX-Code
     - Call StateOne(motor to get state)
\end_layout

\begin_layout LyX-Code
/END FOR/
\end_layout

\begin_layout Standard
The following array summarizes the rule of each of these methods :
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin {center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="5">
<features>
<column alignment="block" valignment="top" leftline="true" width="3cm">
<column alignment="block" valignment="top" leftline="true" width="3cm">
<column alignment="block" valignment="top" leftline="true" width="3cm">
<column alignment="block" valignment="top" leftline="true" width="3cm">
<column alignment="block" valignment="top" leftline="true" rightline="true" width="3cm">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
PreStateAll()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
PreStateOne()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
StateAll()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
StateOne()
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Default action
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Does nothing
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Does nothing
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Does nothing
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Mandatory for Python
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Externally called by
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Reading the motor state
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Reading the motor state
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Reading the motor state
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Reading the motor state
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Internally called
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Once for each implied controller
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
For each implied motor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
For each implied controller
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Once for each implied motor
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Typical rule
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Init internal data for reading
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Memorize which motor has to be read
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Send order to physical controller
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return motor state from internal data
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end {center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This algorithm covers the sophisticated case where a physical controller
 is able to read several motors state at the same time.
 For some simpler controller, it is possible to implement only the StateOne()
 method.
 The default implementation of the three remaining methods is defined in
 a way that the algorithm works even in such a case.
\end_layout

\begin_layout Paragraph
Methods to configure a motor
\end_layout

\begin_layout Standard
The rule of these methods is to
\end_layout

\begin_layout Itemize
Get or Set motor parameter(s) with methods called GetPar() or SetPar()
\end_layout

\begin_layout Itemize
Get or Set motor extra feature(s) parameter with methods called GetExtraAttribut
ePar() or SetExtraAttributePar()
\end_layout

\begin_layout Standard
The following table summarizes the usage of these methods
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin {center}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="5">
<features>
<column alignment="block" valignment="top" leftline="true" width="1cm">
<column alignment="block" valignment="top" leftline="true" width="3cm">
<column alignment="block" valignment="top" leftline="true" width="3cm">
<column alignment="block" valignment="top" leftline="true" width="4cm">
<column alignment="block" valignment="top" leftline="true" rightline="true" width="4cm">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
GetPar()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
SetPar()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
GetExtraAttributePar()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
SetExtraAttributePar()
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Called by
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Reading the Velocity, Acceleration, Base_rate, Deceleration and eventually
 Backlash attributes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Writing the Velocity, Acceleration, Base_rate, Deceleration, Step_per_unit
 and eventually Backlash attribute
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Reading any of the extra attributes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Writing any of the extra attributes
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Rule
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Get parameter from physical controller
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Set parameter in physical controller
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Get extra attribute value from the physical layer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Set additional attribute value in physical controller
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end {center}
\end_layout

\end_inset

Please, note that the default implementation of the GetPar() prints a message
 on the screen and returns a NaN double value.
 The GetExtraAttributePar() default implementation also prints a message
 on the screen and returns a string set to "Pool_met_not_implemented".
\end_layout

\begin_layout Paragraph
The remaining methods
\end_layout

\begin_layout Standard
The rule of the remaining methods are to
\end_layout

\begin_layout Itemize
Load a new motor position in a controller with a method called DefinePosition()
\end_layout

\begin_layout Itemize
Abort a running motion with a method called AbortOne()
\end_layout

\begin_layout Itemize
Send a raw string to the controller with a method called SendToCtrl()
\end_layout

\begin_layout Standard
The following table summarizes the usage of these methods
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin {center}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="4">
<features>
<column alignment="block" valignment="top" leftline="true" width="1cm">
<column alignment="block" valignment="top" leftline="true" width="3cm">
<column alignment="block" valignment="top" leftline="true" width="2cm">
<column alignment="block" valignment="top" leftline="true" rightline="true" width="3cm">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DefinePosition()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
AbortOne()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
SendToCtrl()
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Called by
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The motor SetPosition command
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The motor Abort command
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The Pool SendToController command
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Rule
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Load a new motor position in controller
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Abort a running motion
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Send the input string to the controller and returns the controller answer
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end {center}
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Controller properties
\begin_inset LatexCommand \label{par:Controller-properties}

\end_inset


\end_layout

\begin_layout Standard
Each controller may have a set of 
\series bold
properties
\series default
 to configure itself.
 Properties are defined at the controller class level but can be re-defined
 at the instance level.
 It is also possible to define a property default value.
 These default values are stored within the controller class code.
 If a default value is not adapted to specific object instance, it is possible
 to define a new property value which will be stored in the Tango database.
 Tango database allows storing data which are not Tango device property.
 This storage could be seen simply as a couple name/value.
 Naming convention for this kind of storage could be defined as 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

\end_layout

\end_inset

controller_class->prop: value or 
\newline
controller_class/instance->prop: value
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset

 The calls necessary to retrieve/insert/update these values from/to the
 database already exist in the Tango core.
 The algorithm used to retrieve a property value is the following:
\end_layout

\begin_layout LyX-Code
- Property value = Not defined
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
/IF/ Property has a default value
\end_layout

\begin_layout LyX-Code
    - Property value = default value
\end_layout

\begin_layout LyX-Code
/ENDIF/
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
/IF/ Property has a value defined in db at class level
\end_layout

\begin_layout LyX-Code
    - Property value = class db value
\end_layout

\begin_layout LyX-Code
/ENDIF/
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
/IF/ Property has a value defined in db at instance level
\end_layout

\begin_layout LyX-Code
    - Property value = instance db value
\end_layout

\begin_layout LyX-Code
/ENDIF/
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
/IF/ Property still not defined
\end_layout

\begin_layout LyX-Code
    - Error
\end_layout

\begin_layout LyX-Code
/ENDIF/
\end_layout

\begin_layout Standard
As an example, the following array summarizes the result of this algorithm.
 The example is for an IcePap controller and the property is the port number
 (called port_number)
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="6">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<column alignment="center" valignment="top" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
case 1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
case 2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
case 3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
case 4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
case 5
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
default value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
5000
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
5000
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
5000
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
5000
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
class in DB
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
5150
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
5150
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
inst.
 in DB
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
5200
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
5250
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Property value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
5000
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
5200
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
5150
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
5250
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Error
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset

Case 1: The IcePap controller class defines one property called port_number
 and assigns it a default value of 5000
\newline
Case 2 : An IcePap controller is
 created with an instance name "My_IcePap".
 The property IcePap/My_IcePap->port_number has been set to 5200 in db
\newline
Case
 3: The hard coded value of 5000 for port number does not fulfill the need.
 A property called IcePap->port_number set to 5150 is defined in db.
\newline
Case
 4: We have one instance of IcePap called "My_IcePap" for which we have
 defined a property "IcePap/My_IcePap" set to 5250.
\newline
Case 5: The IcePap controller
 has not defined a default value for the property.
\end_layout

\begin_layout Standard
In order to provide the user with a friendly interface, all the properties
 defined for a controller class have to have informations hard-coded into
 the controller class code.
 We need at least three informations and sometimes four for each property.
 They are:
\end_layout

\begin_layout Enumerate
The property name (Mandatory)
\end_layout

\begin_layout Enumerate
The property description (Mandatory)
\end_layout

\begin_layout Enumerate
The property data type (Mandatory)
\end_layout

\begin_layout Enumerate
The property default value (Optional)
\end_layout

\begin_layout Standard
With these informations, a graphical user interface is able to build at
 controller creation time a panel with the list of all the needed properties,
 their descriptions and eventually their default value.
 The user then have the possibility to re-define property value if the default
 one is not valid for his usage.
 This is the rule of the graphical panel to store the new value into the
 Tango database.
 The supported data type for controller property are:
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Property data type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
String to use in property definition
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Boolean
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DevBoolean
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Long
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DevLong
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Double
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DevDouble
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DevString
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Boolean array
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DevVarBooleanArray
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Long array
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DevVarLongArray
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Double array
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DevVarDoubleArray
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
String array
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DevVarStringArray
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status open

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For Python classes (Python controller class), it is possible to define these
 properties informations using a Python dictionary called 
\series bold
class_prop
\series default
.
 The property name is the dictionary element key.
 The dictionary element value is another dictionary with two or three members
 which are the property data type, the property description and an optional
 default value.
 If the data type is an array, the default value has to be defined in a
 Python list or tuple.
 For instance, for our IcePap port number property, this dictionary will
 be
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset

class_prop = {"port_number":{"Type":"DevLong","Description","Port on which
 the IcePap software server is listening","DefaultValue":5000}}
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
For C++ controller class, the properties are defined within an array of
 
\series bold
Controller::PropInfo
\series default
 structures.
 The name of this array has to be <Ctrl_class_name>_class_prop.
 Each Controller::PropInfo structure has four elements which are all pointers
 to classical C string (const char *).
 These elements are:
\end_layout

\begin_layout Enumerate
The property name
\end_layout

\begin_layout Enumerate
The property description
\end_layout

\begin_layout Enumerate
The property data type
\end_layout

\begin_layout Enumerate
The property default value (NULL if not used)
\end_layout

\begin_layout Standard
A NULL pointer defined the last property.
 The following is an example of property definition for a controller class
 called "DummyController"
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
Controller::PropInfo DummyController_class_prop[] = 
\end_layout

\begin_layout LyX-Code
{{"The prop","The first CPP property","DevLong","12"},
\end_layout

\begin_layout LyX-Code
 {"Another_Prop","The second CPP property","DevString",NULL},
\end_layout

\begin_layout LyX-Code
 {"Third_Prop","The third CPP property","DevVarLongArray","11,22,33"},
\end_layout

\begin_layout LyX-Code
 NULL};
\end_layout

\begin_layout Standard
The value of these properties is passed to the controller at controller
 instance creation time using a constructor parameter.
 In Python, this parameter is a dictionnary and the base class of the controller
 class will create one object attribute for each property.
 In our Python example, the controller will have an attribute called "port_numbe
r" with its value set to 5000.
 In C++, the controller contructor receives a vector of 
\series bold
Controller::Properties
\series default
 structure.
 Each Controller::Properties structure has two elements which are:
\end_layout

\begin_layout Enumerate
The property name as a C++ string
\end_layout

\begin_layout Enumerate
The property value in a 
\series bold
PropData
\series default
 structure.
 This PropData structure has four elements which are
\end_layout

\begin_deeper
\begin_layout Enumerate
A C++ vector of C++ bool type
\end_layout

\begin_layout Enumerate
A C++ vector of C++ long type
\end_layout

\begin_layout Enumerate
A C++ vector of C++ double type
\end_layout

\begin_layout Enumerate
A C++ vector of C++ string.
\end_layout

\end_deeper
\begin_layout Standard
Only the vector corresponding to the property data type has a size different
 than 0.
 If the property is an array, the vector has as many elements as the property
 has.
\end_layout

\begin_layout Paragraph
The MaxDevice property
\end_layout

\begin_layout Standard
Each controller has to have a property defining the maximum number of device
 it supports.
 This is a mandatory requirement.
 Therefore, in Python this property is simply defined by setting the value
 of a controller data member called 
\series bold
MaxDevice
\series default
 which will be taken as the default value for the controller.
 In C++, you have to define a global variable called <Ctrl_class_name>_MaxDevice.
 The
\series bold
 
\series default
management of the number of devices created using a controller (limited
 by this property) will be completely done by the pool software.
 The information related to this property is automatically added as first
 element in the information passed to the controller at creation time.
 The following is an example of the definition of this MaxDevice property
 in C++ for a controller class called "DummyController"
\end_layout

\begin_layout LyX-Code
long DummyController_MaxDevice = 16;
\end_layout

\begin_layout Paragraph
C++ controller
\end_layout

\begin_layout Standard
For C++, the controller code is implemented as a set of classes: A base
 class called 
\series bold
Controller
\series default
 and a class called 
\series bold
MotorController
\series default
 which inherits from Controller.
 Finally, the user has to write its controller class which inherits from
 MotorController.
\end_layout

\begin_layout Subparagraph
The Controller class
\begin_inset LatexCommand \label{sub:The-Cpp-Controller-class}

\end_inset


\end_layout

\begin_layout Standard
This class defined two pure virtual methods, seven virtual methods and some
 data types.
 The methods defined in this class are:
\end_layout

\begin_layout Enumerate
void 
\series bold
Controller::AddDevice
\series default
(long axe_number) 
\newline
Pure virtual
\end_layout

\begin_layout Enumerate
void 
\series bold
Controller::DeleteDevice
\series default
(long axe_number)
\newline
Pure virtual
\end_layout

\begin_layout Enumerate
void 
\series bold
Controller::PreStateAll
\series default
()
\newline
The default implementation does nothing
\end_layout

\begin_layout Enumerate
void 
\series bold
Controller::PreStateOne
\series default
(long idx_number)
\newline
The default implementation does nothing.
 The parameter is the device index in the controller
\end_layout

\begin_layout Enumerate
void 
\series bold
Controller::StateAll
\series default
()
\newline
The default implementation does nothing
\end_layout

\begin_layout Enumerate
void 
\series bold
Controller::StateOne
\series default
(long idx_number,CtrlState *ptr)
\newline
Read a device state.
 The CtrlState data type is a structure with two elements which are:
\end_layout

\begin_deeper
\begin_layout Itemize
A long dedicated to return device state (format ??)
\end_layout

\begin_layout Itemize
A string used in case the motor is in FAULT and the controller is able to
 return a string describing the fault.
\end_layout

\end_deeper
\begin_layout Enumerate
string
\series bold
 Controller::SendToCtrl
\series default
(string in_string)
\newline
Send the input string to the controller without interpreting
 it and returns the controller answer
\end_layout

\begin_layout Enumerate
Controller::CtrlData 
\series bold
Controller::GetExtraAttributePar
\series default
(long idx_number,string &extra_attribute_name)
\newline
Get device extra attribute
 value.
 The name of the extra attribute is passed as the second argument of the
 method.
 The default definition of this method prints a message on the screen and
 returns a string set to "Pool_meth_not_implemented".
 The CtrlData data type is a structure with the following elements
\end_layout

\begin_deeper
\begin_layout Enumerate
A data type enumeration called data_type describing which of the following
 element is valid (BOOLEAN, LONG, DOUBLE or STRING)
\end_layout

\begin_layout Enumerate
A boolean data called bo_data for boolean transfer
\end_layout

\begin_layout Enumerate
A long data called lo_data for long transfer
\end_layout

\begin_layout Enumerate
A double data called db_data for double transfer
\end_layout

\begin_layout Enumerate
A C++ string data called str_data for string transfer
\end_layout

\end_deeper
\begin_layout Enumerate
void
\series bold
 Controller::SetExtraAttributePar
\series default
(long idx_number, string &extra_attribute_name, Controller::CtrlData &extra_attr
ibute_value)
\newline
Set device extra attribute value.
\end_layout

\begin_layout Standard
It also has one data member which is the controller instance name with one
 method to return it
\end_layout

\begin_layout Enumerate
string &
\series bold
Controller::get_name
\series default
(): Returns the controller instance name
\end_layout

\begin_layout Subparagraph
The MotorController class
\end_layout

\begin_layout Standard
This class defined twelve virtual methods with default implementation.
 The virtual methods declared in this class are:
\end_layout

\begin_layout Enumerate
void 
\series bold
MotorController::PreStartAll
\series default
()
\newline
The default implementation does nothing.
\end_layout

\begin_layout Enumerate
bool 
\series bold
MotorController::PreStartOne
\series default
(long axe_number, double wanted_position)
\newline
The default implementation returns
 True.
\end_layout

\begin_layout Enumerate
void 
\series bold
MotorController::StartOne
\series default
(long axe_number, double wanted_position)
\newline
The default implementation does
 nothing.
\end_layout

\begin_layout Enumerate
void 
\series bold
MotorController::StartAll
\series default
()
\newline
Start the motion.
 The default implementation does nothing.
\end_layout

\begin_layout Enumerate
void 
\series bold
MotorController::PreReadAll
\series default
()
\newline
The default implementation does nothing.
\end_layout

\begin_layout Enumerate
void 
\series bold
MotorController::PreReadOne
\series default
(long axe_number)
\newline
The default implementation does nothing.
\end_layout

\begin_layout Enumerate
void 
\series bold
MotorController::ReadAll
\series default
()
\newline
The default implementation does nothing.
\end_layout

\begin_layout Enumerate
double 
\series bold
MotorController::ReadOne
\series default
(long axe_number)
\newline
Read a position.
 The default implementation does nothing.
\end_layout

\begin_layout Enumerate
void 
\series bold
MotorController::AbortOne
\series default
(long axe_number)
\newline
Abort a motion.
 The default implementation does nothing.
\end_layout

\begin_layout Enumerate
void 
\series bold
MotorController::DefinePosition
\series default
(long axe_number, double new_position)
\newline
Load a new position.
 The default implementation does nothing.
\end_layout

\begin_layout Enumerate
Controller::CtrlData 
\series bold
MotorController::GetPar
\series default
(long axe_number, string &par_name)
\newline
Get motor parameter value.
 The CtrlData data type is a structure with the following elements
\end_layout

\begin_deeper
\begin_layout Enumerate
A data type enumeration called data_type describing which of the following
 element is valid (BOOLEAN, LONG, DOUBLE or STRING)
\end_layout

\begin_layout Enumerate
A boolean data called bo_data for boolean transfer
\end_layout

\begin_layout Enumerate
A long data called lo_data for long transfer
\end_layout

\begin_layout Enumerate
A double data called db_data for double transfer
\end_layout

\begin_layout Enumerate
A C++ string data called str_data for string transfer
\end_layout

\begin_layout Standard
A motor controller has to handle four or five different possible values
 for the "par_name" parameter which are:
\end_layout

\begin_layout Itemize
Acceleration
\end_layout

\begin_layout Itemize
Deceleration
\end_layout

\begin_layout Itemize
Velocity
\end_layout

\begin_layout Itemize
Base_rate
\end_layout

\begin_layout Itemize
Backlash which has to be handled only for controller which has the backlash
 feature
\end_layout

\begin_layout Standard
The default definition of this method prints a message on the screen and
 returns a NaN double value.
\end_layout

\end_deeper
\begin_layout Enumerate
void 
\series bold
MotorController::SetPar
\series default
(long axe_number, string &par_name, Controller::CtrlData &par_value)
\newline
Set
 motor parameter value.
 The default implementation does nothing.
 A motor controller has to handle five or six different value for the "par_name"
 parameter which are:
\end_layout

\begin_deeper
\begin_layout Itemize
Acceleration
\end_layout

\begin_layout Itemize
Deceleration
\end_layout

\begin_layout Itemize
Velocity
\end_layout

\begin_layout Itemize
Base_rate
\end_layout

\begin_layout Itemize
Step_per_unit
\end_layout

\begin_layout Itemize
Backlash which has to be handled only for controller which has the backlash
 feature
\end_layout

\begin_layout Standard
The description of the CtrlData type is given in the documentation of the
 GetPar() method.
 The default definition of this method does nothing
\end_layout

\end_deeper
\begin_layout Standard
This class has only one constructor which is
\end_layout

\begin_layout Enumerate

\series bold
MotorController::MotorController
\series default
(const char *)
\newline
Constructor of the MotorController class with the controller
 name as instance name
\end_layout

\begin_layout Standard
Please, note that this class defines a structure called MotorState which
 inherits from the Controller::CtrlState and which has a data member:
\end_layout

\begin_layout Enumerate
A long describing the motor limit switches state (bit 0 for the Home switch,
 bit 1 for Upper Limit switch and bit 2 for the Lower Limit switch)
\end_layout

\begin_layout Standard
This structure is used in the StateOne() method.
\end_layout

\begin_layout Subparagraph
The user controller class
\begin_inset LatexCommand \label{par:The-user-controller}

\end_inset


\end_layout

\begin_layout Standard
The user has to implement the remaining pure virtual methods (AddDevice
 and DeleteDevice) and has to re-define virtual methods if the default implement
ation does not cover his needs.
 The controller code has to define two global variables which are:
\end_layout

\begin_layout Enumerate

\series bold
Motor_Ctrl_class_name
\series default
 (for Motor controller).
 This is an array of classical C strings terminated by a NULL pointer.
 Each array element is the name of a Motor controller class defined in this
 file.
\end_layout

\begin_layout Enumerate

\series bold
<CtrlClassName>_MaxDevice
\series default
.
 This variable is a long defining the maximum number of device that the
 controller hardware can support.
\end_layout

\begin_layout Standard
On top of that, a controller code has to define a C function (defined as
 "extern C") which is called by the pool to create instance(s) of the controller
 class.
 This function has the following definition 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset

Controller *
\series bold
_create_<Controller class name>
\series default
(const char *ctrl_instance_name,vector<Controller::Properties> &props)
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset

 For instance, for a controller class called DummyController, the name of
 this function has to be: _create_DummyController().
 The parameters passed to this function are:
\end_layout

\begin_layout Enumerate
The forth parameter given to the pool during the CreateController command
 (the instance name).
\end_layout

\begin_layout Enumerate
A reference to a C++ vector with controller properties as defined in 
\begin_inset LatexCommand \ref{par:Controller-properties}

\end_inset


\end_layout

\begin_layout Standard
The rule of this C function is to create one instance of the user controller
 class passing it the arguments it has received.
 The following is an example of these definitions
\end_layout

\begin_layout LyX-Code
//
\end_layout

\begin_layout LyX-Code
// Methods of the DummyController controller
\end_layout

\begin_layout LyX-Code
//
\end_layout

\begin_layout LyX-Code
....
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
const char *Motor_Ctrl_class_name[] = {"DummyController",NULL};
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
long DummyController_MaxDevice = 16;
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
extern "C" {
\end_layout

\begin_layout LyX-Code
Controller *_create_DummyController(const char *inst,vector<Controller::Properti
es> &prop)
\end_layout

\begin_layout LyX-Code
{
\end_layout

\begin_layout LyX-Code
   return new DummyController(inst,prop);
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Standard
On top of these mandatory definitions, you can define a controller documentation
 string, controller properties, controller features and controller extra
 features.
 The documentation string is the first element of the array returned by
 the Pool device GetControllerInfo command as detailed in 
\begin_inset LatexCommand \ref{ite:GetControllerInfo:}

\end_inset

.
 It has to be defined as a classical C string (const char *) with a name
 like <Ctrl_class_name>_doc.
 The following is an example of a controller C++ code defining all these
 elements.
\end_layout

\begin_layout LyX-Code
//
\end_layout

\begin_layout LyX-Code
// Methods of the DummyController controller
\end_layout

\begin_layout LyX-Code
//
\end_layout

\begin_layout LyX-Code
....
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
const char *Motor_Ctrl_class_name[] = {"DummyController",NULL};
\end_layout

\begin_layout LyX-Code
const char *DummyController_doc = "This is the C++ controller for the DummyContr
oller class";
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
long DummyController_MaxDevice = 16;
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
char *DummyController_ctrl_extra_features_list[] = {{"Extra_1","DevLong","Read_W
rite"},
\end_layout

\begin_layout LyX-Code
                                                    {"Super_2","DevString","Read
"},
\end_layout

\begin_layout LyX-Code
                                                    NULL};
\end_layout

\begin_layout LyX-Code
char *DummyController_ctrl_features[] = {"WantRounding","CanDoBacklash",NULL};
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
Controller::PropInfo DummyController_class_prop[] =
\end_layout

\begin_layout LyX-Code
{{"The prop","The first CPP property","DevLong","12"},
\end_layout

\begin_layout LyX-Code
 {"Another_Prop","The second CPP property","DevString",NULL},
\end_layout

\begin_layout LyX-Code
 {"Third_Prop","The third CPP property","DevVarLongArray","11,22,33"},
\end_layout

\begin_layout LyX-Code
 NULL};
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
extern "C" {
\end_layout

\begin_layout LyX-Code
Controller *_create_DummyController(const char *inst,vector<Controller::Properti
es> &prop)
\end_layout

\begin_layout LyX-Code
{
\end_layout

\begin_layout LyX-Code
   return new DummyController(inst,prop);
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Paragraph
Python controller
\end_layout

\begin_layout Standard
The principle is exactly the same than the one used for C++ controller but
 we don't have pure virtual methods with a compiler checking if they are
 defined at compile time.
 Therefore, it is the pool software which checks that the following methods
 are defined within the controller class when the controller module is loaded
 (imported):
\end_layout

\begin_layout Itemize
AddDevice
\end_layout

\begin_layout Itemize
DeleteDevice
\end_layout

\begin_layout Itemize
StartOne or StartAll method
\end_layout

\begin_layout Itemize
ReadOne method
\end_layout

\begin_layout Itemize
StateOne method
\end_layout

\begin_layout Standard
With Python controller, there is no need for function to create controller
 class instance.
 With the help of the Python C API, the pool device is able to create the
 needed instances.
 Note that the StateOne() method does not have the same signature for Python
 controller.
\end_layout

\begin_layout Enumerate
tuple 
\series bold
Stat
\series default
e
\series bold
One
\series default
(self,axe_number)
\newline
Get a motor state.
 The method has to return a tuple with two or three elements which are:
\end_layout

\begin_deeper
\begin_layout Enumerate
The motor state (as defined by Tango)
\end_layout

\begin_layout Enumerate
The limit switch state (integer with bit 0 for Home switch, bit 1 for Upper
 switch and bit 2 for Lower switch)
\end_layout

\begin_layout Enumerate
A string describing the motor fault if the controller has this feature.
\end_layout

\end_deeper
\begin_layout Standard
A Python controller class has to inherit from a class called 
\series bold
MotorController
\series default
.
 This does not add any feature but allow the pool software to realize that
 this class is a motor controller.
\end_layout

\begin_layout Paragraph
Python controller examples
\end_layout

\begin_layout Subparagraph
A minimum controller code
\end_layout

\begin_layout Standard
The following is an example of the minimum code structure needed to write
 a Python controller :
\end_layout

\begin_layout LyX-Code
1 import socket
\end_layout

\begin_layout LyX-Code
2 import PyTango
\end_layout

\begin_layout LyX-Code
3 import MotorController
\end_layout

\begin_layout LyX-Code
4 
\end_layout

\begin_layout LyX-Code
5 class MinController(MotorController.MotorController):
\end_layout

\begin_layout LyX-Code
6 
\end_layout

\begin_layout LyX-Code
7 #
\end_layout

\begin_layout LyX-Code
8 # Some controller definitions
\end_layout

\begin_layout LyX-Code
9 #
\end_layout

\begin_layout LyX-Code
10 
\end_layout

\begin_layout LyX-Code
11    MaxDevice = 1
\end_layout

\begin_layout LyX-Code
12 
\end_layout

\begin_layout LyX-Code
13 #
\end_layout

\begin_layout LyX-Code
14 # Controller methods
\end_layout

\begin_layout LyX-Code
15 #
\end_layout

\begin_layout LyX-Code
16 
\end_layout

\begin_layout LyX-Code
17    def __init__(self,inst,props):
\end_layout

\begin_layout LyX-Code
18       MotorController.MotorController.__init__(self,inst,props)
\end_layout

\begin_layout LyX-Code
19       self.inst_name = inst
\end_layout

\begin_layout LyX-Code
20       self.socket_connected = False
\end_layout

\begin_layout LyX-Code
21       self.host = "the_host"
\end_layout

\begin_layout LyX-Code
22       self.port = 1111
\end_layout

\begin_layout LyX-Code
23 
\end_layout

\begin_layout LyX-Code
24 #
\end_layout

\begin_layout LyX-Code
25 # Connect to the icepap
\end_layout

\begin_layout LyX-Code
26 #
\end_layout

\begin_layout LyX-Code
27 
\end_layout

\begin_layout LyX-Code
28       self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
\end_layout

\begin_layout LyX-Code
29       self.sock.connect(self.host, self.port)
\end_layout

\begin_layout LyX-Code
30       self.socket_connected = True
\end_layout

\begin_layout LyX-Code
31 
\end_layout

\begin_layout LyX-Code
32       print "PYTHON -> Connected to", self.host, " on port", self.port
\end_layout

\begin_layout LyX-Code
33 
\end_layout

\begin_layout LyX-Code
34 
\end_layout

\begin_layout LyX-Code
35    def AddDevice(self,axis):
\end_layout

\begin_layout LyX-Code
36       print "PYTHON -> MinController/",self.inst_name,": In AddDevice
 method for axis",axis
\end_layout

\begin_layout LyX-Code
37 
\end_layout

\begin_layout LyX-Code
38    def DeleteDevice(self,axis):
\end_layout

\begin_layout LyX-Code
39       print "PYTHON -> MinController/",self.inst_name,": In DeleteDevice
 method for axis",axis
\end_layout

\begin_layout LyX-Code
40 
\end_layout

\begin_layout LyX-Code
41    def StateOne(self,axis):
\end_layout

\begin_layout LyX-Code
42       print "PYTHON -> MinController/",self.inst_name,": In StateOne method
 for axis",axis
\end_layout

\begin_layout LyX-Code
43       tup = (PyTango.DevState.ON,0)
\end_layout

\begin_layout LyX-Code
44       return tup
\end_layout

\begin_layout LyX-Code
45 
\end_layout

\begin_layout LyX-Code
46    def ReadOne(self,axis):
\end_layout

\begin_layout LyX-Code
47       print "PYTHON -> MinController/",self.inst_name,": In ReadOne method
 for axis",axis
\end_layout

\begin_layout LyX-Code
48       self.sock.send("Read motor position")
\end_layout

\begin_layout LyX-Code
49       pos = self.sock.recv(1024)
\end_layout

\begin_layout LyX-Code
50       return pos
\end_layout

\begin_layout LyX-Code
51 
\end_layout

\begin_layout LyX-Code
52    def StartOne(self,axis,pos):
\end_layout

\begin_layout LyX-Code
53       print "PYTHON -> MinController/",self.inst_name,": In StartOne method
 for axis",axis," with pos",pos
\end_layout

\begin_layout LyX-Code
54       self.sock.send("Send motor to position pos")
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
Line 11: Definition of the mandatory MaxDevice property set to 1 in this
 minimum code
\newline
Line 17-32: The IcePapController constructor code
\newline
Line 35-36:
 The AddDevice method
\newline
Line 38-39: The DeleteDevice method
\newline
Line 41-44: The
 StateOne method
\newline
Line 46-50: The ReadOne method reading motor position from
 the hardware controller
\newline
Line 52-54: The StartOne method writing motor position
 at position pos
\end_layout

\begin_layout Subparagraph
A full features controller code
\end_layout

\begin_layout Standard
The following is an example of the code structure needed to write a full
 features Python controller :
\end_layout

\begin_layout LyX-Code
1 import socket
\end_layout

\begin_layout LyX-Code
2 import PyTango
\end_layout

\begin_layout LyX-Code
3 import MotorController
\end_layout

\begin_layout LyX-Code
4 
\end_layout

\begin_layout LyX-Code
5 class IcePapController(MotorController.MotorController)
\end_layout

\begin_layout LyX-Code
6     "This is an example of a Python motor controller class" 
\end_layout

\begin_layout LyX-Code
7 #
\end_layout

\begin_layout LyX-Code
8 # Some controller definitions
\end_layout

\begin_layout LyX-Code
9 #
\end_layout

\begin_layout LyX-Code
10 
\end_layout

\begin_layout LyX-Code
11    MaxDevice = 128
\end_layout

\begin_layout LyX-Code
12    ctrl_features = ['CanDoBacklash'] 
\end_layout

\begin_layout LyX-Code
13    ctrl_extra_attributes = {'IceAttribute':{'Type':'DevLong','R/W Type':'READ
_WRITE'}} 
\end_layout

\begin_layout LyX-Code
14    class_prop = {'host':{'Type':'DevString','Description':"The IcePap
 controller 
\end_layout

\begin_layout LyX-Code
15                          host name",'DefaultValue':"IcePapHost"},
\end_layout

\begin_layout LyX-Code
16                 'port':{'Type':'DevLong','Description':"The port on which
 the 
\end_layout

\begin_layout LyX-Code
17                          IcePap software is listenning",'DefaultValue':5000}}
\end_layout

\begin_layout LyX-Code
18 
\end_layout

\begin_layout LyX-Code
19 #
\end_layout

\begin_layout LyX-Code
20 # Controller methods
\end_layout

\begin_layout LyX-Code
21 #
\end_layout

\begin_layout LyX-Code
22 
\end_layout

\begin_layout LyX-Code
23    def __init__(self,inst,props):
\end_layout

\begin_layout LyX-Code
24       MotorController.MotorController.__init__(self,inst,props)
\end_layout

\begin_layout LyX-Code
25       self.inst_name = inst
\end_layout

\begin_layout LyX-Code
26       self.socket_connected = False
\end_layout

\begin_layout LyX-Code
27
\end_layout

\begin_layout LyX-Code
28 #
\end_layout

\begin_layout LyX-Code
29 # Connect to the icepap
\end_layout

\begin_layout LyX-Code
30 #
\end_layout

\begin_layout LyX-Code
31 
\end_layout

\begin_layout LyX-Code
32       self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
\end_layout

\begin_layout LyX-Code
33       self.sock.connect(self.host, self.port)
\end_layout

\begin_layout LyX-Code
34       self.socket_connected = True
\end_layout

\begin_layout LyX-Code
35 
\end_layout

\begin_layout LyX-Code
36       print "PYTHON -> Connected to", self.host, " on port", self.port
\end_layout

\begin_layout LyX-Code
37 
\end_layout

\begin_layout LyX-Code
38 
\end_layout

\begin_layout LyX-Code
39    def AddDevice(self,axis):
\end_layout

\begin_layout LyX-Code
40       print "PYTHON -> IcePapController/",self.inst_name,": In AddDevice
 method for axis",axis
\end_layout

\begin_layout LyX-Code
41 
\end_layout

\begin_layout LyX-Code
42    def DeleteDevice(self,axis):
\end_layout

\begin_layout LyX-Code
43       print "PYTHON -> IcePapController/",self.inst_name,": In DeleteDevice
 method for axis",axis
\end_layout

\begin_layout LyX-Code
44 
\end_layout

\begin_layout LyX-Code
45    def PreReadAll(self):
\end_layout

\begin_layout LyX-Code
46       print "PYTHON -> IcePapController/",self.inst_name,": In PreReadAll
 method"
\end_layout

\begin_layout LyX-Code
47       self.read_pos = []
\end_layout

\begin_layout LyX-Code
48       self.motor_to_read = []
\end_layout

\begin_layout LyX-Code
49 
\end_layout

\begin_layout LyX-Code
50    def PreReadOne(self,axis):
\end_layout

\begin_layout LyX-Code
51       print "PYTHON -> IcePapController/",self.inst_name,": In PreReadOne
 method for axis",axis
\end_layout

\begin_layout LyX-Code
52       self.motor_to_read.append(axis)
\end_layout

\begin_layout LyX-Code
53 
\end_layout

\begin_layout LyX-Code
54    def ReadAll(self):
\end_layout

\begin_layout LyX-Code
55       print "PYTHON -> IcePapController/",self.inst_name,": In ReadAll
 method"
\end_layout

\begin_layout LyX-Code
56       self.sock.send("Read motors in the motor_to_read list")
\end_layout

\begin_layout LyX-Code
57       self.read_pos = self.sock.recv(1024)
\end_layout

\begin_layout LyX-Code
58 
\end_layout

\begin_layout LyX-Code
59    def ReadOne(self,axis):
\end_layout

\begin_layout LyX-Code
60       print "PYTHON -> IcePapController/",self.inst_name,": In ReadOne
 method for axis",axis
\end_layout

\begin_layout LyX-Code
61       return read_pos[axis]
\end_layout

\begin_layout LyX-Code
62 
\end_layout

\begin_layout LyX-Code
63    def PreStartAll(self):
\end_layout

\begin_layout LyX-Code
64       print "PYTHON -> IcePapController/",self.inst_name,": In PreStartAll
 method"
\end_layout

\begin_layout LyX-Code
65       self.write_pos = []
\end_layout

\begin_layout LyX-Code
66       self.motor_to_write = []
\end_layout

\begin_layout LyX-Code
67 
\end_layout

\begin_layout LyX-Code
68    def PreStartOne(self,axis,pos):
\end_layout

\begin_layout LyX-Code
69       print "PYTHON -> IcePapController/",self.inst_name,": In PreStartOne
 method for axis",axis," with pos",pos
\end_layout

\begin_layout LyX-Code
70       return True
\end_layout

\begin_layout LyX-Code
71 
\end_layout

\begin_layout LyX-Code
72    def StartOne(self,axis,pos):
\end_layout

\begin_layout LyX-Code
73       print "PYTHON -> IcePapController/",self.inst_name,": In StartOne
 method for axis",axis," with pos",pos
\end_layout

\begin_layout LyX-Code
74       self.write_pos.append(pos)
\end_layout

\begin_layout LyX-Code
75       self.motor_to_write(axis)
\end_layout

\begin_layout LyX-Code
76 
\end_layout

\begin_layout LyX-Code
77    def StartAll(self):
\end_layout

\begin_layout LyX-Code
78       print "PYTHON -> IcePapController/",self.inst_name,": In StartAll
 method"
\end_layout

\begin_layout LyX-Code
79       self.sock.send("Write motors in the motor_to_write list at position
 in the write_pos list"
\end_layout

\begin_layout LyX-Code
80
\end_layout

\begin_layout LyX-Code
81    def PreStateAll(self):
\end_layout

\begin_layout LyX-Code
82       print "PYTHON -> IcePapController/",self.inst_name,": In PreStateAll
 method"
\end_layout

\begin_layout LyX-Code
83       self.read_state = []
\end_layout

\begin_layout LyX-Code
84       self.motor_to_get_state = []
\end_layout

\begin_layout LyX-Code
85 
\end_layout

\begin_layout LyX-Code
86    def PreStateOne(self,axis):
\end_layout

\begin_layout LyX-Code
87       print "PYTHON -> IcePapController/",self.inst_name,": In PreStateOne
 method for axis",axis
\end_layout

\begin_layout LyX-Code
88       self.motor_to_get_state.append(axis)
\end_layout

\begin_layout LyX-Code
89 
\end_layout

\begin_layout LyX-Code
90    def StateAll(self):
\end_layout

\begin_layout LyX-Code
91       print "PYTHON -> IcePapController/",self.inst_name,": In StateAll
 method"
\end_layout

\begin_layout LyX-Code
92       self.sock.send("Read motors state for motor(s) in the motor_to_get_state
 list")
\end_layout

\begin_layout LyX-Code
93       self.read_state = self.sock.recv(1024)
\end_layout

\begin_layout LyX-Code
94 
\end_layout

\begin_layout LyX-Code
95    def StateOne(self,axis):
\end_layout

\begin_layout LyX-Code
96       print "PYTHON -> IcePapController/",self.inst_name,": In StateOne
 method for axis",axis
\end_layout

\begin_layout LyX-Code
97       one_state = [read_state[axis]]
\end_layout

\begin_layout LyX-Code
98       return one_state
\end_layout

\begin_layout LyX-Code
99
\end_layout

\begin_layout LyX-Code
100   def SetPar(self,axis,name,value):
\end_layout

\begin_layout LyX-Code
101      if name == 'Acceleration'
\end_layout

\begin_layout LyX-Code
102         print "Setting acceleration to",value
\end_layout

\begin_layout LyX-Code
103      elif name == 'Deceleration'
\end_layout

\begin_layout LyX-Code
104         print "Setting deceleartion to",value
\end_layout

\begin_layout LyX-Code
105      elif name == 'Velocity'
\end_layout

\begin_layout LyX-Code
106         print "Setting velocity to",value
\end_layout

\begin_layout LyX-Code
107      elif name == 'Base_rate'
\end_layout

\begin_layout LyX-Code
108         print "Setting base_rate to",value
\end_layout

\begin_layout LyX-Code
109      elif name == 'Step_per_unit'
\end_layout

\begin_layout LyX-Code
110         print "Setting step_per_unit to",value
\end_layout

\begin_layout LyX-Code
111      elif name == 'Backlash'
\end_layout

\begin_layout LyX-Code
112         print "Setting backlash to",value
\end_layout

\begin_layout LyX-Code
113 
\end_layout

\begin_layout LyX-Code
114    def GetPar(self,axis,name):
\end_layout

\begin_layout LyX-Code
115      ret_val = 0.0
\end_layout

\begin_layout LyX-Code
116      if name == 'Acceleration'
\end_layout

\begin_layout LyX-Code
117         print "Getting acceleration"
\end_layout

\begin_layout LyX-Code
118         ret_val = 12.34
\end_layout

\begin_layout LyX-Code
119       elif name == 'Deceleration'
\end_layout

\begin_layout LyX-Code
120         print "Getting deceleration"
\end_layout

\begin_layout LyX-Code
121         ret_val = 13.34
\end_layout

\begin_layout LyX-Code
122       elif name == 'Velocity'
\end_layout

\begin_layout LyX-Code
123         print "Getting velocity"
\end_layout

\begin_layout LyX-Code
124         ret_val = 14.34
\end_layout

\begin_layout LyX-Code
125       elif name == 'Base_rate'
\end_layout

\begin_layout LyX-Code
126         print "Getting base_rate"
\end_layout

\begin_layout LyX-Code
127         ret_val = 15.34
\end_layout

\begin_layout LyX-Code
128       elif name == 'Backlash'
\end_layout

\begin_layout LyX-Code
129         print "Getting backlash"
\end_layout

\begin_layout LyX-Code
130         ret_val = 123
\end_layout

\begin_layout LyX-Code
131      return ret_val
\end_layout

\begin_layout LyX-Code
132
\end_layout

\begin_layout LyX-Code
133   def SetExtraAttributePar(self,axis,name,value):
\end_layout

\begin_layout LyX-Code
134      if name == 'IceAttribute'
\end_layout

\begin_layout LyX-Code
135         print "Setting IceAttribute to",value
\end_layout

\begin_layout LyX-Code
136 
\end_layout

\begin_layout LyX-Code
137   def GetExtraAttributePar(self,axis,name):
\end_layout

\begin_layout LyX-Code
138      ret_val = 0.0
\end_layout

\begin_layout LyX-Code
139      if name == 'IceAttribute'
\end_layout

\begin_layout LyX-Code
140         print "Getting IceAttribute"
\end_layout

\begin_layout LyX-Code
141         ret_val = 12.34
\end_layout

\begin_layout LyX-Code
142      return ret_val
\end_layout

\begin_layout LyX-Code
143
\end_layout

\begin_layout LyX-Code
144   def AbortOne(self,axis):
\end_layout

\begin_layout LyX-Code
145      print "PYTHON -> IcePapController/",self.inst_name,": Aborting motion
 for axis:",axis
\end_layout

\begin_layout LyX-Code
146
\end_layout

\begin_layout LyX-Code
147   def DefinePosition(self,axis,value):
\end_layout

\begin_layout LyX-Code
148      print "PYTHON -> IcePapController/",self.inst_name,": Defining position
 for axis:",axis
\end_layout

\begin_layout LyX-Code
149
\end_layout

\begin_layout LyX-Code
150   def __del__(self):
\end_layout

\begin_layout LyX-Code
151      print "PYTHON -> IcePapController/",self.inst_name,": Aarrrrrg,
 I am dying"
\end_layout

\begin_layout LyX-Code
152
\end_layout

\begin_layout LyX-Code
153   def SendToCtrl(self,in_str)
\end_layout

\begin_layout LyX-Code
154      print "Python -> MinController/",self.inst_name,": In SendToCtrl
 method"
\end_layout

\begin_layout LyX-Code
155      self.sock.send("The input string")
\end_layout

\begin_layout LyX-Code
156      out_str = self.sock.recv(1024)
\end_layout

\begin_layout LyX-Code
157      return out_str
\end_layout

\begin_layout Standard
Line 6 : Definition of the Python DocString which will also be used for
 the first returned value of the Pool device GetControllerInfo command.
 See chapter 
\begin_inset LatexCommand \ref{ite:GetControllerInfo:}

\end_inset

 to get all details about this command.
\newline
Line 11: Definition of the mandatory
 MaxDevice property set to 128
\newline
Line 12: Definition of the pre-defined feature
 supported by this controller.
 In this example, only the backlash
\newline
Line 13: Definition of one controller
 extra feature called IceFeature
\newline
Line 14-17: Definition of 2 properties called
 host and port
\newline
Line 23-36: The IcePapController constructor code.
 Note that the object attribute host and port automatically created by the
 property management are used on line 32
\newline
Line 39-40: The AddDevice method
\newline
Line
 42-43: The DeleteDevice method
\newline
Line 45-48: The PreReadAll method which clears
 the 2 list read_pos and motor_to_read
\newline
Line 50-52: The PreReadOne method.
 It stores which method has to be read in the motor_to_read list
\newline
Line 54-57:
 The ReadAll method.
 It send the request to read motor positions to the controller and stores
 the result in the internal read_pos list
\newline
Line 59-61: The ReadOne method
 returning motor position from the internal read_pos list
\newline
Line 63-66: The
 PreStartAll method which clears 2 internal list called write_pos and motor_to_w
rite 
\newline
Line 68-70: The PreStartOne method
\newline
Line 72-75: The StartOne method which
 appends in the write_pos and motor_to_write list the new motor position
 and the motor number which has to be moved
\newline
Line 77-79: The StartAll method
 sending the request to the controller
\newline
Line 81-84: The PreStateAll method
 which clears 2 internal list called read_state and motor_to_get_state 
\newline
Line
 86-88: The PreStateOne method 
\newline
Line 90-93: The StateAll method sending the
 request to the controller
\newline
Line 95-98: The StateOne method returning motor
 state from the internal read_state list
\newline
Line 100-112: The SetPar method
 managing the acceleration, deceleration, velocity, base_rate and backlash
 attributes (because defined in line 11)
\newline
Line 114-131: The GetPar method
 managing the same 5 parameters plus the step_per_unit
\newline
Line 133-135: The
 SetExtraAttributePar method for the controller extra feature defined at
 line 12
\newline
Line 137-142: The GetExtraAttributePar method for controller extra
 feature
\newline
Line 144-145: The AbortOne method
\newline
Line 147-148: The DefinePosition
 method
\newline
Line 153-157: The SendToCtrl method
\end_layout

\begin_layout Paragraph
Defining available controller features
\end_layout

\begin_layout Standard
Four data types and two read_write modes are available for the attribute
 associated with controller features.
 The possible data type are:
\end_layout

\begin_layout Itemize
BOOLEAN
\end_layout

\begin_layout Itemize
LONG
\end_layout

\begin_layout Itemize
DOUBLE
\end_layout

\begin_layout Itemize
STRING
\end_layout

\begin_layout Standard
The read_write modes are:
\end_layout

\begin_layout Itemize
READ
\end_layout

\begin_layout Itemize
READ_WRITE
\end_layout

\begin_layout Standard
All the attributes created to deal with controller features and defined
 as READ_WRITE will be memorized attributes.
 This means that the attribute will be written with the memorized value
 just after the device creation by the Tango layer.
 The definition of a controller features means defining three elements which
 are the feature name, the feature data type and the feature read_write
 mode.
 It uses a C++ structure called MotorFeature with three elements which are
 a C string (const char *) for the feature name and two enumeration for
 the feature data type and feature read_write mode.
 All the available features are defined as an array of these structures
 in a file called 
\series bold
MotorFeatures.h
\end_layout

\begin_layout Paragraph
Controller access when creating a motor
\end_layout

\begin_layout Standard
When you create a motor (a new one or at Pool startup time), the calls executed
 on the controller depend if a command "SaveConfig" has already been executed
 for this motor.
 If the motor is new and the command SaveConfig has never been executed
 for this motor, the following controller methods are called:
\end_layout

\begin_layout Enumerate
The AddDevice() method
\end_layout

\begin_layout Enumerate
The SetPar() method for the Step_per_unit parameter
\end_layout

\begin_layout Enumerate
The GetPar() method for the Velocity parameter
\end_layout

\begin_layout Enumerate
The GetPar() method for the Acceleration parameter
\end_layout

\begin_layout Enumerate
The GetPar() method for the Deceleration parameter
\end_layout

\begin_layout Enumerate
The GetPar() method for the Base_rate parameter
\end_layout

\begin_layout Standard
If the motor is not new and if a SaveConfig command has been executed on
 this motor, during Pool startup sequence, the motor will be created and
 the following controller methods will be called:
\end_layout

\begin_layout Enumerate
The AddDevice() method
\end_layout

\begin_layout Enumerate
The SetPar() method for the Step_per_unit parameter
\end_layout

\begin_layout Enumerate
The SetPar() method for the Velocity parameter
\end_layout

\begin_layout Enumerate
The SetPar() method for the Acceleration parameter
\end_layout

\begin_layout Enumerate
The SetPar() method for the Deceleration parameter
\end_layout

\begin_layout Enumerate
The SetPar() method for the Base_rate parameter
\end_layout

\begin_layout Enumerate
The SetExtraAttributePar() method for each of the memorized motor extra
 attributes
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsection
The pool motor group interface
\end_layout

\begin_layout Standard
The motor group interface allows the user to move several motor(s) at the
 same time.
 It supports several attributes and commands.
 It is implemented in C++ and is mainly a set of controller methods call
 or individual motor call.
 The motor group interface is statically linked with the Pool device server.
 When creating a group, the user can define as group member three kinds
 of elements which are :
\end_layout

\begin_layout Enumerate
A simple motor
\end_layout

\begin_layout Enumerate
Another already created group
\end_layout

\begin_layout Enumerate
A pseudo-motor
\end_layout

\begin_layout Standard
Nevertheless, it is not possible to have several times the same physical
 motor within a group.
 Therefore, each group has a logical structure (the one defined by the user
 when the group is created) and a physical structure (the list of physical
 motors really used in the group).
\end_layout

\begin_layout Subsubsection
The states
\end_layout

\begin_layout Standard
The motor group interface knows four states which are ON, MOVING, ALARM
 and FAULT.
 A motor group device is in MOVING state when one of the group element is
 in MOVING state.
 It is in ALARM state when one of the motor is in ALARM state (The underlying
 motor has reached one of the limit switches).
 A motor group device is in FAULT state as long as any one of the underlying
 motor is in FAULT state.
\end_layout

\begin_layout Subsubsection
The commands
\end_layout

\begin_layout Standard
The motor interface supports 1 command on top of the Tango Init, State and
 Status command.
 This command is summarized in the following table:
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Command name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Input data type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Output data type
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Abort
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status open

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
Abort
\series default
: It aborts a running motion.
 This command does not have input or output argument.
 It aborts the motion of the motor(s) member of the group which are still
 moving while the command is received.
\end_layout

\begin_layout Subsubsection
The attributes
\end_layout

\begin_layout Standard
The motor group supports the following attributes:
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="4">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Data type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Data format
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Writable
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Position
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevVarDoubleStringArray
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Spectrum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R/W
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status open

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
P
\series bold
osition
\series default
: This is a read/write spectrum of double attribute.
 Each spectrum element is the position of one motor.
 The order of this array is the order used when the motor group has been
 created.
 The size of this spectrum has to be the size corresponding to the motor
 number when the group is created.
 For instance, for a group created with 2 motors, another group of 3 motors
 and one pseudo-motor, the size of this spectrum when written has to be
 6 ( 2 + 3 + 1)
\end_layout

\begin_layout Subsubsection
The properties
\end_layout

\begin_layout Standard
Each motor group has 6 properties.
 Five of them are automatically managed by the pool software and must not
 be changed by the user.
 These properties are called Motor_group_id, Pool_device, Motor_list, User_group
_elt and Pos_spectrum_dim_x.
 The last property called Sleep_bef_last_read is a user property.This user
 property is:
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Property name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Default value
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Sleep_before_last_read
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset

 It defines the time in milli-second that the software managing a motor
 group motion will wait between it detects the end of the motion of the
 last group element and the last group motors position reading.
\end_layout

\begin_layout Subsubsection
Getting motor group state using event
\end_layout

\begin_layout Standard
The simplest way to know if a motor group is moving is to survey its state.
 If the group is moving, its state will be MOVING.
 When the motion is over, its state will be back to ON.
 The pool motor interface allows client interested by group state to use
 the Tango event system subscribing to motor group state change event.
 As soon as a group starts a motion, its state is changed to MOVING and
 an event is sent.
 As soon as the motion is over, the group state is updated ans another event
 is sent.
 Events will also be sent to each motor element of the group when they start
 moving and when they stop.
 These events could be sent before before the group state change event is
 sent in case of group motion with different motor motion for each group
 member.
\end_layout

\begin_layout Subsubsection
Reading the group position attribute
\end_layout

\begin_layout Standard
For each motor group, the key attribute is its position.
 Special care has been taken on this attribute management.
 When the motor group is not moving (None of the motor are moving), reading
 the Position attribute will generate calls to the controller(s) and therefore
 hardware access.
 When the motor group is moving (At least one of its motor is moving), its
 position is automatically read every 100 milli-seconds and stored in the
 Tango polling buffer.
 This means that a client reading motor group Position attribute while the
 group is moving will get the position from the Tango polling buffer and
 will not generate extra controller calls.
 It is also possible to get a group position using the Tango event system.
 When the group is moving, an event is sent to the registered clients when
 the change event criterion is true.
 By default, this change event criterion is set to be a difference in position
 of 5.
 It is tunable on a group basis using the classical group Position attribute
 "abs_change" property or at the pool device basis using its DefaultMotGrpPos_Ab
sChange property.
 Anyway, not more than 10 events could be sent by second.
 Once the motion is over (None of the motors within the group are moving),
 the group position is made unavailable from the Tango polling buffer and
 is read a last time after a tunable waiting time (Sleep_bef_last_read property).
 A forced change event with this value is sent to clients using events.
\end_layout

\begin_layout Subsubsection
The ghost motor group
\end_layout

\begin_layout Standard
In order to allow pool client software to be entirely event based, some
 kind of polling has to be done on each motor to inform them on state change
 which are not related to motor motion.
 To achieve this goal, one internally managed motor group is created.
 Each pool motor is a member of this group.
 The Tango polling thread polls the state command of this group (Polling
 period tunable with the pool Ghostgroup_PollingPeriod property).
 The code of this group state command detects change in every motor state
 and send a state change event on the corresponding motor.
 This motor group is not available to client and is even not defined in
 the Tango database.
 This is why it is called the ghost group.
\end_layout

\begin_layout Subsection
The pool pseudo motor interface
\end_layout

\begin_layout Standard
The pseudo motor interface acts like an abstraction layer for a motor or
 a set of motors allowing the user to control the experiment by means of
 an interface which is more meaningful to him(her).
\end_layout

\begin_layout Standard
Each pseudo motor is represented by a C++ written tango device whose interface
 allows for the control of a single position (scalar value).
\end_layout

\begin_layout Standard
In order to translate the motor positions into pseudo positions and vice
 versa, calculations have to be performed.
 The device pool provides a python API class that can be overwritten to
 provide new calculations.
\end_layout

\begin_layout Subsubsection
The states
\end_layout

\begin_layout Standard
The pseudo motor interface knows four states which are ON, MOVING, ALARM
 and FAULT.
 A pseudo motor device is in MOVING state when at least one motor is in
 MOVING state.
 It is in ALARM state when one of the motor is in ALARM state (The underlying
 motor has reached one of the limit switches.
 A pseudo motor device is in FAULT state as long as any one of the underlying
 motor is in FAULT state).
\end_layout

\begin_layout Subsubsection
The commands
\end_layout

\begin_layout Standard
The pseudo motor interface supports 1 command on top of the Tango Init,
 State and Status commands.
 This command is summarized in the following table:
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Command name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Input data type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Output data type
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Abort
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status open

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
Abort
\series default
: It aborts a running movement.
 This command does not have input or output argument.
 It aborts the movement of the motor(s) member of the pseudo motor which
 are still moving while the command is received.
\end_layout

\begin_layout Subsubsection
The attributes
\end_layout

\begin_layout Standard
The pseudo motor supports the following attributes:
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="4">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Data type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Data format
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Writable
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Position
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevDouble
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Scalar
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R/W
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status open

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
Position
\series default
: This is read-write scalar double attribute.
 With the classical Tango min and max_value, it is easy to define authorized
 limit for this attribute.
 It is not allowed to read or write this attribute when the pseudo motor
 is in FAULT or UNKNOWN state.
 It is also not possible to write this attribute when the motor is already
 MOVING.
\end_layout

\begin_layout Subsubsection
The PseudoMotor system class
\end_layout

\begin_layout Standard
This chapter describes how to write a valid python pseudo motor system class.
\end_layout

\begin_layout Paragraph
Prerequisites
\end_layout

\begin_layout Standard
Before writing the first python pseudo motor class for your device pool
 two checks must be performed:
\end_layout

\begin_layout Enumerate
The device pool 
\series bold
PoolPath
\series default
 property must exist and must point to the directory which will contain
 your python pseudo motor module.
 The syntax of this PseudoPath property is the same used in the PATH or
 PYTHONPATH environment variables.
 Please see 
\begin_inset LatexCommand \ref{sub:PoolPath}

\end_inset

 for more information on setting this property
\end_layout

\begin_layout Enumerate
A PseudoMotor.py file is part of the device pool distribution and is located
 in <device pool home dir>/py_pseudo.
 This directory must be in the PYTHONPATH environment variable or it must
 be part of the 
\series bold
PoolPath
\series default
 device pool property metioned above
\end_layout

\begin_layout Paragraph
Rules
\end_layout

\begin_layout Standard
A correct pseudo motor system class must obey the following rules:
\end_layout

\begin_layout Enumerate
the python class PseudoMotor of the PseudoMotor module must be imported
 into the current namespace by using one of the python import statements:
\end_layout

\begin_deeper
\begin_layout LyX-Code
import PseudoMotor 
\shape italic
or
\end_layout

\begin_layout LyX-Code
from PseudoMotor import PseudoMotor 
\shape italic
or
\end_layout

\begin_layout LyX-Code
from PseudoMotor import *
\end_layout

\end_deeper
\begin_layout Enumerate
the pseudo motor system class being written must be a subclass of the PseudoMoto
r class (see example below)
\end_layout

\begin_layout Enumerate
the class variable 
\series bold
motor_roles
\series default
 must be set to be a tuple of text descriptions containing each motor role
 description.
 It is crucial that all necessary motors contain a textual description even
 if it is an empty one.
 This is because the number of elements in this tuple will determine the
 number of required motors for this pseudo motor class.
 The order in which the roles are defined is also important as it will determine
 the index of the motors in the pseudo motor system.
 
\end_layout

\begin_layout Enumerate
the class variable 
\series bold
pseudo_motor_roles
\series default
 must be set if the pseudo motor class being written represents more than
 one pseudo motor.
 The order in which the roles are defined will determine the index of the
 pseudo motors in the pseudo motor system.
 If the pseudo motor class represents only one pseudo motor then this operation
 is optional.
 If omitted the value will of pseudo_motor_roles will be set to: 
\end_layout

\begin_deeper
\begin_layout LyX-Code
pseudo_motor_roles = (<class name>,)
\end_layout

\end_deeper
\begin_layout Enumerate
if the pseudo motor class needs some special parameters then the class variable
 parameters must be set to be a dictionary of <parameter name> : { <property>
 : <value> } values where:
\end_layout

\begin_deeper
\begin_layout Standard
<parameter name> - is a string representing the name of the parameter
\end_layout

\begin_layout Standard
<property> - is one of the following mandatory properties: 'Description',
 'Type'.
 The 'Default Value' property is optional.
\end_layout

\begin_layout Standard
<value> - is the corresponding value of the property.
 The 'Description' can contain any text value.
 The 'Type' must be one of available Tango property data types and 'Default
 Value' must be a string containning a valid value for the corresponding
 'Type' value.
\end_layout

\end_deeper
\begin_layout Enumerate
the pseudo motor class must implement a 
\series bold
calc_pseudo
\series default
 method with the following signature:
\end_layout

\begin_deeper
\begin_layout LyX-Code
\align center
number = calc_pseudo(index, physical_pos, params = None)
\end_layout

\begin_layout Standard
The method will receive as argument the index of the pseudo motor for which
 the pseudo position calculation is requested.
 This number refers to the index in the pseudo_motor_roles class variable.
\end_layout

\begin_layout Standard
The physical_pos is a tuple containing the motor positions.
 
\end_layout

\begin_layout Standard
The params argument is optional and will contain a dictionary of <parameter
 name> : <value>.
\end_layout

\begin_layout Standard
The method body should contain a code to translate the given motor positions
 into pseudo motor positions.
\end_layout

\begin_layout Standard
The method will return a number representing the calculated pseudo motor
 position.
\end_layout

\end_deeper
\begin_layout Enumerate
the pseudo motor class must implement a 
\series bold
calc_physical
\series default
 method with the following signature:
\end_layout

\begin_deeper
\begin_layout LyX-Code
\align center
number = calc_physical(index, pseudo_pos, params = None)
\end_layout

\begin_layout Standard
The method will receive as argument the index of the motor for which the
 physical position calculation is requested.
 This number refers to the index in the motor_roles class variable.
\end_layout

\begin_layout Standard
The pseudo_pos is a tuple containing the pseudo motor positions.
 
\end_layout

\begin_layout Standard
The params argument is optional and will contain a dictionary of <parameter
 name> : <value>.
\end_layout

\begin_layout Standard
The method body should contain a code to translate the given pseudo motor
 positions into motor positions.
\end_layout

\begin_layout Standard
The method will return a number representing the calculated motor position.
\end_layout

\end_deeper
\begin_layout Enumerate
Optional implementation of 
\series bold
calc_all_pseudo
\series default
 method with the following signature:
\end_layout

\begin_deeper
\begin_layout LyX-Code
\align center
()/[]/number = calc_all_pseudo(physical_pos,params = None)
\end_layout

\begin_layout Standard
The method will receive as argument a physical_pos which is a tuple of motor
 positions.
 
\end_layout

\begin_layout Standard
The params argument is optional and will contain a dictionary of <parameter
 name> : <value>.
\end_layout

\begin_layout Standard
The method will return a tuple or a list of calculated pseudo motor positions.
 If the pseudo motor class represents a single pseudo motor then the return
 value could be a single number.
\end_layout

\end_deeper
\begin_layout Enumerate
Optional implementation of 
\series bold
calc_all_physical
\series default
 method with the following signature:
\end_layout

\begin_deeper
\begin_layout LyX-Code
\align center
()/[]/number = calc_all_physical(pseudo_pos, params = None)
\end_layout

\begin_layout Standard
The method will receive as argument a pseudo_pos which is a tuple of pseudo
 motor positions.
 
\end_layout

\begin_layout Standard
The params argument is optional and will contain a dictionary of <parameter
 name> : <value>.
\end_layout

\begin_layout Standard
The method will return a tuple or a list of calculated motor positions.
 If the pseudo motor class requires a single motor then the return value
 could be a single number.
\end_layout

\end_deeper
\begin_layout Standard

\series bold
Note:
\series default
 The default implementation 
\series bold
calc_all_physical
\series default
 and 
\series bold
calc_all_pseudo 
\series default
methods will call calc_physical and calc_pseudo for each motor and physical
 motor respectively.
 Overwriting the default implementation should only be done if a gain in
 performance can be obtained.
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout Standard
One of the most basic examples is the control of a slit.
 The slit has two blades with one motor each.
 Usually the user doesn't want to control the experiment by directly handling
 these two motor positions since their have little meaning from the experiments
 perspective.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename gap_offset.png

\end_inset


\end_layout

\begin_layout Standard
Instead, it would be more useful for the user to control the experiment
 by means of changing the gap and offset values.
 Pseudo motors gap and offset will provide the necessary interface for controlli
ng the experiments gap and offset values respectively.
\end_layout

\begin_layout Standard
The calculations that need to be performed are:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\left\{ \begin{array}{l}
gap=sl2t+sl2b\\
offset=\frac{sl2t-sl2b}{2}\end{array}\right.\]

\end_inset


\begin_inset Formula \[
\left\{ \begin{array}{l}
sl2t=-offset+\frac{gap}{2}\\
sl2b=offset+\frac{gap}{2}\end{array}\right.\]

\end_inset


\end_layout

\begin_layout Standard
The corresponding python code would be:
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
01  class Slit(PseudoMotor):
\end_layout

\begin_layout LyX-Code
02      """A Slit system for controlling gap and offset pseudo motors."""
\end_layout

\begin_layout LyX-Code
04
\end_layout

\begin_layout LyX-Code
05      pseudo_motor_roles = ("Gap", "Offset")
\end_layout

\begin_layout LyX-Code
06      motor_roles = ("Motor on blade 1", "Motor on blade 2")
\end_layout

\begin_layout LyX-Code
07
\end_layout

\begin_layout LyX-Code
08  def calc_physical(self,index,pseudo_pos,params = None):
\end_layout

\begin_layout LyX-Code
09      half_gap = pseudo_pos[0]/2.0
\end_layout

\begin_layout LyX-Code
10      if index == 0:
\end_layout

\begin_layout LyX-Code
11          return -pseudo_pos[1] + half_gap
\end_layout

\begin_layout LyX-Code
12      else
\end_layout

\begin_layout LyX-Code
13          return pseudo_pos[1] + half_gap
\end_layout

\begin_layout LyX-Code
14
\end_layout

\begin_layout LyX-Code
15  def calc_pseudo(self,index,physical_pos,params = None):
\end_layout

\begin_layout LyX-Code
16      if index == 0:
\end_layout

\begin_layout LyX-Code
17          return physical_pos[1] + physical_pos[0]
\end_layout

\begin_layout LyX-Code
18      else:
\end_layout

\begin_layout LyX-Code
19          return (physical_pos[1] - physical_pos[0])/2.0
\end_layout

\begin_layout Paragraph
read gap position diagram
\end_layout

\begin_layout Standard
The following diagram shows the sequence of operations performed when the
 position is requested from the gap pseudo motor:
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename gap_read.png

\end_inset


\end_layout

\begin_layout Paragraph
write gap position diagram
\end_layout

\begin_layout Standard
The following diagram shows the sequence of operations performed when a
 new position is written to the gap pseudo motor:
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename gap_write.png

\end_inset


\end_layout

\begin_layout Subsection
The Counter/Timer interface
\end_layout

\begin_layout Subsubsection
The Counter/Timer user interface
\end_layout

\begin_layout Standard
The Counter/Timer interface is statically linked with the Pool device server
 and supports several attributes and commands.
 It is implemented in C++ and used a set of the so-called "controller" methods.
 The Counter/Timer interface is always the same whatever the hardware is.
 This is the rule of the "controller" to access the hardware using the communica
tion link supported by the hardware (network link, Serial line...).
\end_layout

\begin_layout Standard
The controller code has a well-defined interface and can be written using
 Python or C++.
 In both cases, it will be dynamically loaded into the pool device server
 process.
\end_layout

\begin_layout Paragraph
The states
\end_layout

\begin_layout Standard
The Counter/Timer interface knows four states which are ON, MOVING, FAULT
 and UNKNOWN.
 A Counter/Timer device is in MOVING state when it is counting! It is in
 FAULT if its controller software is not available (impossible to load it),
 if a fault is reported from the hardware controller or if the controller
 software returns an unforeseen state.
 The device is in the UNKNOWN state if an exception occurs during the communicat
ion between the pool and the hardware controller.
 
\end_layout

\begin_layout Paragraph
The commands
\end_layout

\begin_layout Standard
The Counter/Timer interface supports 2 commands on top of the Tango classical
 Init, State and Status commands.
 These commands are summarized in the following table:
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Command name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Input data type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Output data type
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Start
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Stop
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status open

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
Start
\series default
: When the device is used as a counter, this commands allows the counter
 to start counting.
 When it is used as a timer, this command starts the timer.
 This command changes the device state from ON to MOVING.
 It is not allowed to execute this command if the device is already in the
 MOVING state.
\end_layout

\begin_layout Itemize

\series bold
Stop
\series default
: When the device is used as a counter, this commands stops the counter.
 When it is used as a timer, this command stops the timer.
 This commands changes the device state from MOVING to ON.
 It is a no action command if this command is received and the device is
 not in the MOVING state.
\end_layout

\begin_layout Paragraph
The attributes
\end_layout

\begin_layout Standard
The Counter/Timer interface supports several attributes which are summarized
 in the following table:
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="6">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<column alignment="center" valignment="top" rightline="true" width="0">
<column alignment="center" valignment="top" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Data type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Data format
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Writable
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Memorized
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Ope/Expert
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevDouble
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Scalar
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R/W
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Ope
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
SimulationMode
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevBoolean
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Scalar
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Ope
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
Value
\series default
: This is read-write scalar double attribute.
 Writing the value is used to clear (or to preset) a counter or to set a
 timer time.
 For counter, reading the value allows the user to get the count number.
 For timer, the read value is the elapsed time since the timer has been
 started.
 After the acquisition, the value stays unchanged until a new count/time
 is started.
 For timer, the unit of this attribute is the second.
 
\end_layout

\begin_layout Itemize

\series bold
SimulationMode
\series default
: This is a read only scalar boolean attribute.
 When set, all the counting/timing requests are not forwarded to the software
 controller and then to the hardware.
 When set, the device Value is always 0.
 To set this attribute, the user has to used the pool device Tango interface.
 It is not allowed to read this attribute when the device is in FAULT or
 UNKNOWN states.
\end_layout

\begin_layout Paragraph
The properties
\end_layout

\begin_layout Standard
Each Counter/Timer device has one property which is automatically managed
 by the pool software and must not be changed by the user.
 This property is named Channel_id.
\end_layout

\begin_layout Subsubsection
The Counter/Timer controller
\end_layout

\begin_layout Standard
The CounterTimer controller follows the same principles already explained
 for the Motor controller in chapter 
\begin_inset LatexCommand \ref{sub:The-Motor-Controller}

\end_inset


\end_layout

\begin_layout Paragraph
The basic
\end_layout

\begin_layout Standard
For Counter/Timer, the pre-defined set of methods which has to be implemented
 can be splitted in 7 different types which are:
\end_layout

\begin_layout Enumerate
Methods to create/remove counter/timer experiment channel
\end_layout

\begin_layout Enumerate
Methods to get channel(s) state
\end_layout

\begin_layout Enumerate
Methods to read channel(s)
\end_layout

\begin_layout Enumerate
Methods to load channel(s)
\end_layout

\begin_layout Enumerate
Methods to start channel(s)
\end_layout

\begin_layout Enumerate
Methods to configure a channel
\end_layout

\begin_layout Enumerate
Remaining method
\end_layout

\begin_layout Paragraph
The CounterTimer controller features
\end_layout

\begin_layout Standard
Not defined yet
\end_layout

\begin_layout Paragraph
The CounterTimer controller extra attributes
\end_layout

\begin_layout Standard
The definition is the same than the one defined for Motor controller and
 explained in chapter 
\begin_inset LatexCommand \ref{par:Specifying-the-motor}

\end_inset


\end_layout

\begin_layout Paragraph
Methods to create/remove Counter Timer Channel
\end_layout

\begin_layout Standard
Two methods are called when creating or removing counter/timer channel from
 a controller.
 These methods are called 
\series bold
AddDevice
\series default
 and 
\series bold
DeleteDevice
\series default
.
 The AddDevice method is called when a new channel belonging to the controller
 is created within the pool.
 The DeleteDevice method is called when a channel belonging to the controller
 is removed from the pool.
\end_layout

\begin_layout Paragraph
Method(s) to get Counter Timer Channel state.
\end_layout

\begin_layout Standard
These methods follow the same definition than the one defined for Motor
 controller which are detailed in chapter 
\begin_inset LatexCommand \ref{par:Methods-to-get-state}

\end_inset

.
\end_layout

\begin_layout Paragraph
Method(s) to read Counter Timer Experiment Channel
\end_layout

\begin_layout Standard
Four methods are used when a request to read channel(s) value is received.
 These methods are called PreReadAll, PreReadOne, ReadAll and ReadOne.
 The algorithm used to read value of one or several channels is the following
 :
\end_layout

\begin_layout LyX-Code
/FOR/ Each controller(s) implied in the reading
\end_layout

\begin_layout LyX-Code
     - Call PreReadAll()
\end_layout

\begin_layout LyX-Code
/END FOR/
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
/FOR/ Each channel(s) implied in the reading
\end_layout

\begin_layout LyX-Code
     - PreReadOne(channel to read)
\end_layout

\begin_layout LyX-Code
/END FOR/
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
/FOR/ Each controller(s) implied in the reading
\end_layout

\begin_layout LyX-Code
     - Call ReadAll()
\end_layout

\begin_layout LyX-Code
/END FOR/
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
/FOR/ Each channel(s) implied in the reading
\end_layout

\begin_layout LyX-Code
     - Call ReadOne(channel to read)
\end_layout

\begin_layout LyX-Code
/END FOR/
\end_layout

\begin_layout Standard
The following array summarizes the rule of each of these methods :
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin {center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="5">
<features>
<column alignment="block" valignment="top" leftline="true" width="3cm">
<column alignment="block" valignment="top" leftline="true" width="3cm">
<column alignment="block" valignment="top" leftline="true" width="3cm">
<column alignment="block" valignment="top" leftline="true" width="3cm">
<column alignment="block" valignment="top" leftline="true" rightline="true" width="3cm">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
PreReadAll()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
PreReadOne()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ReadAll()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ReadOne()
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Default action
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Does nothing
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Does nothing
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Does nothing
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Print message on the screen and returns NaN.
 Mandatory for Python
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Externally called by
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Reading the Value attribute
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Reading the Value attribute
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Reading the Value attribute
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Reading the Value attribute
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Internally called
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Once for each implied controller
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
For each implied channel
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
For each implied controller
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Once for each implied channel
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Typical rule
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Init internal data for reading
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Memorize which channel has to be read
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Send order to physical controller
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return channel value from internal data
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end {center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This algorithm covers the sophisticated case where a physical controller
 is able to read several channels positions at the same time.
 For some simpler controller, it is possible to implement only the ReadOne()
 method.
 The default implementation of the three remaining methods is defined in
 a way that the algorithm works even in such a case.
\end_layout

\begin_layout Paragraph
Method(s) to load Counter Timer Experiment Channel
\end_layout

\begin_layout Standard
Four methods are used when a request to load channel(s) value is received.
 These methods are called PreLoadAll, PreLoadOne, LoadAll and LoadOne.
 The algorithm used to load value in one or several channels is the following
 :
\end_layout

\begin_layout LyX-Code
/FOR/ Each controller(s) implied in the loading
\end_layout

\begin_layout LyX-Code
     - Call PreLoadAll()
\end_layout

\begin_layout LyX-Code
/END FOR/
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
/FOR/ Each channel(s) implied in the loading
\end_layout

\begin_layout LyX-Code
     - ret = PreLoadOne(channel to load,new channel value)
\end_layout

\begin_layout LyX-Code
     - /IF/ ret is true
\end_layout

\begin_layout LyX-Code
          - Call LoadOne(channel to load, new channel value)
\end_layout

\begin_layout LyX-Code
     - /END IF/
\end_layout

\begin_layout LyX-Code
/END FOR/
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
/FOR/ Each controller(s) implied in the loading
\end_layout

\begin_layout LyX-Code
     - Call LoadAll()
\end_layout

\begin_layout LyX-Code
/END FOR/
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
The following array summarizes the rule of each of these methods :
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin {center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="5">
<features>
<column alignment="block" valignment="top" leftline="true" width="3cm">
<column alignment="block" valignment="top" leftline="true" width="3cm">
<column alignment="block" valignment="top" leftline="true" width="3cm">
<column alignment="block" valignment="top" leftline="true" width="3cm">
<column alignment="block" valignment="top" leftline="true" rightline="true" width="3cm">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
PreLoadAll()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
PreLoadOne()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
LoadOne()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
LoadAll()
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Default action
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Does nothing
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Returns true
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Does nothing
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Does nothing
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Externally called by
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Writing the Value attribute
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Writing the Value attribute
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Writing the Value attribute
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Writing the Value attribute
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Internally called
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Once for each implied controller
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
For each implied channel
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
For each implied channel
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Once for each implied controller
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Typical rule
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Init internal data for loading
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Check if counting is possible
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Set new channel value in internal data
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Send order to physical controller
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end {center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This algorithm covers the sophisticated case where a physical controller
 is able to write several channels positions at the same time.
 For some simpler controller, it is possible to implement only the LoadOne()
 method.
 The default implementation of the three remaining methods is defined in
 a way that the algorithm works even in such a case.
\end_layout

\begin_layout Paragraph
Method(s) to start Counter Timer Experiment Channel
\end_layout

\begin_layout Standard
Four methods are used when a request to start channel(s) is received.
 These methods are called PreStartAllCT, PreStartOneCT, StartAllCT and StartOneC
T.
 The algorithm used to start one or several channels is the following :
\end_layout

\begin_layout LyX-Code
/FOR/ Each controller(s) implied in the starting
\end_layout

\begin_layout LyX-Code
     - Call PreStartAllCT()
\end_layout

\begin_layout LyX-Code
/END FOR/
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
/FOR/ Each channel(s) implied in the starting
\end_layout

\begin_layout LyX-Code
     - ret = PreStartOneCT(channel to start)
\end_layout

\begin_layout LyX-Code
     - /IF/ ret is true
\end_layout

\begin_layout LyX-Code
          - Call StartOneCT(channel to start)
\end_layout

\begin_layout LyX-Code
     - /END IF/
\end_layout

\begin_layout LyX-Code
/END FOR/
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
/FOR/ Each controller(s) implied in the starting
\end_layout

\begin_layout LyX-Code
     - Call StartAllCT()
\end_layout

\begin_layout LyX-Code
/END FOR/
\end_layout

\begin_layout Standard
The following array summarizes the rule of each of these methods :
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin {center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="5">
<features>
<column alignment="block" valignment="top" leftline="true" width="3cm">
<column alignment="block" valignment="top" leftline="true" width="3cm">
<column alignment="block" valignment="top" leftline="true" width="3cm">
<column alignment="block" valignment="top" leftline="true" width="3cm">
<column alignment="block" valignment="top" leftline="true" rightline="true" width="3cm">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
PreStartAllCT()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
PreStartOneCT()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
StartOneCT()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
StartAllCT()
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Default action
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Does nothing
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Returns true
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Does nothing
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Does nothing
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Externally called by
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The Start command
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The Start command
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The Start command
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The Start command
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Internally called
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Once for each implied controller
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
For each implied channel
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
For each implied channel
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Once for each implied controller
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Typical rule
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Init internal data for starting
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Check if starting is possible
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Set new channel value in internal data
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Send order to physical controller
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end {center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This algorithm covers the sophisticated case where a physical controller
 is able to write several channels positions at the same time.
 For some simpler controller, it is possible to implement only the StartOneCT()
 method.
 The default implementation of the three remaining methods is defined in
 a way that the algorithm works even in such a case.
\end_layout

\begin_layout Paragraph
Methods to configure Counter Timer Experiment Channel
\end_layout

\begin_layout Standard
The rule of these methods is to
\end_layout

\begin_layout Itemize
Get or Set channel extra attribute(s) parameter with methods called GetExtraAttr
ibutePar() or SetExtraAttributePar()
\end_layout

\begin_layout Standard
The following table summarizes the usage of these methods
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin {center}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features>
<column alignment="block" valignment="top" leftline="true" width="1cm">
<column alignment="block" valignment="top" leftline="true" width="4cm">
<column alignment="block" valignment="top" leftline="true" rightline="true" width="4cm">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
GetExtraAttributePar()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
SetExtraAttributePar()
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Called by
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Reading any of the extra attributes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Writing any of the extra attributes
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Rule
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Get extra attribute value from the physical layer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Set additional attribute value in physical controller
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end {center}
\end_layout

\end_inset

The GetExtraAttributePar() default implementation returns a string set to
 "Pool_meth_not_implemented".
\end_layout

\begin_layout Paragraph
Remaining methods
\end_layout

\begin_layout Standard
The rule of the remaining methods is to
\end_layout

\begin_layout Itemize
Send a raw string to the controller with a method called SendToCtrl()
\end_layout

\begin_layout Itemize
Abort a counting counter/timer with a method called AbortOne()
\end_layout

\begin_layout Standard
The following table summarizes the usage of this method
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin {center}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features>
<column alignment="block" valignment="top" leftline="true" width="1cm">
<column alignment="block" valignment="top" leftline="true" rightline="true" width="3cm">
<column alignment="block" valignment="top" rightline="true" width="3cm">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
SendToCtrl()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
AbortOne()
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Called by
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The Pool SendToController command
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The Stop CounterTimer command
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Rule
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Send the input string to the controller and returns the controller answer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Abort a running count
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end {center}
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
The Counter Timer controller properties (including the MaxDevice property)
\end_layout

\begin_layout Standard
The definition is the same than the one defined for Motor controller and
 explained in chapter 
\begin_inset LatexCommand \ref{par:Controller-properties}

\end_inset

 
\end_layout

\begin_layout Paragraph
C++ controller
\end_layout

\begin_layout Standard
For C++, the controller code is implemented as a set of classes: A base
 class called 
\series bold
Controller
\series default
 and a class called 
\series bold
CoTiController
\series default
 which inherits from Controller.
 Finally, the user has to write its controller class which inherits from
 CoTiController.
 The Controller class has already been detailed in 
\begin_inset LatexCommand \ref{sub:The-Cpp-Controller-class}

\end_inset

.
\end_layout

\begin_layout Subparagraph
The CoTiController class
\end_layout

\begin_layout Standard
The CoTiController class defines thirteen virtual methods which are:
\end_layout

\begin_layout Enumerate
void 
\series bold
CoTiController::PreReadAll
\series default
()
\newline
The default implementation does nothing
\end_layout

\begin_layout Enumerate
void 
\series bold
CoTiController::PreReadOne
\series default
(long idx_to_read)
\newline
The default implementation does nothing
\end_layout

\begin_layout Enumerate
void 
\series bold
CoTiController::ReadAll
\series default
()
\newline
The default implementation does nothing
\end_layout

\begin_layout Enumerate
double 
\series bold
CoTiController::ReadOne
\series default
(long idx_to_read)
\newline
The default implementation prints a message on the screen
 and return a NaN value
\end_layout

\begin_layout Enumerate
void 
\series bold
CoTiController::PreLoadAll
\series default
()
\newline
The default implementation does nothing
\end_layout

\begin_layout Enumerate
bool 
\series bold
CoTiController::PreLoadOne
\series default
(long idx_to_load,double new_value)
\newline
The default implementation returns true
\end_layout

\begin_layout Enumerate
void 
\series bold
CoTiController::LoadOne
\series default
(long idx_to_load,double new_value)
\newline
The default implementation does nothing
\end_layout

\begin_layout Enumerate
void 
\series bold
CoTiController::LoadAll
\series default
()
\newline
The default implementation does nothing
\end_layout

\begin_layout Enumerate
void 
\series bold
CoTiController::PreStartAllCT
\series default
()
\newline
The default implementation does nothing
\end_layout

\begin_layout Enumerate
bool 
\series bold
CoTiController::PreStartOneCT
\series default
(long idx_to_start)
\newline
The default implementation returns true
\end_layout

\begin_layout Enumerate
void 
\series bold
CoTiController::StartOneCT
\series default
(long idx_to_start)
\newline
The default implementation does nothing
\end_layout

\begin_layout Enumerate
void 
\series bold
CoTiController::StartAllCT
\series default
()
\newline
The default implementation does nothing
\end_layout

\begin_layout Enumerate
void 
\series bold
CoTiController::AbortOne
\series default
(long idx_to_abort)
\newline
The default implementation does nothing
\end_layout

\begin_layout Standard
This class has one constructor which is
\end_layout

\begin_layout Enumerate

\series bold
CoTiController::CoTiController
\series default
(const char *)
\newline
Constructor of the CoTiController class with the controller
 instance name as parameter
\end_layout

\begin_layout Subparagraph
The user controller class
\end_layout

\begin_layout Standard
The user has to implement the remaining pure virtual methods (AddDevice
 and DeleteDevice) and has to re-define virtual methods if the default implement
ation does not cover his needs.
 The controller code has to define two global variables which are:
\end_layout

\begin_layout Enumerate

\series bold
CounterTimer_Ctrl_class_name
\series default
 : This is an array of classical C strings terminated by a NULL pointer.
 Each array element is the name of a Counter Timer Channel controller defined
 in the file.
\end_layout

\begin_layout Enumerate

\series bold
<CtrlClassName>_MaxDevice
\series default
: Idem motor controller definition
\end_layout

\begin_layout Standard
On top of that, a controller code has to define a C function to create the
 controller object.
 This is similar to the Motor controller definition which is documented
 in 
\begin_inset LatexCommand \ref{par:The-user-controller}

\end_inset


\end_layout

\begin_layout Paragraph
Python controller
\end_layout

\begin_layout Standard
The principle is exactly the same than the one used for C++ controller but
 we don't have pure virtual methods with a compiler checking if they are
 defined at compile time.
 Therefore, it is the pool software which checks that the following methods
 are defined within the controller class when the controller module is loaded
 (imported):
\end_layout

\begin_layout Itemize
AddDevice
\end_layout

\begin_layout Itemize
DeleteDevice
\end_layout

\begin_layout Itemize
ReadOne method
\end_layout

\begin_layout Itemize
StateOne method
\end_layout

\begin_layout Itemize
StartOneCT or StartAllCT method
\end_layout

\begin_layout Itemize
LoadOne or LoadAll method
\end_layout

\begin_layout Standard
With Python controller, there is no need for function to create controller
 class instance.
 With the help of the Python C API, the pool device is able to create the
 needed instances.
 Note that the StateOne() method does not have the same signature for Python
 controller.
\end_layout

\begin_layout Enumerate
tuple 
\series bold
Stat
\series default
e
\series bold
One
\series default
(self,idx_number)
\newline
Get a channel state.
 The method has to return a tuple with one or two elements which are:
\end_layout

\begin_deeper
\begin_layout Enumerate
The channel state (as defined by Tango)
\end_layout

\begin_layout Enumerate
A string describing the motor fault if the controller has this feature.
\end_layout

\end_deeper
\begin_layout Standard
A Python controller class has to inherit from a class called 
\series bold
CounterTimerController
\series default
.
 This does not add any feature but allows the pool software to realize that
 this class is a Counter Timer Channel controller.
\end_layout

\begin_layout Subsection
The Unix Timer
\end_layout

\begin_layout Standard
A timer using the Unix getitimer() and setitimer() system calls is provided.
 It is a Counter/Timer C++ controller following the definition of the previous
 chapter.
 Therefore, the device created using this controller will have theTango
 interface as the one previously described.
\end_layout

\begin_layout Standard
The Unix Timer controller shared library is called 
\series bold
UxTimer.so 
\series default
and the Controlller class is called 
\series bold
UnixTimer
\series default
.
 This controller is foresee to have only one device (MaxDevice = 1)
\end_layout

\begin_layout Subsection
The ZeroDExpChannel interface
\end_layout

\begin_layout Standard
The ZeroDExpChannel is used to access any kind of device which returns a
 scalar value and which are not counter or timer.
 Very often (but not always), this is a commercial measurement equipment
 connected to a GPIB bus.
 In order to have a precise as possible measurement, an acquisition loop
 is implemented for these ZeroDExpChannel device.
 This acquisition loop will simply read the data from the hardware as fast
 as it can (only "sleeping" 20 mS between each reading) and a computation
 is done on the resulting data set to return only one value.
 Three types of computation are foreseen.
 The user selects which one he needs with an attribute.
 The time during which this acquisition loop will get data is also defined
 by an attribute
\end_layout

\begin_layout Subsubsection
The ZeroDExpChannel user interface
\end_layout

\begin_layout Standard
The ZeroDExpChannel interface is statically linked with the Pool device
 server and supports several attributes and commands.
 It is implemented in C++ and used a set of the so-called "controller" methods.
 The ZeroDExpChannel interface is always the same whatever the hardware
 is.
 This is the rule of the "controller" to access the hardware using the communica
tion link supported by the hardware (network link, GPIB...).
\end_layout

\begin_layout Standard
The controller code has a well-defined interface and can be written using
 Python or C++.
 In both cases, it will be dynamically loaded into the pool device server
 process.
\end_layout

\begin_layout Paragraph
The states
\end_layout

\begin_layout Standard
The ZeroDExpChannel interface knows five states which are ON, MOVING, ALARM,
 FAULT and UNKNOWN.
 A ZeroDExpChannel device is in MOVING state when it is acquiring data!
 It is in ALARM state when at least one error has occured during the last
 acquisition.
 It is in FAULT if its controller software is not available (impossible
 to load it), if a fault is reported from the hardware controller or if
 the controller software returns an unforeseen state.
 The device is in the UNKNOWN state if an exception occurs during the communicat
ion between the pool and the hardware controller.
 
\end_layout

\begin_layout Paragraph
The commands
\end_layout

\begin_layout Standard
The ZeroDExpChannel interface supports 2 commands on top of the Tango classical
 Init, State and Status commands.
 These commands are summarized in the following table:
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Command name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Input data type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Output data type
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Start
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Stop
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status open

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
Start
\series default
: Start the acquisition for the time defined by the attribute CumulatedTime.
 If the CumulatedTime attribute value is 0, the acquisition will not automatical
ly stop until a Stop command is received.
 This command changes the device state from ON to MOVING.
 It is not allowed to execute this command if the device is already in the
 MOVING state.
\end_layout

\begin_layout Itemize

\series bold
Stop
\series default
: Stop the acquisition.
 This commands changes the device state from MOVING to ON.
 It is a no action command if this command is received and the device is
 not in the MOVING state.
\end_layout

\begin_layout Paragraph
The attributes
\end_layout

\begin_layout Standard
The ZeroDExpChannel interface supports several attributes which are summarized
 in the following table:
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="6">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<column alignment="center" valignment="top" rightline="true" width="0">
<column alignment="center" valignment="top" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Data type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Data format
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Writable
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Memorized
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Ope/Expert
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevDouble
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Scalar
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Ope
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
CumulatedValue
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevDouble
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Scalar
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Ope
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
CumulationTime
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevDouble
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Scalar
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R/W
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Ope
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
CumulationType
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevLong
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Scalar
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R/W
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Ope
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
CumulatedPointsNumber
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevLong
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Scalar
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Ope
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
CumulatedPointsError
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevLong
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Scalar
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Ope
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
SimulationMode
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevBoolean
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Scalar
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Ope
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
Value
\series default
: This is read scalar double attribute.
 This is the live value reads from the hardware through the controller
\end_layout

\begin_layout Itemize

\series bold
CumulatedValue
\series default
: This is a read scalar double attribute.
 This is the result of the data acquisition after the computation defined
 by the CumulationType attribute has been applied.
 This value is 0 until an acquisition has been started.
 After an acquisition, the attribute value stays unchanged until the next
 acquisition is started.
 If during the acquisition some error(s) has been received while reading
 the data, the attribute quality factor will be set to ALARM
\end_layout

\begin_layout Itemize

\series bold
CumulationTime
\series default
: This is a read-write scalar double and memorized attribute.
 This is the acquisition time in seconds.
 The acquisition will automatically stops after this CumulationTime.
 Very often, reading the hardware device to get one data is time-consuming
 and it is not possible to read the hardware a integer number of times within
 this CumulationTime.
 A device property called StopIfNoTime (see 
\begin_inset LatexCommand \ref{ite:StopIfNoTime:-A-boolean}

\end_inset

) allows the user to tune the acquisition loop.
\end_layout

\begin_layout Itemize

\series bold
CumulationType
\series default
: This a read-write scalar long and memorized attribute.
 Defines the computation type done of the values gathered during the acquisition.
 Three type of computation are supported:
\end_layout

\begin_deeper
\begin_layout Enumerate
Sum: The CumulatedValue attribute is the sum of all the data read during
 the acquisition.
 This is the default type.
\end_layout

\begin_layout Enumerate
Average: The CumulatedValue attribute is the average of all the data read
 during the acquisition
\end_layout

\begin_layout Enumerate
Integral: The CumulatedValue attribute is a type of the integral of all
 the data read during the acquisition
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
CumulatedPointsNumber
\series default
: This is a read scalar long attribute.
 This is the number of data correctly read during the acquisition.
 The attribute value is 0 until an acquisition has been started and stay
 unchanged between the end of the acquisition and the start of the next
 one.
\end_layout

\begin_layout Itemize

\series bold
CumulatedPointsError
\series default
: This is a read scalar long attribute.
 This is the number of times it was not possible to read the data from the
 hardware due to error(s).
 The property ContinueOnError allows the user to define what to do in case
 of error.
 The attribute value is 0 until an acquisition has been started and stay
 unchanged between the end of the acquisition and the start of the next
 one.
\end_layout

\begin_layout Itemize

\series bold
SimulationMode
\series default
: This is a read only scalar boolean attribute.
 When set, all the acquisition requests are not forwarded to the software
 controller and then to the hardware.
 When set, the device Value, CumulatedValue, CumulatedPointsNumber and Cumulated
PointsError are always 0.
 To set this attribute, the user has to used the pool device Tango interface.
 The value of the CumulationTime and CumulationType attributes are memorized
 at the moment this attribute is set.
 When this mode is turned off, if the value of any of the previously memorized
 attributes has changed, it is reapplied to the memorized value.
 It is not allowed to read this attribute when the device is in FAULT or
 UNKNOWN states.
\end_layout

\begin_layout Paragraph
The properties
\end_layout

\begin_layout Standard
Each ZeroDExpChannel device has a set of properties.
 One of these properties is automatically managed by the pool software and
 must not be changed by the user.
 This property is named Channel_id.
 The user properties are:
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Property name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Default value
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
StopIfNoTime
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
true
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ContinueOnError
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
true
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize

\series bold
\begin_inset LatexCommand \label{ite:StopIfNoTime:-A-boolean}

\end_inset

StopIfNoTime
\series default
: A boolean property.
 If this property is set to true, the acquisition loop will check before
 acquiring a new data that it has enough time to do this.
 To achieve this, the acquisition loop measures the time needed by the previous
 data read and checks that the actual time plus the acquisition time is
 still less than the CumulationTime.
 If not, the acquisition stops.
 When this property is set to false, the acquisition stops when the acquisition
 time is greater or equal than the CumulationTime
\end_layout

\begin_layout Itemize

\series bold
ContinueOnError
\series default
: A boolean property.
 If this property is set to true (the default), the acquisition loop continues
 reading the data even after an error has been received when trying to read
 data.
 If it is false, the acquisition stops as soon as an error is detected when
 trying to read data from the hardware.
\end_layout

\begin_layout Paragraph
Getting ZeroDExpChannel state using event
\end_layout

\begin_layout Standard
The simplest way to know if a Zero D Experiment Channel is acquiring data
 is to survey its state.
 If the device is acquiring data, its state will be MOVING.
 When the acquisition is over, its state will be back to ON.
 The pool ZeroDExpChannel interface allows client interested by Experiment
 Channel state value to use the Tango event system subscribing to channel
 state change event.
 As soon as a channel starts an acquisition, its state is changed to MOVING
 and an event is sent.
 As soon as the acquisition is over (for one reason or another), the channel
 state is updated and another event is sent.
\end_layout

\begin_layout Paragraph
\begin_inset LatexCommand \label{par:Reading-the-ZeroDExpChannel}

\end_inset

Reading the ZeroDExpChannel CumulatedValue attribute
\end_layout

\begin_layout Standard
During an acquisition, events with CumulatedValue attribute are sent from
 the device server to the interested clients.
 The acquisition loop will periodically read this event and fire an event.
 The first and the last events fired during the acquisition loop do not
 check the change event criteria.
 The other during the acquisition loop check the change event criteria
\end_layout

\begin_layout Subsubsection
The ZeroDExpChannel Controller
\end_layout

\begin_layout Standard
The ZeroDExpChannel controller follows the same principles already explained
 for the Motor controller in chapter 
\begin_inset LatexCommand \ref{sub:The-Motor-Controller}

\end_inset


\end_layout

\begin_layout Paragraph
The basic
\end_layout

\begin_layout Standard
For Zero Dimension Experiment Channel, the pre-defined set of methods which
 has to be implemented can be splitted in 5 different types which are:
\end_layout

\begin_layout Enumerate
Methods to create/remove zero dimension experiment channel
\end_layout

\begin_layout Enumerate
Methods to get channel(s) state
\end_layout

\begin_layout Enumerate
Methods to read channel(s)
\end_layout

\begin_layout Enumerate
Methods to configure a channel
\end_layout

\begin_layout Enumerate
Remaining method
\end_layout

\begin_layout Paragraph
The ZeroDExpChannel controller features
\end_layout

\begin_layout Standard
Not defined yet
\end_layout

\begin_layout Paragraph
The ZeroDExpChannel controller extra attributes
\end_layout

\begin_layout Standard
The definition is the same than the one defined for Motor controller and
 explained in chapter 
\begin_inset LatexCommand \ref{par:Specifying-the-motor}

\end_inset


\end_layout

\begin_layout Paragraph
Methods to create/remove Zero D Experiment Channel
\end_layout

\begin_layout Standard
Two methods are called when creating or removing experiment channel from
 a controller.
 These methods are called 
\series bold
AddDevice
\series default
 and 
\series bold
DeleteDevice
\series default
.
 The AddDevice method is called when a new channel belonging to the controller
 is created within the pool.
 The DeleteDevice method is called when a channel belonging to the controller
 is removed from the pool.
\end_layout

\begin_layout Paragraph
Method(s) to get Zero D Experiment Channel state.
\end_layout

\begin_layout Standard
These methods follow the same definition than the one defined for Motor
 controller which are detailed in chapter 
\begin_inset LatexCommand \ref{par:Methods-to-get-state}

\end_inset

.
\end_layout

\begin_layout Paragraph
Method(s) to read Zero D Experiment Channel
\end_layout

\begin_layout Standard
Four methods are used when a request to read channel(s) value is received.
 These methods are called PreReadAll, PreReadOne, ReadAll and ReadOne.
 The algorithm used to read value of one or several channels is the following
 :
\end_layout

\begin_layout LyX-Code
/FOR/ Each controller(s) implied in the reading
\end_layout

\begin_layout LyX-Code
     - Call PreReadAll()
\end_layout

\begin_layout LyX-Code
/END FOR/
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
/FOR/ Each channel(s) implied in the reading
\end_layout

\begin_layout LyX-Code
     - PreReadOne(channel to read)
\end_layout

\begin_layout LyX-Code
/END FOR/
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
/FOR/ Each controller(s) implied in the reading
\end_layout

\begin_layout LyX-Code
     - Call ReadAll()
\end_layout

\begin_layout LyX-Code
/END FOR/
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
/FOR/ Each channel(s) implied in the reading
\end_layout

\begin_layout LyX-Code
     - Call ReadOne(channel to read)
\end_layout

\begin_layout LyX-Code
/END FOR/
\end_layout

\begin_layout Standard
The following array summarizes the rule of each of these methods :
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin {center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="5">
<features>
<column alignment="block" valignment="top" leftline="true" width="3cm">
<column alignment="block" valignment="top" leftline="true" width="3cm">
<column alignment="block" valignment="top" leftline="true" width="3cm">
<column alignment="block" valignment="top" leftline="true" width="3cm">
<column alignment="block" valignment="top" leftline="true" rightline="true" width="3cm">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
PreReadAll()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
PreReadOne()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ReadAll()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ReadOne()
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Default action
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Does nothing
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Does nothing
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Does nothing
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Print message on the screen and returns NaN.
 Mandatory for Python
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Externally called by
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Reading the Value attribute
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Reading the Value attribute
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Reading the Value attribute
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Reading the Value attribute
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Internally called
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Once for each implied controller
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
For each implied channel
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
For each implied controller
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Once for each implied channel
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Typical rule
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Init internal data for reading
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Memorize which channel has to be read
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Send order to physical controller
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Return channel value from internal data
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end {center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This algorithm covers the sophisticated case where a physical controller
 is able to read several channels positions at the same time.
 For some simpler controller, it is possible to implement only the ReadOne()
 method.
 The default implementation of the three remaining methods is defined in
 a way that the algorithm works even in such a case.
\end_layout

\begin_layout Paragraph
Methods to configure Zero D Experiment Channel
\end_layout

\begin_layout Standard
The rule of these methods is to
\end_layout

\begin_layout Itemize
Get or Set channel extra attribute(s) parameter with methods called GetExtraAttr
ibutePar() or SetExtraAttributePar()
\end_layout

\begin_layout Standard
The following table summarizes the usage of these methods
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin {center}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features>
<column alignment="block" valignment="top" leftline="true" width="1cm">
<column alignment="block" valignment="top" leftline="true" width="4cm">
<column alignment="block" valignment="top" leftline="true" rightline="true" width="4cm">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
GetExtraAttributePar()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
SetExtraAttributePar()
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Called by
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Reading any of the extra attributes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Writing any of the extra attributes
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Rule
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Get extra attribute value from the physical layer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Set additional attribute value in physical controller
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end {center}
\end_layout

\end_inset

The GetExtraAttributePar() default implementation returns a string set to
 "Pool_meth_not_implemented".
\end_layout

\begin_layout Paragraph
Remaining method
\end_layout

\begin_layout Standard
The rule of the remaining method is to
\end_layout

\begin_layout Itemize
Send a raw string to the controller with a method called SendToCtrl()
\end_layout

\begin_layout Standard
The following table summarizes the usage of this method
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin {center}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features>
<column alignment="block" valignment="top" leftline="true" width="1cm">
<column alignment="block" valignment="top" leftline="true" rightline="true" width="3cm">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
SendToCtrl()
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Called by
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The Pool SendToController command
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Rule
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Send the input string to the controller and returns the controller answer
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end {center}
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
The ZeroDExpChannel controller properties (including the MaxDevice property)
\end_layout

\begin_layout Standard
The definition is the same than the one defined for Motor controller and
 explained in chapter 
\begin_inset LatexCommand \ref{par:Controller-properties}

\end_inset

 
\end_layout

\begin_layout Paragraph
C++ controller
\end_layout

\begin_layout Standard
For C++, the controller code is implemented as a set of classes: A base
 class called 
\series bold
Controller
\series default
 and a class called 
\series bold
ZeroDController
\series default
 which inherits from Controller.
 Finally, the user has to write its controller class which inherits from
 ZeroDController.
 The Controller class has already been detailed in 
\begin_inset LatexCommand \ref{sub:The-Cpp-Controller-class}

\end_inset

.
\end_layout

\begin_layout Subparagraph
The ZeroDController class
\end_layout

\begin_layout Standard
The ZeroDController class defines four virtual methods which are:
\end_layout

\begin_layout Enumerate
void 
\series bold
ZeroDController::PreReadAll
\series default
()
\newline
The default implementation does nothing
\end_layout

\begin_layout Enumerate
void 
\series bold
ZeroDController::PreReadOne
\series default
(long idx_to_read)
\newline
The default implementation does nothing
\end_layout

\begin_layout Enumerate
void 
\series bold
ZeroDController::ReadAll
\series default
()
\newline
The default implementation does nothing
\end_layout

\begin_layout Enumerate
double 
\series bold
ZeroDController::ReadOne
\series default
(long idx_to_read)
\newline
The default implementation prints a message on the screen
 and return a NaN value
\end_layout

\begin_layout Standard
This class has one constructor which is
\end_layout

\begin_layout Enumerate

\series bold
ZeroDController::ZeroDController
\series default
(const char *)
\newline
Constructor of the ZeroDController class with the controller
 instance name as parameter
\end_layout

\begin_layout Subparagraph
The user controller class
\end_layout

\begin_layout Standard
The user has to implement the remaining pure virtual methods (AddDevice
 and DeleteDevice) and has to re-define virtual methods if the default implement
ation does not cover his needs.
 The controller code has to define two global variables which are:
\end_layout

\begin_layout Enumerate

\series bold
ZeroDExpChannel_Ctrl_class_name
\series default
 : This is an array of classical C strings terminated by a NULL pointer.
 Each array element is the name of a ZeroDExpChannel controller defined
 in the file.
\end_layout

\begin_layout Enumerate

\series bold
<CtrlClassName>_MaxDevice
\series default
: Idem motor controller definition
\end_layout

\begin_layout Standard
On top of that, a controller code has to define a C function to create the
 controller object.
 This is similar to the Motor controller definition which is documented
 in 
\begin_inset LatexCommand \ref{par:The-user-controller}

\end_inset


\end_layout

\begin_layout Paragraph
Python controller
\end_layout

\begin_layout Standard
The principle is exactly the same than the one used for C++ controller but
 we don't have pure virtual methods with a compiler checking if they are
 defined at compile time.
 Therefore, it is the pool software which checks that the following methods
 are defined within the controller class when the controller module is loaded
 (imported):
\end_layout

\begin_layout Itemize
AddDevice
\end_layout

\begin_layout Itemize
DeleteDevice
\end_layout

\begin_layout Itemize
ReadOne method
\end_layout

\begin_layout Itemize
StateOne method
\end_layout

\begin_layout Standard
With Python controller, there is no need for function to create controller
 class instance.
 With the help of the Python C API, the pool device is able to create the
 needed instances.
 Note that the StateOne() method does not have the same signature for Python
 controller.
\end_layout

\begin_layout Enumerate
tuple 
\series bold
Stat
\series default
e
\series bold
One
\series default
(self,idx_number)
\newline
Get a channel state.
 The method has to return a tuple with one or two elements which are:
\end_layout

\begin_deeper
\begin_layout Enumerate
The channel state (as defined by Tango)
\end_layout

\begin_layout Enumerate
A string describing the motor fault if the controller has this feature.
\end_layout

\end_deeper
\begin_layout Standard
A Python controller class has to inherit from a class called 
\series bold
ZeroDController
\series default
.
 This does not add any feature but allows the pool software to realize that
 this class is a Zero D Experiment Channel controller.
\end_layout

\begin_layout Subsection
The OneDExpChannel interface
\end_layout

\begin_layout Standard
To be filled in
\end_layout

\begin_layout Subsection
The TwoDExpChannel interface
\end_layout

\begin_layout Standard
To be filled in
\end_layout

\begin_layout Subsection
The Measurement Group interface
\end_layout

\begin_layout Standard
The measurement group interface allows the user to access several data acquisiti
on channels at the same time.
 It is implemented as a C++ Tango device that is statically linked with
 the Pool device server.
 It supports several attributes and commands.
 
\end_layout

\begin_layout Standard
The measurement group is the key interface to be used when getting data.
 The Pool can have several measurement groups but only one will be 'in use'
 at a time.
 When creating a measurement group, the user can define four kinds of channels
 which are:
\end_layout

\begin_layout Enumerate
Counter/Timer
\end_layout

\begin_layout Enumerate
ZeroDExpChannel
\end_layout

\begin_layout Enumerate
OneDExpChannel
\end_layout

\begin_layout Enumerate
TwoDExpChannel
\end_layout

\begin_layout Standard
In order to properly use the measurement group, one of the channels has
 to be defined as the timer or the monitor.
 It is not possible to have several times the same channel in a measurement
 group.
 It is also not possible to create two measurement groups with exactly the
 same channels.
 
\end_layout

\begin_layout Subsubsection
The States
\end_layout

\begin_layout Standard
The measurement group interface knows five states which are ON, MOVING,
 ALARM, FAULT.
 A group is in MOVING state when it is acquiring data (which means that
 the timer/monitor channel is in MOVING state).
 A STANDBY state means that the group is not the current active group of
 the Pool it belongs to.
 An ON state means that the group is ready to be used.
 ALARM means that no timer or monitor are defined for the group.
 If at least one of the channels reported a FAULT by the controller(s) of
 that(those) channel(s), the group will be in FAULT state.
\end_layout

\begin_layout Subsubsection
The commands
\end_layout

\begin_layout Standard
The measurement group interface supports three commands on top of the Tango
 Init, State and Status commands.
 These commands are summarized in the following table:
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Command name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Input data type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Output data type
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Start
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Abort
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
AddExpChannel
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
RemoveExpChannel
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status open

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
Start
\series default
: When the device is in timer mode (Integration_time attribute > 0), it
 will start counting on all channels at the same time until the timer channel
 reaches a value of the Integration_time attribute.
 When the device in in monitor mode (Integration_count attribute > 0), it
 will start counting on all channels at the same time until de monitor channel
 reaches the value of the Integration_count attribute.
 For more details on setting the acquisition mode see 
\begin_inset LatexCommand \ref{Measurement Group: The attributes}

\end_inset

.
 This command will change the device state to MOVING.
 It will not be allowed to execute this command if the device is already
 in MOVING state.
 This command does not have any input or output arguments.
 The state will change from MOVING to ON only when the last channel reports
 that its acquisition has finished.
\end_layout

\begin_layout Itemize

\series bold
Abort
\series default
: It aborts the running data acquisition.
 It will stop each channel member of the measurement group.
 This command does not have any input or output arguments.
\end_layout

\begin_layout Itemize

\series bold
AddExpChannel
\series default
: adds a new experiment channel to the measurement group.
 The given string argument must be a valid experiment channel in the pool
 and must not be one of the channels of the measurement group.
 An event will be sent on the corresponding attribute representing the list
 of channels in the measurement group.
 For example, if the given channel is a Counter/Timer channel, then an event
 will be sent for the attribute 
\begin_inset Quotes eld
\end_inset

Counters
\begin_inset Quotes erd
\end_inset

 (See below for a list of attributes in the measurement group).
\end_layout

\begin_layout Itemize

\series bold
RemoveExpChannel
\series default
: removes the given channel from the measurement group.
 The given string argument must be a valid experiment channel in the measurement
 group.
 If the channel to be deleted is the current Timer/Monitor then the value
 for the corresponding attribute will be set to 
\begin_inset Quotes eld
\end_inset

Not Initialized
\begin_inset Quotes erd
\end_inset

 and an event will be sent.
 An event will be sent on the corresponding attribute representing the list
 of channels in the measurement group.
\end_layout

\begin_layout Subsubsection
\begin_inset LatexCommand \label{Measurement Group: The attributes}

\end_inset

The attributes
\end_layout

\begin_layout Standard
A measurement group will support 8+n (n being the number of channels) attributes
 summarized in the following table:
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="6">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<column alignment="center" valignment="top" rightline="true" width="0">
<column alignment="center" valignment="top" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Data type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Data format
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Writable
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Memorized
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Ope/Expert
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Integration_time
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevDouble
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Scalar
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R/W
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Ope
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Integration_count
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevLong
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Scalar
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R/W
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Ope
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Timer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevString
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Scalar
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R/W
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Ope
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Monitor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevString
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Scalar
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R/W
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Ope
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Counters
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevString
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Spectrum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Ope
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ZeroDExpChannels
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevString
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Spectrum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Ope
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
OneDExpChannels
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevString
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Spectrum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Ope
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
TwoDExpChannels
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevString
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Spectrum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Ope
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
<channel_name
\begin_inset Formula $_{\text{i}}$
\end_inset

>_Value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevDouble
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Scalar/Spectrum/Image
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Ope
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
Integration_time
\series default
: The group timer integration time.
 Setting this value to >0 will set the measurement group acquisition mode
 to timer.
 It will force Integration_count attribute to 0 (zero).
 It will also exclude the current Timer channel from the list of Counters.
 Units are in seconds.
\end_layout

\begin_layout Itemize

\series bold
Integration_count
\series default
: The group monitor count value.
 Setting this value to >0 will set the measurement group acquisition mode
 change to monitor.
 It will force Integration_time attribute to 0 (zero).
\end_layout

\begin_layout Itemize

\series bold
Timer
\series default
: The name of the channel used as a Timer.
 A 
\begin_inset Quotes erd
\end_inset

Not Initialized
\begin_inset Quotes erd
\end_inset

 value means no timer is defined
\end_layout

\begin_layout Itemize

\series bold
Monitor
\series default
: The name of the channel used as a Monitor.
 A 
\begin_inset Quotes erd
\end_inset

Not Initialized
\begin_inset Quotes erd
\end_inset

 value means no timer is defined
\end_layout

\begin_layout Itemize

\series bold
Counter
\series default
: The list of counter names in the group
\end_layout

\begin_layout Itemize

\series bold
ZeroDExpChannels
\series default
: The list of 0D Experiment channel names in the group
\end_layout

\begin_layout Itemize

\series bold
OneDExpChannels
\series default
: The list of 1D Experiment channel names in the group
\end_layout

\begin_layout Itemize

\series bold
TwoDExpChannels
\series default
: The list of 2D Experiment channel names in the group
\end_layout

\begin_layout Itemize

\series bold
<channel_name
\begin_inset Formula $_{\text{i}}$
\end_inset

>_Value
\series default
: (with
\begin_inset Formula $0\leq i<n$
\end_inset

) attributes dynamically created (one for each channel) which will contain
 the corresponding channel Value(for Counter/Timer, 1D or 2DExpChannels),
 CumulatedValue(for 0DExpChannels).
 For Counter/Timers and 0DExpChannels the data format will be Scalar.
 For 1DExpChannels it will be Spectrum and for 2DExpChannels it will be
 Image.
\end_layout

\begin_layout Subsubsection
The properties
\end_layout

\begin_layout Subsubsection*
Device properties
\end_layout

\begin_layout Standard
Each measurement group has five properties.
 All of them are managed automatically by the pool software and must not
 be changed by the user.
 These properties are called Measurement_group_id, Pool_device, CT_List,
 ZeroDExpChannel_List, OneDExpChannel_List, TwoDExpChannel_List.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsubsection
\begin_inset LatexCommand \label{measurement group:Checking-operation-modes}

\end_inset

Checking operation mode
\end_layout

\begin_layout Standard
Currently, the measurement group supports two operation modes.
 The table below shows how to determine the current mode for a measurement
 group.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
mode
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Integration_time
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Integration_count
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Timer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
>0.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Monitor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
>0
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Undef
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
0
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
'Undef' means no valid values are defined in Integration_time and in Integration
_count.
 You will not be able to execute the Start command in this mode.
\end_layout

\begin_layout Subsubsection
Getting measurement group state using event
\end_layout

\begin_layout Standard
The simplest way to know if a measurement group is acquiring data is to
 survey its state.
 If a measurement group is acquiring data its state will be MOVING.
 When the data acquisition is over, its state will change back to ON.
 The data acquisition is over when the measurement group detects that all
 channels finished acquisition (their state changed from MOVING to ON).The
 pool group interface allows clients interested in group state to use the
 Tango event system subscribing to measurement group state change event.
 As soon as a group starts acquiring data, its state is changed to MOVING
 and an event is sent.
 A new event will be sent when the data acquisition ends.
 Events will also be sent to each channel of the group when they start acquiring
 data and when they stop.
\end_layout

\begin_layout Subsubsection
Reading the measurement group channel values
\end_layout

\begin_layout Standard
For each measurement group there is a set of key dynamic attributes representing
 the value of each channel in the group.
 They are named <channel_name
\begin_inset Formula $_{\text{i}}$
\end_inset

>_Value.
 Special care has been taken on the management of these attributes with
 distinct behavior depending on the type of channel the attribute represents
 (Counter/Timer, 0D, 1D or 2D channel).
\end_layout

\begin_layout Subsubsection*
Counter/Timer channel values
\end_layout

\begin_layout Standard
A Counter/Timer Value is represented by a scalar read-only double attribute.
 When the measurement group is not taking data, reading the counter/timer
 value will generate calls to the controller and therefore hardware access.
 When the group is taking data (master channel is moving), the value of
 a counter/timer is read every 100 miliseconds and stored in the Tango polling
 buffer.
 This means that a client reading the value of the channel while the group
 is moving will get the value from the Tango polling buffer and will not
 generate exra controller calls.
 It is also possible to get the value using the Tango event system.
 When the group is moving, an event is sent to the registered clients when
 the change event criteria is true.
 This is applicable for each Counter/Timer channel in the group.
 By default, this change event criterion is set to be an absolute difference
 in the value of 5.0.
 It is tunable by attribute using the classical 
\begin_inset Quotes eld
\end_inset

abs_change
\begin_inset Quotes erd
\end_inset

 property or the pool device basis using its defaultCtGrpVal_AbsChange property.
 Anyway, not more than 10 events could be sent by second.
 Once the data acquisition is over, the value is made unavailable from the
 Tango polling buffer and is read a last time.
 A forced change event is sent to clients using events.
\end_layout

\begin_layout Subsubsection*
Zero D channel values
\end_layout

\begin_layout Standard
A ZeroDExpChannel CumulatedValue is represented by a scalar read-only double
 attribute.
 Usually a ZeroDChannel represents the value of a single device (ex.: multimeter).
 Therefore, has hardware access cannot be optimized for a group of devices,
 reading the value on the measurement group device attribute has exactly
 the same behavior as reading it directly on the CumulatedValue attribute
 of the ZeroDChannel device (see 
\begin_inset LatexCommand \ref{par:Reading-the-ZeroDExpChannel}

\end_inset

).
 
\end_layout

\begin_layout Subsubsection*
One D channel values
\end_layout

\begin_layout Standard
To be filled in
\end_layout

\begin_layout Subsubsection*
Two D channel values
\end_layout

\begin_layout Standard
To be filled in
\end_layout

\begin_layout Subsubsection*
Performance
\end_layout

\begin_layout Standard
Measurement group devices can often contain many channels.
 Client applications often request channel values for the set (or subset)
 of channels in a group.
 Read requests for these channel values through the <channel_name
\begin_inset Formula $_{\text{i}}$
\end_inset

>_Value attributes of a measurement group should be done by clients in groups
 as often as possible.
 This can be achieved by using the client Tango API call read_attributes
 on a DeviceProxy object.
 This will ensure maximum performance by minimizing hardware access since
 the measurement group can order channel value requests per controller thus
 avoiding unecessary calls to the hardware.
\end_layout

\begin_layout Subsubsection
Measurement group configuration
\end_layout

\begin_layout Subsubsection*
Timer/Monitor
\end_layout

\begin_layout Standard
Measurement group operation mode can be checked/set through the Integration_time
 and Integration_count (see 
\begin_inset LatexCommand \ref{measurement group:Checking-operation-modes}

\end_inset

).
 Setting the Integration_time to >0.0 will make the data acquisition (initiated
 by the invoking the Start command) finish when the channel defined in the
 Timer attribute reaches the value of Integration_time.
 Setting the Integration_count to >0 will make the data acquisition (initiated
 by the invoking the Start command) finish when the channel defined in the
 Monitor attribute reaches the value of Integration_count.
\end_layout

\begin_layout Standard
In either case, the measurement group will NOT assume that the master channel(ti
mer/monitor) is able to stop all the other channels in the group, so it
 will force a Stop on these channels as soon as it detects that the master
 has finished.
 This is the case of the UnixTimer channel which itself has no knowledge
 of the channels involved and therefore is not able to stop them directly.
\end_layout

\begin_layout Standard
Integration_time, Integration_count, timer and monitor are memorized attributes.
 This means that the configuration values of these attributes are stored
 in the database.
 The next time the Pool starts the values are restored.
 This is done in order to reduce Pool configuration at startup to the minimum.
\end_layout

\begin_layout Subsubsection
The ghost measurement group
\end_layout

\begin_layout Standard
In order to allow pool client software to be entirely event based, some
 kind of polling has to be done on each channel to inform them on state
 change which are not related to data acquisition.
 To achieve this goal, one internally managed measurement group is created.
 Each pool channel (counter/timer, 0D, 1D or 2D experiment channel) is a
 member of this group.
 The Tango polling thread polls the state command of this group (Polling
 period tunable with the pool Ghostgroup_PollingPeriod property).
 The code of this group state command detects change in every channel state
 and send a state change event on the corresponding channel.
 This measurment group is not available to client and is even not defined
 in the Tango database.
 This is why it is called the ghost measurement group.
\end_layout

\begin_layout Subsection
The pool serial line, GPIB, socket interfaces
\end_layout

\begin_layout Standard
To be filled in
\end_layout

\begin_layout Subsection
The pool Modbus interface
\end_layout

\begin_layout Standard
To be filled in
\end_layout

\begin_layout Section
Extending pool features
\end_layout

\begin_layout Standard
To be filled in
\end_layout

\begin_layout Section
Common task handled by the pool
\end_layout

\begin_layout Subsection
Constraint
\end_layout

\begin_layout Standard
Two types of constraint are identified.
\end_layout

\begin_layout Enumerate
Simple constraint: This type of constraint is valid only for motor motion.
 It limits motor motion.
 This in not the limit switches which are a hardware protection.
 It's a software limit.
 This type of constraint is managed by the min_value and max_value property
 of the motor Position Tango attribute.
 Tango core will refused to write the attribute (Position) if outside the
 limits set by these min_value and max_value attribute properties.
 These values are set on motor Position attribute in physical unit.
\newline

\series bold
Warning
\series default
: The backlash has to be taken into account in the management of this limit.
 In order to finish the motion always coming from the same direction, sometimes
 the motor has to go a little bit after the wanted position and then returns
 to the desired position.
 The limit value has to take the backlash value into account.
 If the motor backlash attribute is modified, it will also change the Position
 limit value.
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin {center}
\end_layout

\end_inset


\begin_inset Graphics
	filename limit.eps

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end {center}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
User constraint: This kind of constraint is given to the user to allow him
 to write constraint macros which will be executed to allow or disallow
 an action to be done on one object.
 In the pool case, the object is a writable attribute and the action is
 writing the attribute.
 Therefore, the following algorithm is used when writing an attribute with
 constraint:
\end_layout

\begin_layout LyX-Code
/IF/ Simple constraint set
\end_layout

\begin_layout LyX-Code
   /IF/ New value outside limits
\end_layout

\begin_layout LyX-Code
       - Throw an exception
\end_layout

\begin_layout LyX-Code
   /ENDIF/
\end_layout

\begin_layout LyX-Code
/ENDIF/
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
/IF/ Some user constraint associated to this attribute
\end_layout

\begin_layout LyX-Code
   /FOR/ All the user constraint
\end_layout

\begin_layout LyX-Code
      - Evaluate the constraint
\end_layout

\begin_layout LyX-Code
      /IF/ The constraint evaluates to False
\end_layout

\begin_layout LyX-Code
          - Throw an exception
\end_layout

\begin_layout LyX-Code
      /ENDIF/
\end_layout

\begin_layout LyX-Code
   /ENDFOR/
\end_layout

\begin_layout LyX-Code
/ENDIF/
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
- Write the attribute
\end_layout

\begin_layout Standard
The first part of this algorithm is part of the Tango core.
 The second part will be coded in the Pool Tango classes and in a first
 phase will be available only for the Position attribute of the Motor class.
\end_layout

\begin_layout Subsubsection
User constraint implementation
\end_layout

\begin_layout Standard
When the user creates a constraint, he has to provide to the pool the following
 information:
\end_layout

\begin_layout Enumerate
The name of the object to which the constraint belongs.
 It is the name of the writable Tango attribute (actually only a motor position
 attribute.
\end_layout

\begin_layout Standard
A user constraint will be written using the Python language.
 It has to be a Python class with a constructor and a "Evaluate" method.
 This class has to inherit from a class called PoolConstraint.
 This will allow the pool software to dynamically discover that this class
 is a pool constraint.
 The class may define the depending attributes/devices.
 A depending attribute/device is an object used to evaluate if the constraint
 is true or false.
 The depending attributes have to be defined in a list called 
\series bold
depending_attr_list
\series default
.
 Each element in this list is a dictionnary with up to 2 elements which
 are the description of the depending attribute and eventually a default
 value.
 The depending devices have to be defined in a list called 
\series bold
depending_dev_list
\series default
 which follow the same syntax than the depending_attr_list.
 A constraint may also have properties as defined in 
\begin_inset LatexCommand \ref{par:Controller-properties}

\end_inset

.
 The constructor will receive three input arguments which are:
\end_layout

\begin_layout Enumerate
A list with the depending attribute name
\end_layout

\begin_layout Enumerate
A list with the depending device name
\end_layout

\begin_layout Enumerate
A dictionnary (name:value) with the properties definition
\end_layout

\begin_layout Standard
One rule of the constructor is to build the connection with these Tango
 objects and to keep them in the instance.
 The Evaluate method will evaluate the constraint and will return true or
 false.
 It receives as input argument a list with the result of a read_attribute
 call executed on all the depending attributes.
 
\end_layout

\begin_layout Standard
Five pool device commands and two attribute allow the management of these
 constraints.
 The commands are 
\series bold
CreateConstraint
\series default
, 
\series bold
DeleteConstraint
\series default
, 
\series bold
EvaluateContraint, GetConstraintClassInfo
\series default
 and 
\series bold
GetConstraint
\series default
.
 The attributes are called 
\series bold
ConstraintList
\series default
 and 
\series bold
ConstraintClassList
\series default
.
 They are all detailed in chapters 
\begin_inset LatexCommand \ref{sub:Device-pool-commands}

\end_inset

 and 
\begin_inset LatexCommand \ref{sub:Device-pool-attributes}

\end_inset

.
 The following is an example of a user constraint
\newline

\end_layout

\begin_layout LyX-Code
1 import PyTango
\end_layout

\begin_layout LyX-Code
2 
\end_layout

\begin_layout LyX-Code
3 class MyConstraint(PoolConstraint):
\end_layout

\begin_layout LyX-Code
4 
\end_layout

\begin_layout LyX-Code
5    depending_attr_list = [{'DefaultValue':"first_mot/position",
\end_layout

\begin_layout LyX-Code
6                            'Description':"X position"},
\end_layout

\begin_layout LyX-Code
7                           {'DefaultValue':"second_mot/position",
\end_layout

\begin_layout LyX-Code
8                            'Description':"Z position"},
\end_layout

\begin_layout LyX-Code
9                           {'DefaultValue':"first_mot/velocity",
\end_layout

\begin_layout LyX-Code
10                           'Description':"X position speed"}]
\end_layout

\begin_layout LyX-Code
11
\end_layout

\begin_layout LyX-Code
11   depending_dev_list = [{'DefaultValue':"first_dev",
\end_layout

\begin_layout LyX-Code
12                          'Description':"Air pressure device"}]
\end_layout

\begin_layout LyX-Code
13
\end_layout

\begin_layout LyX-Code
14   inst_prop = {'MyProp':{'Type':PyTango.DevLong,'Description':'The psi
 constant',
\end_layout

\begin_layout LyX-Code
15                          'DefaultValue',1234}}
\end_layout

\begin_layout LyX-Code
16
\end_layout

\begin_layout LyX-Code
17    def __init__(self,attr_list,dev_list,prop_dict)
\end_layout

\begin_layout LyX-Code
18       self.air_device = PyTango.DeviceProxy(dev_list[0])
\end_layout

\begin_layout LyX-Code
19       self.const = prop_dict["MyProp"]
\end_layout

\begin_layout LyX-Code
20       
\end_layout

\begin_layout LyX-Code
21   def Evaluate(self,att_value):
\end_layout

\begin_layout LyX-Code
22      if att_value[0].value > (xxx * self.const)
\end_layout

\begin_layout LyX-Code
23         return False
\end_layout

\begin_layout LyX-Code
24      elif att_value[1].value > yyy
\end_layout

\begin_layout LyX-Code
25         return False
\end_layout

\begin_layout LyX-Code
26      elif att_value[2].value > zzz
\end_layout

\begin_layout LyX-Code
27         return False
\end_layout

\begin_layout LyX-Code
28      elif self.air_device.state() == PyTango.FAULT
\end_layout

\begin_layout LyX-Code
29         return False
\end_layout

\begin_layout LyX-Code
30      return True
\end_layout

\begin_layout Standard
Line 3 : The class inherits from the PoolConstraint class
\newline
Line 5-10: Definition
 of the depending attributes
\newline
Line 11-12: Definition of the depending devices
\newline
Line
 14-15: Definition of a constraint property
\newline
Line 17-19: The constructor
\newline
Line
 21-30: The Evaluate method
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsection
Archiving motor position
\begin_inset LatexCommand \label{sub:Archiving-motor-position}

\end_inset


\end_layout

\begin_layout Standard
It is not possible to archive motor position using the Tango memorized attribute
 feature because Tango writes the attribute value into the database just
 after it has been set by the user.
 In case of motors which need some time to go to the desired value and which
 from time to time do not go exactly to the desired value (for always possible
 to have position which is a integer number of motor steps), it is more
 suited to store the motor position at the end of the motion.
 To achieve this, the pool has a command (called 
\series bold
ArchieveMotorPosition
\series default
) which will store new motor positions into the database.
 This command will be polled by the classical Tango polling thread in order
 to execute it regularly.
 The algorithm used by this command is the following:
\end_layout

\begin_layout LyX-Code
- Read motors position for all motors which are not actually moving
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
- /FOR/ all motors
\end_layout

\begin_layout LyX-Code
    - /IF/ The new position just read is different than the old one
\end_layout

\begin_layout LyX-Code
       - Mark the motor as storable
\end_layout

\begin_layout LyX-Code
    - /ENDIF/
\end_layout

\begin_layout LyX-Code
- /ENDFOR/
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
- Store in DB position of all storable motors
\end_layout

\begin_layout LyX-Code
- Memorize motors position
\end_layout

\begin_layout Standard
In order to minimize the number of calls done on the Tango database, we
 need to add to the Tango database software the ability to store x properties
 of one attribute of y devices into the database in one call (or may be
 simply the same property of one attribute of several device).
\end_layout

\begin_layout Subsection
Scanning
\end_layout

\begin_layout Standard
To be filled in
\end_layout

\begin_layout Subsection
Experiment management
\end_layout

\begin_layout Standard
To be filled in
\end_layout

\begin_layout Section
The pool device Tango interface
\end_layout

\begin_layout Standard
The pool is implemented as a C++ Tango device server and therefore supports
 a set of commands/attributes.
 It has several attributes to get object (motor, pseudo-motor, controller)
 list.
 These lists are managed as attributes in order to have events on them when
 a new object (motor, controller...) is created/deleted.
\end_layout

\begin_layout Subsection
Device pool commands
\begin_inset LatexCommand \label{sub:Device-pool-commands}

\end_inset


\end_layout

\begin_layout Standard
On top of the three classical Tango commands (State, Status and Init), the
 pool device supports the commands summarized in the following table:
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="31" columns="4">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Device type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Input data type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Output data type
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
CreateController
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevVarStringArray
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DeleteController
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevString
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Controller
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
GetControllerInfo
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevString
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevVarStringArray
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell multicolumn="1" alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
related
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
InitController
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevString
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell multicolumn="1" alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
commands
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ReloadControllerCode
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevString
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell multicolumn="1" alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
SendToController
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevVarStringArray
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevString
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell multicolumn="1" alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Motor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
CreateMotor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevVarLongStringArray
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell multicolumn="1" alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
related commands
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DeleteMotor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevString
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Motor group
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
CreateMotorGroup
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevVarStringArray
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell multicolumn="1" alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
related commands
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DeleteMotorGroup
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevString
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell multicolumn="1" alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
GetPseudoMotorInfo
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevVarStringArray
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevVarStringArray
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell multicolumn="1" alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Pseudo motor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
CreatePseudoMotor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevVarStringArray
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell multicolumn="1" alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
related commands
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DeletePseudoMotor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevString
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell multicolumn="1" alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ReloadPseudoMotorCode
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevString
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell multicolumn="1" alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
GetConstraintClassInfo
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevString
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevVarStringArray
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell multicolumn="1" alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
CreateConstraint
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevVarStringArray
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell multicolumn="1" alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
User Constraint
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DeleteConstraint
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevString
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell multicolumn="1" alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
related
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
EvaluateConstraint
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevString
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevBoolean
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell multicolumn="1" alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
commands
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
GetConstraint
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevString
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevVarLongArray
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell multicolumn="1" alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ReloadConstraintCode
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevString
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell multicolumn="1" alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Experiment Channel
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
CreateExpChannel
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevVarStringArray
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
related commands
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DeleteExpChannel
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevString
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell multicolumn="1" alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Measurement group
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
CreateMeasurementGroup
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevVarStringArray
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell multicolumn="1" alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
related commands
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DeleteMeasurementGroup
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevString
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell multicolumn="1" alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Dyn loaded Tango
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
LoadTangoClass
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell multicolumn="1" alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
class related
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
UnloadTangoClass
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell multicolumn="1" alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
commands
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ReloadTangoClass
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell multicolumn="1" alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Dyn.
 created 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
CreateXXX
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell multicolumn="1" alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
commands
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DeleteXXX
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell multicolumn="1" alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Miscellaneous
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ArchiveMotorPosition
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status open

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
CreateController
\series default
: This command creates a controller object.
 It has four arguments (all strings) which are:
\end_layout

\begin_deeper
\begin_layout Enumerate
The controller device type: Actually three types are supported as device
 type.
 They are:
\end_layout

\begin_deeper
\begin_layout Itemize
"Motor" (case independent) for motor device
\end_layout

\begin_layout Itemize
"CounterTimer" (case independent) for counter timer device
\end_layout

\begin_layout Itemize
"ZeroDExpChannel" (case independent) for zero dimension experiment channel
 device
\end_layout

\end_deeper
\begin_layout Enumerate
Controller code file name: For C++ controller, this is the name of the controlle
r shared library file.
 For Python controller, this is the name of the controller module.
 This parameter is only a file name, not a path.
 The path is automatically taken from the pool device 
\series bold
PooPath
\series default
 property.
 It is not necessary to change your LD_LIBRARY_PATH or PYTHONPATH environment
 variable.
 Everything is taken from the PoolPath property.
\end_layout

\begin_layout Enumerate
Controller class name: This is the name of the class implementing the controller.
 This class has to be implemented within the controller shared library or
 Python module passed as previous argument
\end_layout

\begin_layout Enumerate
Instance name: It is a string which allows the device pool to deal with
 several instance of the same controller class.
 The pool checks that this name is uniq within a control system.
\end_layout

\end_deeper
\begin_layout Standard
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
The list of created controllers is kept in one of the pool device property
 and at next startup time, all controllers will be automatically re-created.
 If you have several pool device within a control system (the same TANGO_HOST),
 it is not possible to have two times the same controller defines on different
 pool device.
 Even if the full controller name is <Controller file name>.<Controller class
 name>/<Instance name>, each created controller has an associated name which
 is
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

\end_layout

\end_inset

<Instance name>
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset

 which has to be used when the controller name is requested.
 This name is case independent.
\end_layout

\begin_layout Itemize

\series bold
DeleteController
\series default
: This command has only one input argument which is the controller name
 (as defined previously).
 It is not possible to delete a controller with attached device(s).
 You first have to delete controller's device(s).
 
\end_layout

\begin_layout Itemize

\series bold
InitController
\series default
: This command is used to (re)-initialize a controller if the controller
 initialization done at pool startup time has failed.
 At startup time, the device pool creates controller devices even if the
 controller initialization has failed.
 All controller devices are set to the FAULT state.
 This command will try to re-create the controller object and if successful,
 send an "Init" command to every controller devices.
 Its input argument is the controller name.
\end_layout

\begin_layout Itemize

\series bold
GetControllerInfo
\series default
: This command has three or four input parameters which are:
\begin_inset LatexCommand \label{ite:GetControllerInfo:}

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
The controller device type
\end_layout

\begin_layout Enumerate
The controller code file name: For C++ controller, this is the name of the
 controller shared library file.
 For Python controller, this is the name of the controller module.
 This parameter is only a file name, not a path.
 The path is automatically taken from the pool device 
\series bold
PooPath
\series default
 property.
\end_layout

\begin_layout Enumerate
The controller class name: This is the name of the class implementing the
 controller.
 This class has to be implemented within the controller shared library or
 Python module passed as previous argument
\end_layout

\begin_layout Enumerate
The controller instance name: This parameter is optional.
 If you do not specify it, the command will return information concerning
 controller properties as defined at the class level.
 If you defined it, the command will return information concerning controller
 properties for this specific controller instance.
\end_layout

\end_deeper
\begin_layout Standard
It returns to the caller all the informations related to controller properties
 as defined in the controller code and/or in the Tango database.
 The following format is used to return these informations:
\end_layout

\begin_layout Enumerate
The string describing the controller (or an empty string if not defined)
\end_layout

\begin_layout Enumerate
Number of controller properties
\end_layout

\begin_layout Enumerate
For each property:
\end_layout

\begin_deeper
\begin_layout Enumerate
The property name
\end_layout

\begin_layout Enumerate
The property data type
\end_layout

\begin_layout Enumerate
The property description
\end_layout

\begin_layout Enumerate
The property default value (Empty string if not defined)
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
ReloadControllerCode
\series default
: The controller code is contains in a shared library dynamically loaded
 or in a Python module.
 The aim of this command is to unlink the pool to the shared library and
 to reload it (or Reload the Python module).
 The command argument is a string which is the controller file name as defined
 for the CreateController command.
 For motor controller, it is not possible to do this command if one of the
 motor attached to controller(s) using the code within the file is actually
 moving.
 All motor(s) attached to every controller(s) using this file is switched
 to FAULT state during this command execution.
 Once the code is reloaded, an "Init" command is sent to every controller
 devices.
\end_layout

\begin_layout Itemize

\series bold
SendToController
\series default
: Send data to a controller.
 The first element of the input argument array is the controller name.
 The second one is the string to be sent to the controller.
 This command returns the controller answer or an empty string is the controller
 does not have answer.
\end_layout

\begin_layout Itemize

\series bold
CreateMotor
\series default
: This command creates a new motor.
 It has three arguments which are:
\end_layout

\begin_deeper
\begin_layout Enumerate
The motor name (a string).
 This is a Tango device alias.
 It is not allowed to have '/' character within this name.
 It is a case independent name.
\end_layout

\begin_layout Enumerate
The motor controller name (a string)
\end_layout

\begin_layout Enumerate
The axe number within the controller
\end_layout

\end_deeper
\begin_layout Standard
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
The motor is created as a Tango device and automatically registered in the
 database.
 At next startup time, all motors will be automatically re-created.
 A Tango name is assigned to every motor.
 This name is a Tango device name (3 fields) and follow the syntax 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset

motor/controller_instance_name/axe_number
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset

 in lower case letters.
\end_layout

\begin_layout Itemize

\series bold
DeleteMotor
\series default
: This command has only one argument which is the motor name as given in
 the first argument of the CreateMotor command.
 The device is automatically unregistered from the Tango database and is
 not accessible any more even for client already connected to it.
\end_layout

\begin_layout Itemize

\series bold
CreateMotorGroup
\series default
: This command creates a new motor group.
 It has N arguments which are:
\end_layout

\begin_deeper
\begin_layout Enumerate
The motor group name (a string).
 This is a Tango device alias.
 It is not allowed to have '/' character within this name.
 It is a case independent name.
\end_layout

\begin_layout Enumerate
The list of motor element of the group (motor name or another group name
 or pseudo-motor name)
\end_layout

\end_deeper
\begin_layout Standard
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
The motor group is created as a Tango device and automatically registered
 in the database.
 At next startup time, all motor groups will be automatically re-created.
 A Tango name is assigned to every motor group.
 This name is a Tango device name (3 fields) and follow the syntax 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset

mg/ds_instance_name/motor_group_name
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset

 in lower case letters.
\end_layout

\begin_layout Itemize

\series bold
DeleteMotorGroup
\series default
: This command has only one argument which is the motor group name as given
 in the first argument of the CreateMotorGroup command.
 The device is automatically unregistered from the Tango database and is
 not accessible any more even for client already connected to it.
 This command is not allowed if another motor group is using the motor group
 to be deleted.
\end_layout

\begin_layout Itemize

\series bold
GetPseudoMotorInfo
\series default
:
\begin_inset LatexCommand \label{sub:GetPseudoMotorClassInfo}

\end_inset

: This command has one input argument (a string):
\end_layout

\begin_deeper
\begin_layout Description
<module_name>.<class_name>
\end_layout

\begin_layout Standard
The command returns a list of strings representing the pseudo motor system
 information with the following meaning:
\end_layout

\begin_layout Standard
pseudo_info[0] - textual description of the pseudo motor class.
\end_layout

\begin_layout Standard
pseudo_info[1] - (=M) the number of motors required by this pseudo motor
 class.
\end_layout

\begin_layout Standard
pseudo_info[2] - (=N) the number of pseudo motors that the pseudo motor
 system aggregates.
\end_layout

\begin_layout Standard
pseudo_info[3] - the number of parameters required by the pseudo motor system.
\end_layout

\begin_layout Standard
pseudo_info[4..N+4] - the textual description of the roles of the N motors.
\end_layout

\begin_layout Standard
pseudo_info[N+5..N+M+5] - the textual description of the roles of the M pseudo
 motors.
\end_layout

\begin_layout Standard
pseudo_info[N+M+6..N+M+P+6] - the textual description of the P parameters.
\end_layout

\end_deeper
\begin_layout Standard

\series bold
example
\series default
: 
\end_layout

\begin_layout LyX-Code
GetPseudoMotorInfo('PseudoLib.Slit') 
\end_layout

\begin_deeper
\begin_layout Standard
could have as a return:
\end_layout

\end_deeper
\begin_layout LyX-Code
["
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
A Slit system for controlling gap and offset pseudo motors.
\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
",
\end_layout

\begin_layout LyX-Code
"2",
\end_layout

\begin_layout LyX-Code
"2",
\end_layout

\begin_layout LyX-Code
"0",
\end_layout

\begin_layout LyX-Code
"Motor on blade 1",
\end_layout

\begin_layout LyX-Code
"Motor on blade 2",
\end_layout

\begin_layout LyX-Code
"Gap",
\end_layout

\begin_layout LyX-Code
"Offset"]
\end_layout

\begin_layout Itemize

\series bold
CreatePseudoMotor
\series default
:This command has a variable number of input arguments (all strings):
\end_layout

\begin_deeper
\begin_layout Enumerate
the python file which contains the pseudo motor python code.
\end_layout

\begin_layout Enumerate
the class name representing the pseudo motor system.
\end_layout

\begin_layout Enumerate
the N pseudo motor names.
 These will be the pseudo motor alias for the corresponding pseudo motor
 tango devices.
\end_layout

\begin_layout Enumerate
the M motor names.
 These names are the existing tango motor alias.
\end_layout

\begin_layout Standard
N and M must conform to the class name information.
 See 
\begin_inset LatexCommand \ref{sub:GetPseudoMotorClassInfo}

\end_inset

 to find how to get class information.
\end_layout

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
For each given pseudo motor name a Tango pseudo motor device is created
 and automatically registered in the database.
 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default
At next startup time, all pseudo motors will be automatically re-created.
 A Tango name is assigned to every pseudo motor.
 This name is a Tango device name (3 fields) and follow the syntax 
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset


\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
pm/python_module_name.class_name/pseudo_motor_name
\family default
\series default
\shape default
\size default
\emph default
\bar default
\noun default

\begin_inset ERT
status open

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
For each Tango pseudo motor device the device pool will also create a correspond
ing alias named pseudo_motor_name.
\end_layout

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
If a motor group Tango device with the given motor names doesn't exist then
 the device pool will also create a motor group with the following name:
\end_layout

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
mg/tango_device_server_instance_name/_pm_<internal motor group number>
\end_layout

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
This motor group is built for internal Pool usage.
 It is not intended that the pseudo motor is accessed directly through this
 motor group.
 However, if needed elsewhere, it can be accessed as the usual motor group
 without any special restrictions.
\end_layout

\end_deeper
\begin_layout Standard

\series bold
example:
\end_layout

\begin_layout Standard
CreatePseudoMotor('PseudoLib.py','Slit','gap01','offset01','blade01','blade02')
\end_layout

\begin_layout Itemize

\series bold
DeletePseudoMotor
\series default
: This command has only one argument which is the pseudo motor identifier.
 The device is automatically unregistered from the Tango database and is
 not accessible any more even for client already connected to it.
 This command is not allowed if a motor group is using the pseudo motor
 to be deleted.
\end_layout

\begin_layout Itemize

\series bold
ReloadPseudoMotorCode
\series default
:The calculation code is contains in a dynamically loaded Python module.
 The aim of this command is to reload the Python module.
 The command argument is a string which is the python module as defined
 for the CreatePseudoMotor and GetPseudoMotorInfo commands.
 It is not possible to do this command if one of the motor attached to pseudo
 motor system(s) using code within the file is actually moving.
 All pseudo motor(s) using this file are switched to FAULT state during
 this command execution.
\end_layout

\begin_layout Itemize

\series bold
CreateExpChannel
\series default
: This command creates a new experiment channel.
 It has three arguments which are:
\end_layout

\begin_deeper
\begin_layout Enumerate
The experiment channel name (a string).
 This is a Tango device alias.
 It is not allowed to have '/' character within this name.
 It is a case independent name.
\end_layout

\begin_layout Enumerate
The experiment channel controller name (a string)
\end_layout

\begin_layout Enumerate
The index number within the controller
\end_layout

\end_deeper
\begin_layout Standard
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
The experiment channel is created as a Tango device and automatically registered
 in the database.
 At next startup time, all created experiment channels will be automatically
 re-created.
 A Tango name is assigned to every experiment channel.
 This name is a Tango device name (3 fields) and follow the syntax 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset

expchan/controller_instance_name/index_number
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset

 in lower case letters.
 The precise type of the experiment channel (Counter/Timer, ZeroD, OneD...)
 is retrieved by the pool device from the controller given as command second
 parameter.
\end_layout

\begin_layout Itemize

\series bold
DeleteExpChannel
\series default
: This command has only one argument which is the experiment channel name
 as given in the first argument of the CreateExpChannel command.
 The device is automatically unregistered from the Tango database and is
 not accessible any more even for client already connected to it.
\end_layout

\begin_layout Itemize

\series bold
GetConstraintClassInfo
\series default
: This command has one input parameter (a string) which is the constraint
 class name.
 It returns to the caller all the information related to constraint dependencies
 and to constraint properties as defined in the constraint code.
 The following format is used to return properties:
\end_layout

\begin_deeper
\begin_layout Itemize
Depending attributes number
\end_layout

\begin_deeper
\begin_layout Itemize
Depending attribute name
\end_layout

\begin_layout Itemize
Depending attribute description
\end_layout

\end_deeper
\begin_layout Itemize
Depending devices number
\end_layout

\begin_deeper
\begin_layout Itemize
Depending device name
\end_layout

\begin_layout Itemize
Depending device description
\end_layout

\end_deeper
\begin_layout Itemize
Class property number
\end_layout

\begin_deeper
\begin_layout Itemize
Class property name
\end_layout

\begin_layout Itemize
Class property description
\end_layout

\begin_layout Itemize
Class property default value (Set to "NotDef" if not defined)
\end_layout

\end_deeper
\begin_layout Itemize
Instance property number
\end_layout

\begin_deeper
\begin_layout Itemize
Instance property name
\end_layout

\begin_layout Itemize
Instance property description
\end_layout

\begin_layout Itemize
Instance property default value (Set to "NotDef" if not defined)
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize

\series bold
CreateMeasurementGroup
\series default
: This command creates a new measurement group.
 It has N arguments which are:
\end_layout

\begin_deeper
\begin_layout Enumerate
The measurement group name (a string).
 This is a Tango device alias.
 It is not allowed to have '/' character within this name.
 It is a case independent name.
\end_layout

\begin_layout Enumerate
The list of channel elements of the group (Counter/Timer, 0D, 1D or 2D experimen
t channel)
\end_layout

\end_deeper
\begin_layout Standard
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
The measurement group is created as a Tango device and automatically registered
 in the database.
 At next startup time, all measurement groups will be automatically re-created.
 A Tango name is assigned to every measurement group.
 This name is a Tango device name (3 fields) and follow the syntax 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset

mntgrp/ds_instance_name/measurement_group_name
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset

 in lower case letters.
\end_layout

\begin_layout Itemize

\series bold
DeleteMeasurementGroup
\series default
: This command has only one argument which is the measurement group name
 as given in the first argument of the CreateMeasurementGroup command.
 The device is automatically unregistered from the Tango database and is
 not accessible any more even for client already connected to it.
\end_layout

\begin_layout Itemize

\series bold
AddConstraint
\series default
: This command creates a user constraint object.
 It has several arguments (all strings) which are:
\end_layout

\begin_deeper
\begin_layout Enumerate
Constraint code file name: The name of the constraint module.
 This parameter is only a file name, not a path.
 The path is automatically taken from the pool PooPath property.
 
\end_layout

\begin_layout Enumerate
Constraint class name: This is the name of the class implementing the controller.
 This class has to be implemented within the controller shared library or
 Python module passed as previous argument
\end_layout

\begin_layout Enumerate
Instance name: It is a string which allows the device pool to deal with
 several instance of the same controller class.
\end_layout

\begin_layout Enumerate
The object to which the constraint belongs.
 It has to be a writable attribute name (actually only a motor position)
\end_layout

\begin_layout Enumerate
The list of depending objects.
 (Variable length list which may be empty)
\end_layout

\end_deeper
\begin_layout Standard
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
\InsetSpace ~
The list of created constraints is kept in one of the pool device property
 and at next startup time, all constraints will be automatically re-created.
 It is possible to create several constraint on the same object.
 They will be executed in the order of their creation.
 Each created constraint has a associated name which is
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

\end_layout

\end_inset

<Constraint class name>/<Instance name>
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
DeleteConstraint
\series default
: This command has only one argument which is the constraint name as define
 previously.
\end_layout

\begin_layout Itemize

\series bold
EvaluateConstraint
\series default
: This command has only one argument which is the constraint name.
 It runs the "evaluate" method of the constraint and sends the return value
 to the caller
\end_layout

\begin_layout Itemize

\series bold
GetConstraint
\series default
: The input parameter of this command is the name of a Tango object.
 Actually, it has to be the name of one of the motor Position attribute.
 The command returns the list of Constraint ID attached to this object.
\end_layout

\begin_layout Itemize

\series bold
ReloadConstraintCode
\series default
: The constraint code is contains in a Python module.
 The aim of this command is to reload the Python module.
 The command argument is a string which is the constraint file name as defined
 for theAddConstraint command.
 All object(s) using this constraint are switched to FAULT state during
 this command execution.
\end_layout

\begin_layout Itemize

\series bold
LoadTangoClass
\series default
:
\end_layout

\begin_layout Itemize

\series bold
UnloadTangoClass
\series default
:
\end_layout

\begin_layout Itemize

\series bold
ReloadTangoClass
\series default
:
\end_layout

\begin_layout Itemize

\series bold
CreateXXX
\series default
:
\end_layout

\begin_layout Itemize

\series bold
DeleteXXX:
\end_layout

\begin_layout Itemize

\series bold
ArchiveMotorPosition
\series default
: Send new motor(s) position to the database.
 This command will be polled with a default polling period of 10 seconds.
\end_layout

\begin_layout Standard
The classical Tango 
\series bold
Init
\series default
 command destroys all constructed controller(s) and re-create them reloading
 their code.
 Then, it sends an "Init" command to every controlled objects (motor, pseudo-mot
or and motor group) belonging to the pool device.
 Motor(s) are switched to FAULT state when controller are destroyed.
\end_layout

\begin_layout Standard
The pool device knows only two states which are ON and ALARM.
 The pool device is in ALARM state if one of its controller failed during
 its initialization phase.
 It is in ON state when all controllers are correctly constructed.
 In case the pool device in in ALARM state, its status indicates which controlle
r is faulty.
\end_layout

\begin_layout Subsection
Device pool attributes
\begin_inset LatexCommand \label{sub:Device-pool-attributes}

\end_inset


\end_layout

\begin_layout Standard
The device pool supports the following attributes:
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="13" columns="4">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Data type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Data format
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Writable
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ControllerList
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevString
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Spectrum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ControllerClassList
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevString
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Spectrum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
MotorList
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevString
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Spectrum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
MotorGroupList
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevString
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Spectrum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
PseudoMotorList
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevString
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Spectrum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
PseudoMotorClassList
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevString
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Spectrum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ExpChannelList
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevString
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Spectrum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
MeasurementGroupList
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevString
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Spectrum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ConstraintList
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevString
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Spectrum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ConstraintClassList
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevString
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Spectrum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
SimulationMode
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevBoolean
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Scalar
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R/W
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
XXXList
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Tango::DevString
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Spectrum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
R
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status open

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
ControllerList
\series default
: This is a read only spectrum string attribute.
 Each spectrum element is the name of one controller following the syntax
 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset

<instance_name> - <Ctrl file>.<controller_class_name/instance_name> - <Device
 type> <Controller language> Ctrl (<Ctrl file>)
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
ControllerClassList
\series default
: This is a read only spectrum string attribute.
 Each spectrum element is the name of one of the available controller class
 that the user can create.
 To build this list, the pool device server is using a property called 
\series bold
PoolPath
\series default
 which defines the path where all files containing controller code should
 be (Python and C++ controllers).
 The syntax used for this PoolPath property is similar to the syntax used
 for Unix PATH environment variable (list of absolute path separated by
 the ":" character).
 Each returned string has the following syntax:
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset

Type: <Ctrl dev type> - Class: <Ctrl class name> - File: <Abs ctrl file
 path>
\begin_inset ERT
status open

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
MotorList
\series default
: This is a read only spectrum string attribute.
 Each spectrum element is the name of one motor known by this pool.
 The syntax is 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset

<Motor name> (<Motor tango name>)
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
MotorGroupList
\series default
: This is a read only spectrum string attribute.
 Each spectrum element is the name of one motor group known by this pool.
 The syntax is 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset

<Motor group name> (<Motor group tango name>) Motor list: <List of group
 members> (<List of physical motors in the group>)
\begin_inset ERT
status open

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset

 The last information is displayed only if the physical group structure
 differs from the logical one (pseudo-motor or other group used as group
 member)
\end_layout

\begin_layout Itemize

\series bold
PseudoMotorList
\series default
:This is a read only spectrum string attribute.
 Each spectrum element is the name of one motor known by this pool.
 The syntax is 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset

<pseudo motor name> (<pseudo motor tango name>) Motor List: <motor name>1,...,<moto
r name>M
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
ExpChannelList
\series default
: This is a read only spectrum string attribute.
 Each spectrum element is the name of one experiment channel known by this
 pool.
 The syntax is 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset

<Exp Channel name> (<Channel tango name>) <Experiment channel type>
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset

 The string describing the experiment channel type may be:
\end_layout

\begin_deeper
\begin_layout Itemize
Counter/Timer Experiment Channel
\end_layout

\begin_layout Itemize
Zero D Experiment Channel
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
MeasurementGroupList
\series default
: This is a read only spectrum string attribute.
 Each spectrum element is the name of one measurement group known by the
 pool.
 The syntax is 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset

<Measurement group name> (<Measurement group tango name>) Experiment Channel
 list: <List of group members>
\begin_inset ERT
status open

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
PseudoMotorClassList
\series default
:This is a read only spectrum string attribute.
 Each spectrum element is the name of a valid Pseudo python system class.
 The syntax is 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset

<python module name>.<python class name>
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset

.
 The python files to be found depend on the current value of the pool path.
 See 
\begin_inset LatexCommand \ref{sub:PoolPath}

\end_inset


\end_layout

\begin_layout Itemize

\series bold
ConstraintClassList
\series default
: This is a read only spectrum string attribute.
 Each spectrum element is the name of one of the available constraint class
 that the user can create.
 To build this list, the pool device server is using a property called 
\series bold
PoolPath
\series default
 which defines the path where all files containing constraint code should
 be.
 The syntax used for this property is similar to the syntax used for Unix
 PATH environment variable (list of absolute path separated by the ":" character
).
 To find constraint classes, the pool will look into all Python files (those
 with a .py suffix) for classes definition which inherit from a base class
 called 
\series bold
PoolConstraint
\series default
.
\end_layout

\begin_layout Itemize

\series bold
ConstraintList
\series default
: This is a read only spectrum string attribute.
 each spectrum element is one of the constraint actually registered in the
 pool.
 The syntax of each string is
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset

<Constraint class name/instance name> - <associated to> - <depending on
 attribute(s) - <depending on device(s)>
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
SimulationMode
\series default
: This is a read-write scalar boolean attribute.
 If set to true, all the pool device(s) are switched to Simulation mode.
 This means that all commands received by pool device(s) will not be forwarded
 to the associated controllers.
\end_layout

\begin_layout Itemize

\series bold
XXXList
\series default
:
\end_layout

\begin_layout Subsection
Device pool property
\end_layout

\begin_layout Standard
The pool device supports the following property:
\begin_inset ERT
status open

\begin_layout Standard


\backslash
begin{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Property name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Property data type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Default value
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
PoolPath
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DefaultMotPos_AbsChange
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Double
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
5
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DefaultMotGrpPos_AbsChange
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Double
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
5
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DefaultCtVal_AbsChange
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Double
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
5
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DefaultZeroDVal_AbsChange
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Double
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
5
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DefaultCtGrpVal_AbsChange
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Double
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
5
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
DefaultZeroDGrpVal_AbsChange
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Double
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
5
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
GhostGroup_PollingPeriod
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
5000
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
MotThreadLoop_SleepTime
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Long
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
10
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
NbStatePerRead
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Long
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
10
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ZeroDNbReadPerEvent
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Long
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
5
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status open

\begin_layout Standard


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\series bold
PoolPath
\series default
:
\begin_inset LatexCommand \label{sub:PoolPath}

\end_inset

 The path (same syntax than the Unix PATH environment variable) where the
 pool software is able to locate Controller software, Pseudo-motor software
 or Constraint software for both Python or C++ languages
\end_layout

\begin_layout Itemize

\series bold
DefaultMotPos_AbsChange
\series default
: The default value used to trigger change event when the position attribute
 is changing (the associated motor is moving).
 This property has a hard-coded default value set to 5
\end_layout

\begin_layout Itemize

\series bold
DefaultMotGrpPos_AbsChange
\series default
: The default value used to trigger change event when the group device position
 attribute is changing.
 This property has a hard-coded default value set to 5
\end_layout

\begin_layout Itemize

\series bold
DefaultCtVal_AbsChange
\series default
: The default value used to trigger change event when the counter/timer
 attribute is changing (the counter is counting or the timer is timing).
 This property has a hard-coded default value set to 5
\end_layout

\begin_layout Itemize

\series bold
DefaultZeroDVal_AbsChange
\series default
: The default value used to trigger change event when the Zero Dimension
 Experiment Channel is acquiring data.
 This property has a hard-coded default value set to 5
\end_layout

\begin_layout Itemize

\series bold
DefaultCtGrpVal_AbsChange
\series default
: The default value used to trigger change event when the counter/timer
 attribute(s) of a measurement group is(are) changing (the counter is counting
 or the timer is timing).
 This property has a hard-coded default value set to 5
\end_layout

\begin_layout Itemize

\series bold
DefaultZeroDGrpVal_AbsChange
\series default
: The default value used to trigger change event when the Zero Dimension
 Experiment Channel(s) of a measurement group is(are) acquiring data.
 This property has a hard-coded default value set to 5
\end_layout

\begin_layout Itemize

\series bold
GhostGroup_PollingPeriod
\series default
: The ghost motor/measurement group polling period in mS.
 This property has a default value of 5000 (5 sec)
\end_layout

\begin_layout Itemize

\series bold
MotThreadLoop_SleepTime
\series default
: The time (in mS) during which the motion thread will sleep between two
 consecutive motor state request.
 The default value is 10
\end_layout

\begin_layout Itemize

\series bold
NbStatePerRead
\series default
: The number of motor state request between each position attribute reading
 done by the motion thread.
 The default value is 10.
 This means that during a motion, the motor position is read by the thread
 every 100 mS (10 * 10)
\end_layout

\begin_layout Itemize

\series bold
ZeroDNbReadPerEvent
\series default
: The number of times the Zero D Experiment Channel value is read by the
 acquisition thread between firing a change event.
 The event will be effectively fired to the interested clients according
 to the CumulatedValue attribute "Absolute Change" property value.
\end_layout

\begin_layout Itemize

\series bold
Controller
\series default
: An internally managed property which allow the pool device to remember
 which controller has been created.
\end_layout

\begin_layout Section
Creating device
\end_layout

\begin_layout Standard
This chapter gives details on what has to be done to create device using
 the device pool in order to check the work to be done by a Sardana configuratio
n tool.
\end_layout

\begin_layout Subsection
Creating motor
\end_layout

\begin_layout Standard
The following is the action list which has to be done when you want to create
 a new motor:
\end_layout

\begin_layout Enumerate
Display the list of all the controller the pool already has.
\end_layout

\begin_layout Enumerate
Select one of this controller
\end_layout

\begin_layout Enumerate
If the user selects a new controller
\end_layout

\begin_deeper
\begin_layout Enumerate
Read the attribute ControllerClassList to get the list of Controller installed
 in your system
\end_layout

\begin_layout Enumerate
Select one of the controller class
\end_layout

\begin_layout Enumerate
With the GetControllerInfo command, get the list of controller properties
\end_layout

\begin_layout Enumerate
Give a controller instance name
\end_layout

\begin_layout Enumerate
Display and eventually change the controller properties (if any)
\end_layout

\begin_layout Enumerate
Create the controller object using the CreateController pool command
\end_layout

\end_deeper
\begin_layout Enumerate
Give a motor name and a motor axis number in the selected controller
\end_layout

\begin_layout Enumerate
Create the motor with the CreateMotor pool command
\end_layout

\begin_layout Enumerate
Read the attribute list of the newly created motor
\end_layout

\begin_layout Enumerate
Display and eventually change the motor attributes related to motor features
 and eventually to extra-features
\end_layout

\begin_layout Subsection
Creating motor group
\end_layout

\begin_layout Standard
The following is the action list which has to be done when creating a motor
 group
\end_layout

\begin_layout Enumerate
Give a name to the motor group
\end_layout

\begin_layout Enumerate
Display the list of all registered motors (attribute MotorList), all registered
 motor groups (attribute MotorGroupList), all registered pseudo motors (attribut
e PseudoMotorList) and select those which have to be member of the group.
\end_layout

\begin_layout Enumerate
Create the group (command CreateMotorGroup)
\end_layout

\begin_layout Subsection
Creating a pseudo motor system
\end_layout

\begin_layout Standard
The following is the action list which has to be done when you want to create
 a new pseudo motor:
\end_layout

\begin_layout Enumerate
Display the list of all available pseudo motor system classes and select
 one of them
\end_layout

\begin_deeper
\begin_layout Enumerate
if there is no proper pseudo system class write one in Python
\end_layout

\begin_layout Enumerate
update the PoolPath Pool property if necessary
\end_layout

\end_deeper
\begin_layout Enumerate
Get the selected pseudo motor system class information
\end_layout

\begin_layout Enumerate
Give names to the pseudo motors involved in the selected pseudo motor system
\end_layout

\begin_layout Enumerate
Create the motor(s) which are involved (if they have are not created yet:
 See 
\begin_inset LatexCommand \ref{sub:Creating-motor}

\end_inset

) and assign the coresponding roles
\end_layout

\begin_layout Enumerate
Create the pseudo motor system (command CreatePseudoMotor)
\end_layout

\begin_layout Subsection
Creating a user constraint
\end_layout

\begin_layout Standard
The following is the action list which has to be done when you want to create
 a new user constraint:
\end_layout

\begin_layout Enumerate
Display the list of all the constraint the pool already has.
\end_layout

\begin_layout Enumerate
Select one of this constraint
\end_layout

\begin_layout Enumerate
If the user selects a new constraint
\end_layout

\begin_deeper
\begin_layout Enumerate
Read the attribute ConstraintClassList to get the list of Constraint installed
 in your system
\end_layout

\begin_layout Enumerate
Select one of the constraint class
\end_layout

\begin_layout Enumerate
With the GetConstraintClassInfo command, get the list of constraint dependencies
 and properties
\end_layout

\begin_layout Enumerate
Give a constraint instance name
\end_layout

\begin_layout Enumerate
If it is the first constraint of this class
\end_layout

\begin_deeper
\begin_layout Enumerate
Display and eventually change the constraint class properties (if any)
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
Display and eventually change the constraint depending attribute (if any)
\end_layout

\begin_layout Enumerate
Display and eventually change the constraint depending device (if any)
\end_layout

\begin_layout Enumerate
Display and eventually change the constraint instance properties (if any)
\end_layout

\begin_layout Enumerate
Create the constraint object using the CreateConstraint pool command
\end_layout

\begin_layout Section
Some words on internal implementation
\end_layout

\begin_layout Standard
This chapter gives some details on some part of the pool implementation
 in order to clarify reader ideas
\end_layout

\begin_layout Subsection
Moving motor
\end_layout

\begin_layout Standard
Moving a motor means writing its Position attribute.
 In Tango, it is already splitted in two actions which are:
\end_layout

\begin_layout Enumerate
Call a Motor class method called "is_allowed"
\end_layout

\begin_layout Enumerate
Call a Motor class method called "write_Position"
\end_layout

\begin_layout Standard
The second method will be executed only if the first one returns true.
 The move order is sent to the motor (via the controller) in the code of
 the second method.
\end_layout

\begin_layout Subsubsection
The is_allowed method
\end_layout

\begin_layout Standard
The code implemented in this method follow the algorithm:
\end_layout

\begin_layout LyX-Code
- /IF/ There are any Pseudo Motor using the motor
\end_layout

\begin_layout LyX-Code
   - /FOR/ All these Pseudo Motors
\end_layout

\begin_layout LyX-Code
      - /IF/ They have some limits defined
\end_layout

\begin_layout LyX-Code
         - Compute new Pseudo Motor position if motor moved to the desired
 value
\end_layout

\begin_layout LyX-Code
         - /IF/ The computed value is outside the authorized window
\end_layout

\begin_layout LyX-Code
             - Return False
\end_layout

\begin_layout LyX-Code
         - /ENDIF/
\end_layout

\begin_layout LyX-Code
      - /ENDIF/
\end_layout

\begin_layout LyX-Code
   - /ENDFOR/
\end_layout

\begin_layout LyX-Code
- /ENDIF/
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
- /IF/ There are some user constraint attached to the motor
\end_layout

\begin_layout LyX-Code
  - /FOR/ Each user constraint
\end_layout

\begin_layout LyX-Code
      - /IF/ The constraint has some depending attribute(s)
\end_layout

\begin_layout LyX-Code
         - Read these attributes
\end_layout

\begin_layout LyX-Code
      - /ENDIF/
\end_layout

\begin_layout LyX-Code
      - /IF/ If the execution of the contraint "Evaluate" method returns
 False
\end_layout

\begin_layout LyX-Code
         - Return False
\end_layout

\begin_layout LyX-Code
      - /ENDIF/
\end_layout

\begin_layout LyX-Code
  - /ENDFOR/
\end_layout

\begin_layout LyX-Code
- /ENDIF/
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
- Return True
\end_layout

\begin_layout Subsubsection
The write_Position method
\end_layout

\begin_layout Standard
The code implemented in this method follows the algorithm:
\end_layout

\begin_layout LyX-Code
- Compute the dial position from the user position
\end_layout

\begin_layout LyX-Code
- /IF/ A backlash is defined for this motor and the controller does not
 manage it
\end_layout

\begin_layout LyX-Code
    - Update motor desired position according to motion direction and backlash
 value
\end_layout

\begin_layout LyX-Code
- /ENDIF/
\end_layout

\begin_layout LyX-Code
- Start a thread sending it which motor has to move to which position
\end_layout

\begin_layout LyX-Code
- Wait for thread acknowledge
\end_layout

\begin_layout LyX-Code
- Return to caller
\end_layout

\begin_layout Standard
The motion thread will execute the following algorithm:
\end_layout

\begin_layout LyX-Code
- /FOR/ Each controller(s) implied in the motion
\end_layout

\begin_layout LyX-Code
     - Lock the controller object
\end_layout

\begin_layout LyX-Code
     - Call PreStartAll()
\end_layout

\begin_layout LyX-Code
- /ENDFOR/
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
- /FOR/ Each motor(s) implied in the motion
\end_layout

\begin_layout LyX-Code
     - ret = PreStartOne(motor to move, new position)
\end_layout

\begin_layout LyX-Code
     - /IF/ ret is true
\end_layout

\begin_layout LyX-Code
          - Call StartOne(motor to move, new position)
\end_layout

\begin_layout LyX-Code
     - /ELSE/
\end_layout

\begin_layout LyX-Code
          - Inform write_Position that an error occurs
\end_layout

\begin_layout LyX-Code
          - Send acknowledge to write_Position method 
\end_layout

\begin_layout LyX-Code
     - /ENDIF/
\end_layout

\begin_layout LyX-Code
- /ENDFOR/
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
- /FOR/ Each motor(s) implied in the motion
\end_layout

\begin_layout LyX-Code
     - Set motor state to MOVING and send a Tango event to the requesting
 client
\end_layout

\begin_layout LyX-Code
- /ENDFOR/
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
- /FOR/ Each controller(s) implied in the motion
\end_layout

\begin_layout LyX-Code
     - Call StartAll()
\end_layout

\begin_layout LyX-Code
     - Unlock the controller object
\end_layout

\begin_layout LyX-Code
- /ENDFOR/
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
- Send acknowledge to the write_Position method
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
- /WHILE/ One of the motor state is MOVING (From controller)
\end_layout

\begin_layout LyX-Code
     - Sleep for 10 mS
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
     - /IF/ One of the motor implied in the motion is not moving any more
\end_layout

\begin_layout LyX-Code
        - /IF/ This motor has backlash and the motion is in the "wrong"
 direction
\end_layout

\begin_layout LyX-Code
            - Ask for a backlash motion in the other direction
\end_layout

\begin_layout LyX-Code
              (Easy to write, not as easy to do...)
\end_layout

\begin_layout LyX-Code
        - /ENDIF/
\end_layout

\begin_layout LyX-Code
        - Send a Tango event on the state attribute to the requesting client
\end_layout

\begin_layout LyX-Code
        - Leave the loop
\end_layout

\begin_layout LyX-Code
     - /ENDIF/
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
     - /IF/ it is time to read the motor position
\end_layout

\begin_layout LyX-Code
        - Read the motor position
\end_layout

\begin_layout LyX-Code
        - Send a change event on the Position attribute to the requested
 client if
\end_layout

\begin_layout LyX-Code
          the change event criterion is true
\end_layout

\begin_layout LyX-Code
     - /ENDIF/
\end_layout

\begin_layout LyX-Code
- /ENDWHILE/
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
- Sleep for the time defined by the motor (group) Sleep_bef_last_read property
\end_layout

\begin_layout LyX-Code
- Read the motor position
\end_layout

\begin_layout LyX-Code
- Send a forced change event on the Position attribute to the requesting
 client
\end_layout

\begin_layout LyX-Code
  with the value set to the one just read
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsection
Data acquisition
\end_layout

\begin_layout Standard
Data aquisition is triggered by invoking a Start command on the measurement
 group.
 The code implemented implements the following algorithm.
 
\end_layout

\begin_layout LyX-Code
/IF/ in timer mode
\end_layout

\begin_layout LyX-Code
    - Write CumulationTime on all 0D channels with Integration_time value
\end_layout

\begin_layout LyX-Code
/ELIF/ in monitor mode
\end_layout

\begin_layout LyX-Code
    - Write CumulationTime on all 0D channels with 0(zero) value
\end_layout

\begin_layout LyX-Code
/ENDIF/
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
/FOR/ Each 0D channel implied in the data aquisition
\end_layout

\begin_layout LyX-Code
    - Load configuration 
\end_layout

\begin_layout LyX-Code
/END FOR/
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
- Start a CounterTimer thread with channels involved, master channel and
 the proper value to be set on it
\end_layout

\begin_layout LyX-Code
- Wait for CounterTimer thread acknowledge
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
/FOR/ Each 0D channel implied in the data aquisition
\end_layout

\begin_layout LyX-Code
    - Send Start command 
\end_layout

\begin_layout LyX-Code
/END FOR/
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
- Return to caller
\end_layout

\begin_layout Standard
The Counter/Timer thread will execute the following algorithm:
\end_layout

\begin_layout LyX-Code
- Calculate the list of controllers involved and determine which controller
 has the master channel
\end_layout

\begin_layout LyX-Code
/FOR/ Each channel(s) implied in the data aquisition
\end_layout

\begin_layout LyX-Code
    - Lock the channel object
\end_layout

\begin_layout LyX-Code
/END FOR/
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
/FOR/ Each controller(s) implied in the data acquisition
\end_layout

\begin_layout LyX-Code
    - Lock the controller object
\end_layout

\begin_layout LyX-Code
/END FOR/
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
/FOR/ Each channel(s) implied in the data acquisition
\end_layout

\begin_layout LyX-Code
    - Load configuration 
\end_layout

\begin_layout LyX-Code
/END FOR/
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
- Load the master channel - timer(monitor) - with the integration time(count)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
/FOR/ Each controller(s) implied in the data acquisition
\end_layout

\begin_layout LyX-Code
    - Call PreStartAllCT()
\end_layout

\begin_layout LyX-Code
/END FOR/
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
/FOR/ Each channel(s), except for the master channel, implied in the data
 acquisition, 
\end_layout

\begin_layout LyX-Code
    - Call PreStartOneCT(channel)
\end_layout

\begin_layout LyX-Code
    - Call StartOneCT(channel)
\end_layout

\begin_layout LyX-Code
/END FOR/
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
/FOR/ Each controller(s) implied in the data aquisition
\end_layout

\begin_layout LyX-Code
    - Call StartAllCT()
\end_layout

\begin_layout LyX-Code
/END FOR/
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
- Call PreStartAllCT() on the controller which contains the master channel
\end_layout

\begin_layout LyX-Code
- Call PreStartOneCT(master channel)
\end_layout

\begin_layout LyX-Code
- Call StartOneCT(master channel)
\end_layout

\begin_layout LyX-Code
- Call StartAllCT() on the controller which contains the master channel
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
/FOR/ Each controller(s) implied in the data aquisition
\end_layout

\begin_layout LyX-Code
    - Unlock the controller object
\end_layout

\begin_layout LyX-Code
/END FOR/
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
/FOR/ Each channel(s) implied in the data aquisition
\end_layout

\begin_layout LyX-Code
    - Unlock the channel object
\end_layout

\begin_layout LyX-Code
/END FOR/
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
- Send acknowledge to the Start method
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
/WHILE/ master channel state is MOVING (From controller)
\end_layout

\begin_layout LyX-Code
     - Sleep for 10 * sleepTime mS
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
     /IF/ If master channel is not moving any more
\end_layout

\begin_layout LyX-Code
        - Stop all channels
\end_layout

\begin_layout LyX-Code
        - Send a Tango event on the state attribute to the requesting client
\end_layout

\begin_layout LyX-Code
        - Leave the loop
\end_layout

\begin_layout LyX-Code
     /ENDIF/
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
     /IF/ it is time to read the channel values
\end_layout

\begin_layout LyX-Code
        - Read the channel values
\end_layout

\begin_layout LyX-Code
        - Send a change event on each value attribute to the requested client
 if
\end_layout

\begin_layout LyX-Code
          the change event criterion is true
\end_layout

\begin_layout LyX-Code
     /ENDIF/
\end_layout

\begin_layout LyX-Code
/ENDWHILE/
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
- Read the channel values
\end_layout

\begin_layout LyX-Code
- Send a forced change event on each value attribute to the requesting client
\end_layout

\begin_layout LyX-Code
  with the value set to the one just read
\end_layout

\begin_layout LyX-Code

\end_layout

\end_body
\end_document
