#LyX 1.4.3 created this file. For more info see http://www.lyx.org/
\lyxformat 245
\begin_document
\begin_header
\textclass article
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\papersize default
\use_geometry false
\use_amsmath 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\end_header

\begin_body

\begin_layout Title
\begin_inset Quotes eld
\end_inset

Sardana
\begin_inset Quotes erd
\end_inset

 device pool plugin version management
\end_layout

\begin_layout Author
Tiago Coutinho
\end_layout

\begin_layout Date
6th August 2007
\end_layout

\begin_layout Standard
\begin_inset LatexCommand \tableofcontents{}

\end_inset


\end_layout

\begin_layout Section
Motivation
\end_layout

\begin_layout Standard
One of the core features of the Pool server is its plugin architecture which
 allows the management of software modules at runtime.
 At the present time, two types of plugins are supported: Controllers and
 pseudo motors.
\end_layout

\begin_layout Standard
Plugins can be written as Python modules or C++ shared libraries (except
 for pseudo motors which can only be written in Python).
 The pool is responsible for the management (loading/unloading, creation/deletio
n, etc) of these 
\begin_inset Quotes eld
\end_inset

external
\begin_inset Quotes erd
\end_inset

 software pieces at runtime.
 In order for a pool server to 
\begin_inset Quotes eld
\end_inset

see
\begin_inset Quotes erd
\end_inset

 some plugin file, this file has to be located in a directory accessible
 by the pool.
 Currently, a directory is 
\begin_inset Quotes eld
\end_inset

visible
\begin_inset Quotes erd
\end_inset

 by the pool if it belongs to the pool property called 'PoolPath' and if
 the user who started the pool server has read permissions on that directory.
\end_layout

\begin_layout Standard
It is forseen that, in production time, these files will need to be managed
 in a way that it will be possible to:
\end_layout

\begin_layout Itemize
keep track of the changes that have been made to the files and who made
 them
\end_layout

\begin_layout Itemize
Store the files in a 
\begin_inset Quotes eld
\end_inset

safe
\begin_inset Quotes erd
\end_inset

 location
\end_layout

\begin_layout Itemize
Share files by different instances of the pool
\end_layout

\begin_layout Itemize
Develop new plugins for the pool and test them without having direct access
 to the pool filesystem
\end_layout

\begin_layout Standard
Therefore, the most appropritate solution seems to be the integration in
 the Pool of a version control system that will support these features.
\end_layout

\begin_layout Section
Architecture
\end_layout

\begin_layout Standard
The main goals are:
\end_layout

\begin_layout Itemize
simple client interface for basic set of operations
\end_layout

\begin_layout Itemize
client is unaware that there is a version control system behind the pool
\end_layout

\begin_layout Itemize
possibility to work without a version control system
\end_layout

\begin_layout Itemize
support for at least CVS and SVN version control systems
\end_layout

\begin_layout Standard
The basic architecture is described in Figure 1.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename PoolSVNProposal_arch.png
	lyxscale 40
	scale 40

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Caption
Version control system architecture for the device pool
\end_layout

\end_inset


\end_layout

\begin_layout Section
Client use cases
\end_layout

\begin_layout Standard
The following sections explain the two basic use case cenarios when using
 this version control system feature.
\end_layout

\begin_layout Subsection
Client edits file
\end_layout

\begin_layout Enumerate
user checks which files are available for editing:
\end_layout

\begin_deeper
\begin_layout Enumerate
show list of files based on the 
\family typewriter
ControllerClassList
\family default
 + 
\family typewriter
PseudoMotorClassList
\family default
 attribute values of the Pool
\end_layout

\end_deeper
\begin_layout Enumerate
user opens the file with its favorite editor:
\end_layout

\begin_deeper
\begin_layout Enumerate

\family typewriter
data[] = Pool.getFile
\family default
(
\shape italic
filename
\shape default
)
\end_layout

\begin_layout Enumerate
save data in temporary file
\end_layout

\begin_layout Enumerate
open the editor with the local copy of the file
\end_layout

\end_deeper
\begin_layout Subsection
Client commits changes to the Pool
\end_layout

\begin_layout Enumerate
user saves the file inside the editor and closes it
\end_layout

\begin_layout Enumerate
user commits change(s):
\end_layout

\begin_deeper
\begin_layout Enumerate

\family typewriter
Pool.putFile
\family default
(
\shape italic
filename
\shape default
,
\shape italic
 username, comment
\shape default
,
\shape italic
 filedata
\shape default
,
\shape italic
 auto_reload=True
\shape default
)
\end_layout

\end_deeper
\begin_layout Standard
Alternatively, as part of the client environment, there could be a flag
 
\begin_inset Quotes eld
\end_inset

auto_commit
\begin_inset Quotes erd
\end_inset

 that, when set to True, will automaticaly put the file in the Pool when
 the user saves the file.
 This would reduce the use case to a single user step but it would make
 it a little more dangerous...
\end_layout

\begin_layout Standard
The client application will be responsible to place the correct username
 parameter.
\end_layout

\begin_layout Section
The Pool Tango device interface
\end_layout

\begin_layout Standard
Some new commands, attributes and properties have to be added to the Pool
 device Tango interface.
\end_layout

\begin_layout Subsection
New properties to be added
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Property name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Data type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Data format
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
RemoteModules
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Spectrum
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
The RemoteModules property will consist of a list of strings indentifying
 remote version control system repository modules.
\end_layout

\begin_layout Standard
Each string must contain the complete information on how to obtain a specific
 module from version control system.
 Bellow is an example of the possible contents for this property:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="1">
<features>
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
:ext:pool@controls01.cells.es:home/Siciliarep/CVS 
\bar under
pseudo_motors
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
:ext:pool@controls01.cells.es:home/Siciliarep/CVS 
\bar under
motor_ctrls
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
http://controls01.cells.es/Siciliarep/
\bar under
comchannel_ctrls
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
svn+ssh://controls01.cells.es/Siciliarep/
\bar under
countertimer_ctrls
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
At startup time the pool will check the contents of this property and will
 create/update its local repository image based on them.
 Therefore, care should be taken to assure that module names (underlined
 in the example above) are unique within the list.
\end_layout

\begin_layout Subsection
New commands to be added
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Command name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
In data type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Out data type
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
GetFile
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
String
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
PutFile
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
StringArray
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
void
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Description
GetFile: Returns the contents of a file.
 The argument is the complete filename.
 It only supports text files.
\end_layout

\begin_layout Description
PutFile: Puts the given file data in the Pool plugin repository.
 The parameters are:
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
filename
\series default
: The complete filename
\end_layout

\begin_layout Itemize

\series bold
username
\series default
: The user name
\end_layout

\begin_layout Itemize

\series bold
commentary
\series default
: A brief commentary explaining why the change is being done
\end_layout

\begin_layout Itemize

\series bold
data
\series default
: the new file data stream.
 Only text data is supported.
\end_layout

\begin_layout Itemize

\series bold
auto_reload
\series default
: when set to True (the default value), the pool will perform a ReloadController
() command automaticaly after the file is stored.
 As a consequence, any controller instances of the classes contained in
 the file that are running in the pool will have their version updated.
 If set to False the pool will just store the contents in the repository
 but all controller instances will keep running with the old previous version
 of the code.
\end_layout

\end_deeper
\begin_layout Section
Device pool changes
\end_layout

\begin_layout Subsection
Startup
\end_layout

\begin_layout Standard
The following pseudo code briefly describes the additional checks that need
 to be done at pool startup time.
\end_layout

\begin_layout LyX-Code
/IF/ RemoteModules is defined and corresponding CVS/SVN libs are present
\end_layout

\begin_layout LyX-Code
    /FOR EACH/ Module
\end_layout

\begin_layout LyX-Code
        /IF/ local repository image is empty
\end_layout

\begin_layout LyX-Code
            checkout Module
\end_layout

\begin_layout LyX-Code
        /ELSE/
\end_layout

\begin_layout LyX-Code
            update Module
\end_layout

\begin_layout LyX-Code
            commit pending changes
\end_layout

\begin_layout LyX-Code
            check if anything needs to be compiled (pending.
 see Problem 3 below)
\end_layout

\begin_layout LyX-Code
        add module directory and subdirs to VersionControlledPoolPath
\end_layout

\begin_layout LyX-Code
    /IF/ PoolPath is empty
\end_layout

\begin_layout LyX-Code
        WorkingMode = Remote
\end_layout

\begin_layout LyX-Code
    /ELSE/
\end_layout

\begin_layout LyX-Code
        WorkingMode = Mixed
\end_layout

\begin_layout LyX-Code
/ELSE/
\end_layout

\begin_layout LyX-Code
    WorkingMode = Local
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
Continue with original startup procedure
\end_layout

\begin_layout Subsection
PutFile command
\end_layout

\begin_layout Standard
The following pseudo code describes the necessary steps in commiting a file
 to the pool.
\end_layout

\begin_layout LyX-Code
filepath = retrive_path(filename)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
/IF/ filename already exists
\end_layout

\begin_layout LyX-Code
    replace existing file
\end_layout

\begin_layout LyX-Code
    /IF/ C++ file
\end_layout

\begin_layout LyX-Code
        compilation errors = recompile code
\end_layout

\begin_layout LyX-Code
    /IF/ filepath is in VersionControlledPoolPath
\end_layout

\begin_layout LyX-Code
        comment += 'user: ' + username
\end_layout

\begin_layout LyX-Code
        commit(filename,comment)
\end_layout

\begin_layout LyX-Code
/ELSE/
\end_layout

\begin_layout LyX-Code
    add file
\end_layout

\begin_layout LyX-Code
    /IF/ C++ file and file_path contains Makefile
\end_layout

\begin_layout LyX-Code
        compilation errors = recompile code
\end_layout

\begin_layout LyX-Code
        
\end_layout

\begin_layout LyX-Code
    /IF/ filepath is in VersionControlledPoolPath
\end_layout

\begin_layout LyX-Code
        add file to remote repository
\end_layout

\begin_layout LyX-Code
        comment += 'user: ' + username
\end_layout

\begin_layout LyX-Code
        commit(filename,comment)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
type = get_type(filename)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
/IF/ auto_reload and no compilation errors
\end_layout

\begin_layout LyX-Code
    /IF/ type == Controller
\end_layout

\begin_layout LyX-Code
        ReloadControllerCode(filename)   
\end_layout

\begin_layout LyX-Code
    /ELSE/
\end_layout

\begin_layout LyX-Code
        ReloadPseudoMotorCode(filename)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
/IF/ type = Controller
\end_layout

\begin_layout LyX-Code
    Send change event on ControllerClassList
\end_layout

\begin_layout LyX-Code
/ELSE/
\end_layout

\begin_layout LyX-Code
    Send change event on PseudoMotorClassList
\end_layout

\begin_layout Section
Problems/Questions
\end_layout

\begin_layout Enumerate
The Pool is not protected against any malicious clients invoking PutFile
 commands with wrong usernames.
\end_layout

\begin_layout Enumerate
In order for the pool to access the contents of the version control system
 it needs to connect with a specific user and password.
 The proposed solution requires that a 'pool' user can be logged in.
 In this solution the password would have to be hard coded into the pool
 server.
 This also means that commits will be registered with the 'pool' user and
 not the 'real' user which made the changes.
 The user that made the changes would be part of the commit comment.
\end_layout

\begin_layout Enumerate
C++ controllers: client has no information about the source files.
 Just the .so ones.
\end_layout

\begin_deeper
\begin_layout Enumerate
Clients know only .so files: These are binary and will demand that PutFile
 interface be changed.
 Also if the platform were a new code is compiled is different from the
 platform were the pool is being run then chances are the code will not
 run.
\end_layout

\begin_layout Enumerate
Clients know all source files: The pool will need new attribute/commands
 to retrieve all source files.
 How is the code compiled? Define a generic set of rules for a makefile?
\end_layout

\end_deeper
\begin_layout Enumerate
It was not forseen the need to remove files from the repository.
 Should this be supported as well?
\end_layout

\begin_layout Standard
A possible solution to problems (1) and (2) would be to transfer the username
 and encripted password in the PutFile command.
 This would mean that both client and server must support the selected encriptio
n library and have it installed on their machine (i.e.
 another prerequisite to run pool server and clients).
\end_layout

\end_body
\end_document
