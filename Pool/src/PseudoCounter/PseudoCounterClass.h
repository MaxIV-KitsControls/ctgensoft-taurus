//=============================================================================
//
// file :         PseudoCounterClass.h
//
// description :  Include for the PseudoCounterClass root class.
//                This class is represents the singleton class for
//                the PseudoCounter device class.
//                It contains all properties and methods which the 
//                PseudoCounter requires only once e.g. the commands.
//			
// project :      TANGO Device Server
//
// $Author$
//
// $Revision$
//
// $Log$
// Revision 1.3  2007/08/24 15:55:54  tcoutinho
// safety weekend commit
//
// Revision 1.2  2007/08/20 06:37:31  tcoutinho
// development commit
//
// Revision 1.1  2007/08/17 13:11:04  tcoutinho
// - pseudo motor restructure
// - pool base dev class restructure
// - initial commit for pseudo counters
//
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#ifndef _PSEUDOCOUNTERCLASS_H
#define _PSEUDOCOUNTERCLASS_H

#include <tango.h>
#include <PseudoCounter.h>


namespace PseudoCounter_ns
{//=====================================
//	Define classes for attributes
//=====================================
/**
 * The class for the ChannelList attribute
 */
class ChannelListAttrib: public Tango::SpectrumAttr
{
public:
	ChannelListAttrib():SpectrumAttr("ChannelList", Tango::DEV_STRING, Tango::READ, 256) {};
	~ChannelListAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<PseudoCounter *>(dev))->read_ChannelList(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<PseudoCounter *>(dev))->is_ChannelList_allowed(ty);}
};

/**
 * The class for the Value attribute
 */
class ValueAttrib: public Tango::Attr
{
public:
	ValueAttrib():Attr("Value", Tango::DEV_DOUBLE, Tango::READ) {};
	~ValueAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<PseudoCounter *>(dev))->read_Value(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<PseudoCounter *>(dev))->is_Value_allowed(ty);}
};

//=========================================
//	Define classes for commands
//=========================================
/**
 * The class for the Abort command
 */
class AbortCmd : public Tango::Command
{
public:
	AbortCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AbortCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AbortCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<PseudoCounter *>(dev))->is_Abort_allowed(any);}
};


/**
 * The class for the Start command
 */
class StartCmd : public Tango::Command
{
public:
	StartCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StartCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StartCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<PseudoCounter *>(dev))->is_Start_allowed(any);}
};



/**
 *  The PseudoCounterClass singleton definition
 */
class PseudoCounterClass : public Tango::DeviceClass
{
public:
//	properties member data

//	add your own data members here
//------------------------------------

	long 			nb_static_attr;
	bool			first_call_to_device_factory;
	
public:
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static PseudoCounterClass *init(const char *);
	static PseudoCounterClass *instance();
	~PseudoCounterClass();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);
	
protected:
	PseudoCounterClass(string &);
	static PseudoCounterClass *_instance;
	void command_factory();
	void get_class_property();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();

private:
	void device_factory(const Tango::DevVarStringArray *);
};


}	//	namespace PseudoCounter_ns

#endif // _PSEUDOCOUNTERCLASS_H
