//=============================================================================
//
// file :        PseudoCounter.h
//
// description : Include for the PseudoCounter class.
//
// project :	PseudoCounterChannel
//
// $Author$
//
// $Revision$
//
// $Log$
// Revision 1.5  2007/08/30 12:40:39  tcoutinho
// - changes to support Pseudo counters.
//
// Revision 1.4  2007/08/24 15:55:54  tcoutinho
// safety weekend commit
//
// Revision 1.3  2007/08/23 10:33:42  tcoutinho
// - basic pseudo counter check
// - some fixes regarding pseudo motors
//
// Revision 1.2  2007/08/20 06:37:31  tcoutinho
// development commit
//
// Revision 1.1  2007/08/17 13:11:04  tcoutinho
// - pseudo motor restructure
// - pool base dev class restructure
// - initial commit for pseudo counters
//
//
// copyleft :    European Synchrotron Radiation Facility
//               BP 220, Grenoble 38043
//               FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================
#ifndef _PSEUDOCOUNTER_H
#define _PSEUDOCOUNTER_H

#include <PoolIndBaseDev.h>
#include <Pool.h>

namespace Pool_ns
{
	class Pool;
	class PseudoCoCtrlFiCa;
}

/**
 * @author	$Author$
 * @version	$Revision$
 */

 //	Add your own constants definitions here.
 //-----------------------------------------------

class PseudoCounterController;

namespace PseudoCounter_ns
{


/**
 * Class Description:
 * Pseudo Counter Device used by the Sardana project device pool
 */

/*
 *	Device States Description:
*  Tango::ON :       The pseudo counter is ON and waiting
*  Tango::FAULT :    A fault has been reported by the device controller
*  Tango::UNKNOWN :  Impossible to communicate with the device controller
*  Tango::MOVING :   The pseudo counter is counting
 */


class PseudoCounter: public Pool_ns::PoolIndBaseDev
{
public :
	//	Add your own data members here
	//-----------------------------------------
	
	//	Here is the Start of the automatic code generation part
	//-------------------------------------------------------------	
/**
 *	@name attributes
 *	Attributs member data.
 */
//@{
		Tango::DevDouble	*attr_Value_read;
		Tango::DevString	*attr_ChannelList_read;
//@}

/**
 *	@name Device properties
 *	Device properties member data.
 */
//@{
/**
 *	The pseudo counter channel identifier
 */
	Tango::DevLong	channel_id;
/**
 *	List of channels (counter/timer or 0D experiment channels or Pseudo 
 *  counters) involved in this pseudo counter
 */
	vector<string>	channel_list;
//@}

/**@name Constructors
 * Miscellaneous constructors */
//@{
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	PseudoCounter(Tango::DeviceClass *cl,string &s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	PseudoCounter(Tango::DeviceClass *cl,const char *s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device name
 *	@param d	Device description.
 */
	PseudoCounter(Tango::DeviceClass *cl,const char *s,const char *d);
//@}

/**@name Destructor
 * Only one desctructor is defined for this class */
//@{
/**
 * The object desctructor.
 */	
	~PseudoCounter() {delete_device();};
/**
 *	will be called at device destruction or at init command.
 */
	void delete_device();
//@}

	
/**@name Miscellaneous methods */
//@{
/**
 *	Initialize the device
 */
	virtual void init_device();
/**
 *	Always executed method befor execution command method.
 */
	virtual void always_executed_hook();

//@}

/**
 * @name PseudoCounter methods prototypes
 */

//@{
/**
 *	Hardware acquisition for attributes.
 */
	virtual void read_attr_hardware(vector<long> &attr_list);
/**
 *	Extract real attribute values for Value acquisition result.
 */
	virtual void read_Value(Tango::Attribute &attr);
/**
 *	Extract real attribute values for ChannelList acquisition result.
 */
	virtual void read_ChannelList(Tango::Attribute &attr);
/**
 *	Read/Write allowed for Value attribute.
 */
	virtual bool is_Value_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for ChannelList attribute.
 */
	virtual bool is_ChannelList_allowed(Tango::AttReqType type);
/**
 *	Execution allowed for Start command.
 */
	virtual bool is_Start_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for Abort command.
 */
	virtual bool is_Abort_allowed(const CORBA::Any &any);
/**
 * This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *	@return	State Code
 *	@exception DevFailed
 */
	virtual Tango::DevState	dev_state();
/**
 * This command gets the device status (stored in its <i>device_status</i> data member) and returns it to the caller.
 *	@return	Status description
 *	@exception DevFailed
 */
	virtual Tango::ConstDevString	dev_status();
/**
 * Start counting
 *	@exception DevFailed
 */
	void	start();
/**
 * Stop counting
 *	@exception DevFailed
 */
	void	abort();

/**
 *	Read the device properties from database
 */
	 void get_device_property();
//@}

	//	Here is the end of the automatic code generation part
	//-------------------------------------------------------------	
	typedef enum { COUNTER_TIMER, ZEROD, PSEUDO_COUNTER } ChannelType;

	/**
	 * structure representing an individual channel inside the measurement 
	 * group
	 */
	typedef struct ChannelMov
	{
		long				id;
		Tango::DeviceProxy	*proxy;
		Tango::DevState		state;
		ChannelType			type;
	};
	ChannelMov				*ch_mov;
	vector<double>			ch_values;
	
	ChannelType get_type_from_index(long idx) { return ch_mov[idx].type; }
	
	ChannelMov &get_ch_from_id(long);
	long get_ch_idx_from_id(long);

	PseudoCounterController *get_pc_ctrl();
	Pool_ns::PseudoCoCtrlFiCa *get_pc_fica_ptr();

	virtual long get_id() 							{ return channel_id; }
	virtual void base_abort(bool);
	virtual void init_pool_element(Pool_ns::PoolElement *);

	double calc();
	
	void pool_elem_changed(Pool_ns::PoolElemEventList &,
						   Pool_ns::PoolElementEvent &);
protected :	
	//	Add your own data members here
	//-----------------------------------------
	double value;

	void update_state_from_channels(long idx = -1, Tango::DevState state = Tango::ON);
	
	virtual Pool_ns::PoolElement &get_pool_obj();

	virtual void inform_ghost(Tango::DevState,Tango::DevState) {}
};

}	// namespace_ns

#endif	// _PSEUDOCOUNTER_H
