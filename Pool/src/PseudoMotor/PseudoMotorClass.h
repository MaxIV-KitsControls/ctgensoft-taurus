//=============================================================================
//
// file :         PseudoMotorClass.h
//
// description :  Include for the PseudoMotorClass root class.
//                This class is represents the singleton class for
//                the PseudoMotor device class.
//                It contains all properties and methods which the 
//                PseudoMotor requires only once e.g. the commands.
//			
// project :      TANGO Device Server
//
// $Author$
//
// $Revision$
//
// $Log$
// Revision 1.2  2007/08/17 13:11:25  tcoutinho
// - pseudo motor restructure
// - pool base dev class restructure
// - initial commit for pseudo counters
//
// Revision 1.1  2007/08/14 07:58:47  tcoutinho
// New initial version of pseudo motor revised
//
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#ifndef _PSEUDOMOTORCLASS_H
#define _PSEUDOMOTORCLASS_H

#include <tango.h>
#include <PseudoMotor.h>


namespace PseudoMotor_ns
{
//=====================================
//	Define classes for attributes
//=====================================
/**
 * The class for the Position attribute
 */
class PositionAttrib: public Tango::Attr
{
public:
	PositionAttrib():Attr("Position", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~PositionAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<PseudoMotor *>(dev))->read_Position(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<PseudoMotor *>(dev))->write_Position(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<PseudoMotor *>(dev))->is_Position_allowed(ty);}
};

//=========================================
//	Define classes for commands
//=========================================
/**
 * The class for the MoveRelative command
 */
class MoveRelativeClass : public Tango::Command
{
public:
	MoveRelativeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	MoveRelativeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~MoveRelativeClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<PseudoMotor *>(dev))->is_MoveRelative_allowed(any);}
};


/**
 * The class for the Abort command
 */
class AbortClass : public Tango::Command
{
public:
	AbortClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AbortClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AbortClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<PseudoMotor *>(dev))->is_Abort_allowed(any);}
};



/**
 * The PseudoMotorClass singleton definition
 */
class PseudoMotorClass : public Tango::DeviceClass
{
public:
//	properties member data

//	add your own data members here
//------------------------------------

	long 			nb_static_attr;
	bool			first_call_to_device_factory;

public:
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static PseudoMotorClass *init(const char *);
	static PseudoMotorClass *instance();
	~PseudoMotorClass();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);
	
protected:
	PseudoMotorClass(string &);
	static PseudoMotorClass *_instance;
	void command_factory();
	void get_class_property();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();

private:
	void device_factory(const Tango::DevVarStringArray *);
};


}	//	namespace PseudoMotor_ns

#endif // _PSEUDOMOTORCLASS_H
