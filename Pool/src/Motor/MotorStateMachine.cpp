static const char *RcsId = "$Header$";
//+=============================================================================
//
// file :         MotorStateMachine.cpp
//
// description :  C++ source for the Motor and its alowed. 
//                method for commands and attributes
//
// project :      TANGO Device Server
//
// $Author$
//
// $Revision$
//
// $Log$
// Revision 1.15  2007/02/08 07:57:35  etaurel
// - Changes after compilation -Wall. Small small changes
//
// Revision 1.14  2006/12/18 11:35:29  etaurel
// - Features are only boolean values invisible from the external world
// - ExtraFeature becomes ExtraAttribute with data type of the old features
//
// Revision 1.13  2006/10/20 15:42:10  etaurel
// - First release with GetControllerInfo command supported and with
// controller properties
//
// Revision 1.12  2006/10/05 08:00:16  etaurel
// - Controller now supports dynamic features
//
// Revision 1.11  2006/09/15 07:50:54  etaurel
// - Abort command always possible
// - Remove the Reset command
//
// Revision 1.10  2006/08/17 09:56:15  etaurel
// - Add limit_switches attributes
//
// Revision 1.9  2006/07/07 12:39:56  etaurel
// - Commit after implementing the group multi motor read
//
// Revision 1.8  2006/07/03 08:40:22  etaurel
// - Add DialPosition and Offset attributes
//
// Revision 1.7  2006/06/28 15:56:13  etaurel
// - Commit after first series of tests
//
// Revision 1.6  2006/06/21 14:48:34  etaurel
// - Don't remember the changes I did..
//
// Revision 1.5  2006/06/19 12:34:36  etaurel
// - Changes in the Motr state machine and in the delete_device() method for a better pool shut down
//
// Revision 1.4  2006/05/24 14:12:10  etaurel
// - Several changes...
//
// Revision 1.3  2006/03/21 14:31:55  etaurel
// - Many changes.....
//
// Revision 1.2  2006/03/20 08:26:13  etaurel
// - Commit changes before changing the Motor interface
//
// Revision 1.1.1.1  2006/03/10 13:40:58  etaurel
// Initial import
//
// copyleft :     CELLS/ALBA
//				  Edifici Ciències Nord. Mòdul C-3 central.
//  			  Campus Universitari de Bellaterra. Universitat Autònoma de Barcelona
//  			  08193 Bellaterra, Barcelona
//  			  Spain
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#include <CtrlFiCa.h>
#include <tango.h>
#include <Motor.h>
#include <MotorClass.h>

/*====================================================================
 *	This file contains the methods to allow commands and attributes
 * read or write execution.
 *
 * If you wand to add your own code, add it between 
 * the "End/Re-Start of Generated Code" comments.
 *
 * If you want, you can also add your own methods.
 *====================================================================
 */

namespace Motor_ns
{

//=================================================
//		Attributes Allowed Methods
//=================================================

//+----------------------------------------------------------------------------
//
// method : 		Motor::is_Position_allowed
// 
// description : 	Read/Write allowed for Position attribute.
//
//-----------------------------------------------------------------------------
bool Motor::is_Position_allowed(Tango::AttReqType type)
{
	if (get_state() == Tango::FAULT	||
		get_state() == Tango::UNKNOWN)
	{
		//	End of Generated Code
		return false;
	}
	else
	{
		if ((type == Tango::WRITE_REQ) && ((pool_sd == true) || (get_state() == Tango::MOVING)))

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Motor::is_SimulationMode_allowed
// 
// description : 	Read/Write allowed for SimulationMode attribute.
//
//-----------------------------------------------------------------------------
bool Motor::is_SimulationMode_allowed(Tango::AttReqType type)
{
	if (get_state() == Tango::FAULT	||
		get_state() == Tango::UNKNOWN)
	{
		//	End of Generated Code
		return false;
	}
	else
	{
		if ((type == Tango::WRITE_REQ) && ((pool_sd == true) || (get_state() == Tango::MOVING)))

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Motor::is_Acceleration_allowed
// 
// description : 	Read/Write allowed for Acceleration attribute.
//
//-----------------------------------------------------------------------------
bool Motor::is_Acceleration_allowed(Tango::AttReqType type)
{
	if (get_state() == Tango::FAULT	||
		get_state() == Tango::UNKNOWN)
	{
		//	End of Generated Code
		return false;
	}
	else
	{
		if ((type == Tango::WRITE_REQ) && ((pool_sd == true) || (get_state() == Tango::MOVING)))

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Motor::is_Deceleration_allowed
// 
// description : 	Read/Write allowed for Deceleration attribute.
//
//-----------------------------------------------------------------------------
bool Motor::is_Deceleration_allowed(Tango::AttReqType type)
{
	if (get_state() == Tango::FAULT	||
		get_state() == Tango::UNKNOWN)
	{
		//	End of Generated Code
		return false;
	}
	else
	{
		if ((type == Tango::WRITE_REQ) && ((pool_sd == true) || (get_state() == Tango::MOVING)))

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Motor::is_Base_rate_allowed
// 
// description : 	Read/Write allowed for Base_rate attribute.
//
//-----------------------------------------------------------------------------
bool Motor::is_Base_rate_allowed(Tango::AttReqType type)
{
	if (get_state() == Tango::FAULT	||
		get_state() == Tango::UNKNOWN)
	{
		//	End of Generated Code
		return false;
	}
	else
	{
		if ((type == Tango::WRITE_REQ) && ((pool_sd == true) || (get_state() == Tango::MOVING)))

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Motor::is_Velocity_allowed
// 
// description : 	Read/Write allowed for Velocity attribute.
//
//-----------------------------------------------------------------------------
bool Motor::is_Velocity_allowed(Tango::AttReqType type)
{
	if (get_state() == Tango::FAULT	||
		get_state() == Tango::UNKNOWN)
	{
		//	End of Generated Code
		return false;
	}
	else
	{
		if ((type == Tango::WRITE_REQ) && ((pool_sd == true) || (get_state() == Tango::MOVING)))

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Motor::is_Offset_allowed
// 
// description : 	Read/Write allowed for Offset attribute.
//
//-----------------------------------------------------------------------------
bool Motor::is_Offset_allowed(Tango::AttReqType type)
{
	if (get_state() == Tango::FAULT	||
		get_state() == Tango::UNKNOWN)
	{
		//	End of Generated Code
		return false;
	}
	else
	{
		if ((type == Tango::WRITE_REQ) && ((pool_sd == true) || (get_state() == Tango::MOVING)))

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Motor::is_DialPosition_allowed
// 
// description : 	Read/Write allowed for DialPosition attribute.
//
//-----------------------------------------------------------------------------
bool Motor::is_DialPosition_allowed(Tango::AttReqType type)
{
	if (get_state() == Tango::FAULT	||
		get_state() == Tango::UNKNOWN)
	{
		//	End of Generated Code
		return false;
	}
	else
	{
		if ((type == Tango::WRITE_REQ) && (pool_sd == true))

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}

//+----------------------------------------------------------------------------
//
// method : 		Motor::is_Limit_switches_allowed
// 
// description : 	Read/Write allowed for Limit_switches attribute.
//
//-----------------------------------------------------------------------------
bool Motor::is_Limit_switches_allowed(Tango::AttReqType type)
{
	if (get_state() == Tango::UNKNOWN)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}

//+----------------------------------------------------------------------------
//
// method : 		Motor::is_Step_per_unit_allowed
// 
// description : 	Read/Write allowed for Step_per_unit attribute.
//
//-----------------------------------------------------------------------------
bool Motor::is_Step_per_unit_allowed(Tango::AttReqType type)
{
	if (get_state() == Tango::FAULT	||
		get_state() == Tango::UNKNOWN)
	{
		//	End of Generated Code
		return false;
	}
	else
	{
		if ((type == Tango::WRITE_REQ) && ((pool_sd == true) || (get_state() == Tango::MOVING)))
		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Motor::is_Backlash_allowed
// 
// description : 	Read/Write allowed for Backlash attribute.
//
//-----------------------------------------------------------------------------
bool Motor::is_Backlash_allowed(Tango::AttReqType type)
{
	if (get_state() == Tango::FAULT	||
		get_state() == Tango::UNKNOWN)
	{
		//	End of Generated Code
		return false;
	}
	else
	{
		if ((type == Tango::WRITE_REQ) && ((pool_sd == true) || (get_state() == Tango::MOVING)))
		//	Re-Start of Generated Code
		return false;
	}
	return true;
}

//=================================================
//		Commands Allowed Methods
//=================================================

//+----------------------------------------------------------------------------
//
// method : 		Motor::is_Abort_allowed
// 
// description : 	Execution allowed for Abort command.
//
//-----------------------------------------------------------------------------
bool Motor::is_Abort_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::FAULT	||
		get_state() == Tango::UNKNOWN)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Motor::is_SaveConfig_allowed
// 
// description : 	Execution allowed for SaveConfig command.
//
//-----------------------------------------------------------------------------
bool Motor::is_SaveConfig_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::FAULT	||
		get_state() == Tango::MOVING	||
		get_state() == Tango::UNKNOWN)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Motor::is_DefinePosition_allowed
// 
// description : 	Execution allowed for DefinePosition command.
//
//-----------------------------------------------------------------------------
bool Motor::is_DefinePosition_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::FAULT	||
		get_state() == Tango::MOVING	||
		get_state() == Tango::UNKNOWN)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Motor::is_MoveRelative_allowed
// 
// description : 	Execution allowed for MoveRelative command.
//
//-----------------------------------------------------------------------------
bool Motor::is_MoveRelative_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::FAULT	||
		get_state() == Tango::MOVING	||
		get_state() == Tango::UNKNOWN)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}

}	// namespace Motor_ns
