//=============================================================================
//
// file :         MotorClass.h
//
// description :  Include for the MotorClass root class.
//                This class is represents the singleton class for
//                the Motor device class.
//                It contains all properties and methods which the 
//                Motor requires only once e.g. the commands.
//			
// project :      TANGO Device Server
//
// $Author$
//
// $Revision$
//
// $Log$
// Revision 1.9  2006/12/18 11:35:29  etaurel
// - Features are only boolean values invisible from the external world
// - ExtraFeature becomes ExtraAttribute with data type of the old features
//
// Revision 1.8  2006/10/20 15:42:10  etaurel
// - First release with GetControllerInfo command supported and with
// controller properties
//
// Revision 1.7  2006/10/05 08:00:16  etaurel
// - Controller now supports dynamic features
//
// Revision 1.6  2006/09/15 07:50:54  etaurel
// - Abort command always possible
// - Remove the Reset command
//
// Revision 1.5  2006/08/17 09:56:15  etaurel
// - Add limit_switches attributes
//
// Revision 1.4  2006/07/07 12:39:55  etaurel
// - Commit after implementing the group multi motor read
//
// Revision 1.3  2006/07/03 08:40:22  etaurel
// - Add DialPosition and Offset attributes
//
// Revision 1.2  2006/03/21 14:31:55  etaurel
// - Many changes.....
//
// Revision 1.1.1.1  2006/03/10 13:40:58  etaurel
// Initial import
//
//
// copyleft :     CELLS/ALBA
//				  Edifici Ciències Nord. Mòdul C-3 central.
//  			  Campus Universitari de Bellaterra. Universitat Autònoma de Barcelona
//  			  08193 Bellaterra, Barcelona
//  			  Spain
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#ifndef _MOTORCLASS_H
#define _MOTORCLASS_H

#include <tango.h>
#include <Motor.h>


namespace Motor_ns
{
//=====================================
//	Define classes for attributes
//=====================================
/// Limit_switchesAttrib
class Limit_switchesAttrib: public Tango::SpectrumAttr
{
public:
	Limit_switchesAttrib():SpectrumAttr("Limit_switches", Tango::DEV_BOOLEAN, Tango::READ, 3) {};
	~Limit_switchesAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Motor *>(dev))->read_Limit_switches(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Motor *>(dev))->is_Limit_switches_allowed(ty);}
};

/// BacklashAttrib
class BacklashAttrib: public Tango::Attr
{
public:
	BacklashAttrib():Attr("Backlash", Tango::DEV_LONG, Tango::READ_WRITE) {};
	~BacklashAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Motor *>(dev))->read_Backlash(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Motor *>(dev))->write_Backlash(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Motor *>(dev))->is_Backlash_allowed(ty);}
};

/// BacklashAttrib
class Step_per_unitAttrib: public Tango::Attr
{
public:
	Step_per_unitAttrib():Attr("Step_per_unit", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~Step_per_unitAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Motor *>(dev))->read_Step_per_unit(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Motor *>(dev))->write_Step_per_unit(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Motor *>(dev))->is_Step_per_unit_allowed(ty);}
};

/// DialPositionAttrib
class DialPositionAttrib: public Tango::Attr
{
public:
	DialPositionAttrib():Attr("DialPosition", Tango::DEV_DOUBLE, Tango::READ) {};
	~DialPositionAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Motor *>(dev))->read_DialPosition(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Motor *>(dev))->is_DialPosition_allowed(ty);}
};

/// OffsetAttrib
class OffsetAttrib: public Tango::Attr
{
public:
	OffsetAttrib():Attr("Offset", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~OffsetAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Motor *>(dev))->read_Offset(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Motor *>(dev))->write_Offset(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Motor *>(dev))->is_Offset_allowed(ty);}
};

/// VelocityAttrib
class VelocityAttrib: public Tango::Attr
{
public:
	VelocityAttrib():Attr("Velocity", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~VelocityAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Motor *>(dev))->read_Velocity(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Motor *>(dev))->write_Velocity(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Motor *>(dev))->is_Velocity_allowed(ty);}
};

/// Base_rateAttrib
class Base_rateAttrib: public Tango::Attr
{
public:
	Base_rateAttrib():Attr("Base_rate", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~Base_rateAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Motor *>(dev))->read_Base_rate(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Motor *>(dev))->write_Base_rate(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Motor *>(dev))->is_Base_rate_allowed(ty);}
};

/// DecelerationAttrib
class DecelerationAttrib: public Tango::Attr
{
public:
	DecelerationAttrib():Attr("Deceleration", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~DecelerationAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Motor *>(dev))->read_Deceleration(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Motor *>(dev))->write_Deceleration(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Motor *>(dev))->is_Deceleration_allowed(ty);}
};

/// AccelerationAttrib
class AccelerationAttrib: public Tango::Attr
{
public:
	AccelerationAttrib():Attr("Acceleration", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~AccelerationAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Motor *>(dev))->read_Acceleration(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Motor *>(dev))->write_Acceleration(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Motor *>(dev))->is_Acceleration_allowed(ty);}
};

// SimulationModeAttrib
class SimulationModeAttrib: public Tango::Attr
{
public:
	SimulationModeAttrib():Attr("SimulationMode", Tango::DEV_BOOLEAN, Tango::READ) {};
	~SimulationModeAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Motor *>(dev))->read_SimulationMode(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Motor *>(dev))->is_SimulationMode_allowed(ty);}
};

///PositionAttrib
class PositionAttrib: public Tango::Attr
{
public:
	PositionAttrib():Attr("Position", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~PositionAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Motor *>(dev))->read_Position(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Motor *>(dev))->write_Position(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Motor *>(dev))->is_Position_allowed(ty);}
};

//=========================================
//	Define classes for commands
//=========================================
/// MoveRelativeCmd
class MoveRelativeCmd : public Tango::Command
{
public:
	MoveRelativeCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	MoveRelativeCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~MoveRelativeCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Motor *>(dev))->is_MoveRelative_allowed(any);}
};


/// SaveConfigClass
class SaveConfigClass : public Tango::Command
{
public:
	SaveConfigClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SaveConfigClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SaveConfigClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Motor *>(dev))->is_SaveConfig_allowed(any);}
};


/// DefinePositionCmd
class DefinePositionCmd : public Tango::Command
{
public:
	DefinePositionCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	DefinePositionCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~DefinePositionCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Motor *>(dev))->is_DefinePosition_allowed(any);}
};


/// AbortClass
class AbortClass : public Tango::Command
{
public:
	AbortClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AbortClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AbortClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Motor *>(dev))->is_Abort_allowed(any);}
};



/**
 *  The MotorClass singleton definition
 */
class MotorClass : public Tango::DeviceClass
{
public:
//	properties member data
/**
 *	Number of mS to sleep before the last read during a motor movement
 */
	Tango::DevLong	sleep_bef_last_read;

//	add your own data members here
//------------------------------------

	long 			nb_static_attr;
	bool			first_call_to_device_factory;

public:
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static MotorClass *init(const char *);
	static MotorClass *instance();
	~MotorClass();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);
	
protected:
	MotorClass(string &);
	static MotorClass *_instance;
	void command_factory();
	void get_class_property();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();

private:
	void device_factory(const Tango::DevVarStringArray *);
};


}	//	namespace Motor_ns

#endif // _MOTORCLASS_H
