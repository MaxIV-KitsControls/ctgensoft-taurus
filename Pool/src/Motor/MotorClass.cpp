static const char *RcsId     = "$Header$";
static const char *TagName   = "$Name$";
static const char *HttpServer= "http://www.esrf.fr/computing/cs/tango/tango_doc/ds_doc/";
//+=============================================================================
//
// file :        MotorClass.cpp
//
// description : C++ source for the MotorClass. A singleton
//               class derived from DeviceClass. It implements the
//               command list and all properties and methods required
//               by the Motor once per process.
//
// project :     TANGO Device Server
//
// $Author$
//
// $Revision$
//
// $Log$
// Revision 1.20  2007/02/08 07:57:47  etaurel
// - Changes after compilation -Wall. Small small changes
//
// Revision 1.19  2006/12/18 11:35:29  etaurel
// - Features are only boolean values invisible from the external world
// - ExtraFeature becomes ExtraAttribute with data type of the old features
//
// Revision 1.18  2006/11/22 13:56:18  etaurel
// - Fix bug in device_factory
//
// Revision 1.17  2006/11/20 14:35:00  etaurel
// - Add ghost group and event on group position
//
// Revision 1.16  2006/10/30 11:36:55  etaurel
// - Some changes in the motor init sequence
//
// Revision 1.15  2006/10/20 15:42:10  etaurel
// - First release with GetControllerInfo command supported and with
// controller properties
//
// Revision 1.14  2006/10/05 08:00:16  etaurel
// - Controller now supports dynamic features
//
// Revision 1.13  2006/10/02 13:19:25  etaurel
// - Motor extra feature test suite now running OK
//
// Revision 1.12  2006/10/02 09:19:46  etaurel
// - Motor controller now supports extra features (both CPP and Python)
//
// Revision 1.11  2006/09/15 07:50:53  etaurel
// - Abort command always possible
// - Remove the Reset command
//
// Revision 1.10  2006/08/17 09:56:15  etaurel
// - Add limit_switches attributes
//
// Revision 1.9  2006/07/07 12:39:55  etaurel
// - Commit after implementing the group multi motor read
//
// Revision 1.8  2006/07/03 08:40:22  etaurel
// - Add DialPosition and Offset attributes
//
// Revision 1.7  2006/06/21 14:48:34  etaurel
// - Don't remember the changes I did..
//
// Revision 1.6  2006/05/26 09:12:24  etaurel
// - Add some exception checking between the thread used to move motor and the
// write_Position method
//
// Revision 1.5  2006/05/24 14:12:10  etaurel
// - Several changes...
//
// Revision 1.4  2006/03/27 12:53:49  etaurel
// - Commit before adding MotorGroup class
//
// Revision 1.3  2006/03/21 14:31:55  etaurel
// - Many changes.....
//
// Revision 1.2  2006/03/20 08:26:13  etaurel
// - Commit changes before changing the Motor interface
//
// Revision 1.1.1.1  2006/03/10 13:40:58  etaurel
// Initial import
//
// copyleft :     CELLS/ALBA
//				  Edifici Ciències Nord. Mòdul C-3 central.
//  			  Campus Universitari de Bellaterra. Universitat Autònoma de Barcelona
//  			  08193 Bellaterra, Barcelona
//  			  Spain
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#include <CtrlFiCa.h>
#include <tango.h>

#include <Motor.h>
#include <MotorClass.h>

namespace Motor_ns
{
//+----------------------------------------------------------------------------
//
// method : 		MoveRelativeCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *MoveRelativeCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "MoveRelativeCmd::execute(): arrived" << endl;

	Tango::DevDouble	argin;
	extract(in_any, argin);

	((static_cast<Motor *>(device))->move_relative(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		DefinePositionCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *DefinePositionCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DefinePositionCmd::execute(): arrived" << endl;

	Tango::DevDouble	argin;
	extract(in_any, argin);

	((static_cast<Motor *>(device))->define_position(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		SaveConfigClass::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *SaveConfigClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "SaveConfigClass::execute(): arrived" << endl;

	((static_cast<Motor *>(device))->save_config());
	return new CORBA::Any();
}



//+----------------------------------------------------------------------------
//
// method : 		AbortClass::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *AbortClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "AbortClass::execute(): arrived" << endl;

	((static_cast<Motor *>(device))->abort());
	return new CORBA::Any();
}


//
//----------------------------------------------------------------
//	Initialize pointer for singleton pattern
//----------------------------------------------------------------
//
MotorClass *MotorClass::_instance = NULL;

//+----------------------------------------------------------------------------
//
// method : 		MotorClass::MotorClass(string &s)
// 
// description : 	constructor for the MotorClass
//
// in : - s : The class name
//
//-----------------------------------------------------------------------------
MotorClass::MotorClass(string &s):DeviceClass(s)
{

	cout2 << "Entering MotorClass constructor" << endl;
	set_default_property();
	get_class_property();
	write_class_property();
	
	nb_static_attr = 0;
	first_call_to_device_factory = true;
	
	cout2 << "Leaving MotorClass constructor" << endl;

}
//+----------------------------------------------------------------------------
//
// method : 		MotorClass::~MotorClass()
// 
// description : 	destructor for the MotorClass
//
//-----------------------------------------------------------------------------
MotorClass::~MotorClass()
{
	_instance = NULL;
}

//+----------------------------------------------------------------------------
//
// method : 		MotorClass::instance
// 
// description : 	Create the object if not already done. Otherwise, just
//			return a pointer to the object
//
// in : - name : The class name
//
//-----------------------------------------------------------------------------
MotorClass *MotorClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new MotorClass(s);
		}
		catch (bad_alloc)
		{
			throw;
		}		
	}		
	return _instance;
}

MotorClass *MotorClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}

//+----------------------------------------------------------------------------
//
// method : 		MotorClass::command_factory
// 
// description : 	Create the command object(s) and store them in the 
//			command list
//
//-----------------------------------------------------------------------------
void MotorClass::command_factory()
{
	command_list.push_back(new AbortClass("Abort",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new DefinePositionCmd("DefinePosition",
		Tango::DEV_DOUBLE, Tango::DEV_VOID,
		"New position",
		"",
		Tango::OPERATOR));
	command_list.push_back(new SaveConfigClass("SaveConfig",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new MoveRelativeCmd("MoveRelative",
		Tango::DEV_DOUBLE, Tango::DEV_VOID,
		"amount to move",
		"",
		Tango::OPERATOR));

	//	add polling if any
	for (unsigned int i=0 ; i<command_list.size(); i++)
	{
	}
}

//+----------------------------------------------------------------------------
//
// method : 		MotorClass::get_class_property
// 
// description : 	Get the class property for specified name.
//
// in :		string	name : The property name
//
//+----------------------------------------------------------------------------
Tango::DbDatum MotorClass::get_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}
//+----------------------------------------------------------------------------
//
// method : 		MotorClass::get_default_device_property()
// 
// description : 	Return the default value for device property.
//
//-----------------------------------------------------------------------------
Tango::DbDatum MotorClass::get_default_device_property(string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//+----------------------------------------------------------------------------
//
// method : 		MotorClass::get_default_class_property()
// 
// description : 	Return the default value for class property.
//
//-----------------------------------------------------------------------------
Tango::DbDatum MotorClass::get_default_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}
//+----------------------------------------------------------------------------
//
// method : 		MotorClass::device_factory
// 
// description : 	Create the device object(s) and store them in the 
//			device list
//
// in :		Tango::DevVarStringArray *devlist_ptr : The device name list
//
//-----------------------------------------------------------------------------
void MotorClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{

	//	Create all devices.(Automatic code generation)
	//-------------------------------------------------------------
	for (unsigned long i=0 ; i < devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
						
		// Create devices and add it into the device list
		//----------------------------------------------------
		device_list.push_back(new Motor(this, (*devlist_ptr)[i]));							 

		// Export device to the outside world
		// Check before if database used.
		//---------------------------------------------
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(device_list.back());
		else
			export_device(device_list.back(), (*devlist_ptr)[i]);
	}
	//	End of Automatic code generation
	//-------------------------------------------------------------

	long nb_dev = device_list.size();

//
// Get the number of static attribute before any dynamic one is added
//
	
	if ((nb_dev != 0) && (first_call_to_device_factory == true))
	{
		nb_static_attr = device_list.back()->get_device_attr()->get_attr_nb();
		first_call_to_device_factory = false;
	}

//
// Create dynamic attribute but remove the unwanted ones
//
	
	long nb_new_device = devlist_ptr->length();
	long start_index;
	
	if (nb_dev != 0)
		start_index = nb_dev - nb_new_device;
	else
		start_index = 0;
		
	for (long i=0 ; i < nb_new_device ; i++)
	{
		if (static_cast<Motor *>(device_list[start_index + i])->is_my_ctrl_built() == true)
		{
			static_cast<Motor *>(device_list[start_index + i])->create_dyn_attr();
			static_cast<Motor *>(device_list[start_index + i])->remove_unwanted_dyn_attr_from_device();
		}	
	}	
}
//+----------------------------------------------------------------------------
//	Method: MotorClass::attribute_factory(vector<Tango::Attr *> &att_list)
//-----------------------------------------------------------------------------
void MotorClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	//	Attribute : Position
	PositionAttrib	*position = new PositionAttrib();
	att_list.push_back(position);

	//	Attribute : SimulationMode
	SimulationModeAttrib	*simulation_mode = new SimulationModeAttrib();
	Tango::UserDefaultAttrProp	simulation_mode_prop;
	simulation_mode_prop.set_label("Motor simulation mode");
	simulation_mode->set_default_properties(simulation_mode_prop);
	att_list.push_back(simulation_mode);

	//	Attribute : Acceleration
	AccelerationAttrib	*acceleration = new AccelerationAttrib();
	acceleration->set_disp_level(Tango::EXPERT);
	att_list.push_back(acceleration);

	//	Attribute : Deceleration
	DecelerationAttrib	*deceleration = new DecelerationAttrib();
	deceleration->set_disp_level(Tango::EXPERT);
	att_list.push_back(deceleration);

	//	Attribute : Base_rate
	Base_rateAttrib	*base_rate = new Base_rateAttrib();
	base_rate->set_disp_level(Tango::EXPERT);
	att_list.push_back(base_rate);

	//	Attribute : Velocity
	VelocityAttrib	*velocity = new VelocityAttrib();
	velocity->set_disp_level(Tango::EXPERT);
	att_list.push_back(velocity);

	//	Attribute : Offset
	OffsetAttrib	*offset = new OffsetAttrib();
	offset->set_disp_level(Tango::EXPERT);
	offset->set_memorized();
	offset->set_memorized_init(true);
	att_list.push_back(offset);

	//	Attribute : DialPosition
	DialPositionAttrib	*dial_position = new DialPositionAttrib();
	dial_position->set_disp_level(Tango::EXPERT);
	att_list.push_back(dial_position);

	//	Attribute : Step_per_unit
	Step_per_unitAttrib	*step_per_unit = new Step_per_unitAttrib();
	step_per_unit->set_disp_level(Tango::EXPERT);
	step_per_unit->set_memorized();
	step_per_unit->set_memorized_init(false);
	att_list.push_back(step_per_unit);

	//	Attribute : Backlash
	BacklashAttrib	*backlash = new BacklashAttrib();
	backlash->set_disp_level(Tango::EXPERT);
	backlash->set_memorized();
	backlash->set_memorized_init(true);
	att_list.push_back(backlash);

	//	Attribute : Limit_switches
	Limit_switchesAttrib	*limit_switches = new Limit_switchesAttrib();
	Tango::UserDefaultAttrProp	limit_switches_prop;
	limit_switches_prop.set_label("Motor limit switches (Home - Lower - Upper)");
	limit_switches_prop.set_description("This attribute is the motor limit switches state. It's an array with 3 \nelements which are:\n0 - The home switch\n1 - The upper limit switch\n2 - The lower limit switch\nFalse means not active. True means active");
	limit_switches->set_default_properties(limit_switches_prop);
	att_list.push_back(limit_switches);

	//	End of Automatic code generation
	//-------------------------------------------------------------
}

//+----------------------------------------------------------------------------
//
// method : 		MotorClass::get_class_property()
// 
// description : 	Read the class properties from database.
//
//-----------------------------------------------------------------------------
void MotorClass::get_class_property()
{
	//	Initialize your default values here (if not done with  POGO).
	//------------------------------------------------------------------

	//	Read class properties from database.(Automatic code generation)
	//------------------------------------------------------------------
	cl_prop.push_back(Tango::DbDatum("Sleep_bef_last_read"));

	//	Call database and extract values
	//--------------------------------------------
	if (Tango::Util::instance()->_UseDb==true)
		get_db_class()->get_property(cl_prop);
	Tango::DbDatum	def_prop;
	int	i = -1;

	//	Extract Sleep_bef_last_read value
	def_prop = get_default_class_property(cl_prop[++i].name);
	if (def_prop.is_empty()==false)	def_prop  >>  sleep_bef_last_read;
	if (cl_prop[i].is_empty()==false)	cl_prop[i]  >>  sleep_bef_last_read;
	else
		cl_prop[i]  <<  sleep_bef_last_read;

	//	End of Automatic code generation
	//------------------------------------------------------------------

}

//+----------------------------------------------------------------------------
//
// method : 	MotorClass::set_default_property
// 
// description: Set default property (class and device) for wizard.
//              For each property, add to wizard property name and description
//              If default value has been set, add it to wizard property and
//              store it in a DbDatum.
//
//-----------------------------------------------------------------------------
void MotorClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;

	vector<string>	vect_data;
	//	Set Default Class Properties
	prop_name = "Sleep_bef_last_read";
	prop_desc = "Number of mS to sleep before the last read during a motor movement";
	prop_def  = "0";
	vect_data.clear();
	vect_data.push_back("0");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		cl_def_prop.push_back(data);
		add_wiz_class_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_class_prop(prop_name, prop_desc);

	//	Set Default Device Properties
	prop_name = "Motor_id";
	prop_desc = "The motor identificator";
	prop_def  = "";
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "_Acceleration";
	prop_desc = "";
	prop_def  = "-1";
	vect_data.clear();
	vect_data.push_back("-1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "_Velocity";
	prop_desc = "";
	prop_def  = "-1";
	vect_data.clear();
	vect_data.push_back("-1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "_Base_rate";
	prop_desc = "";
	prop_def  = "-1";
	vect_data.clear();
	vect_data.push_back("-1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "_Deceleration";
	prop_desc = "";
	prop_def  = "-1";
	vect_data.clear();
	vect_data.push_back("-1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "Sleep_bef_last_read";
	prop_desc = "Number of mS to sleep before the last read during a motor movement";
	prop_def  = "0";
	vect_data.clear();
	vect_data.push_back("0");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

}
//+----------------------------------------------------------------------------
//
// method : 		MotorClass::write_class_property
// 
// description : 	Set class description as property in database
//
//-----------------------------------------------------------------------------
void MotorClass::write_class_property()
{
	//	First time, check if database used
	//--------------------------------------------
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("Motor generic client class");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("  ");
	description << str_desc;
	data.push_back(description);
		
	//	put cvs location
	string	rcsId(RcsId);
	string	filename(classname);
	start = rcsId.find("/");
	if (start!=string::npos)
	{
		filename += "Class.cpp";
		end   = rcsId.find(filename);
		if (end>start)
		{
			string	strloc = rcsId.substr(start, end-start);
			//	Check if specific repository
			start = strloc.find("/cvsroot/");
			if (start!=string::npos && start>0)
			{
				string	repository = strloc.substr(0, start);
				if (repository.find("/segfs/")!=string::npos)
					strloc = "ESRF:" + strloc.substr(start, strloc.length()-start);
			}
			Tango::DbDatum	cvs_loc("cvs_location");
			cvs_loc << strloc;
			data.push_back(cvs_loc);
		}
	}

	//	Get CVS tag revision
	string	tagname(TagName);
	header = "$Name: ";
	start = header.length();
	string	endstr(" $");
	end   = tagname.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strtag = tagname.substr(start, end-start);
		Tango::DbDatum	cvs_tag("cvs_tag");
		cvs_tag << strtag;
		data.push_back(cvs_tag);
	}

	//	Get URL location
	string	httpServ(HttpServer);
	if (httpServ.length()>0)
	{
		Tango::DbDatum	db_doc_url("doc_url");
		db_doc_url << httpServ;
		data.push_back(db_doc_url);
	}

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	vector<string> inheritance;
	inheritance.push_back("Device_3Impl");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	//--------------------------------------------
	get_db_class()->put_property(data);
}

}	// namespace
