//=============================================================================
//
// file :         MeasurementGroupClass.h
//
// description :  Include for the MeasurementGroupClass root class.
//                This class is represents the singleton class for
//                the MeasurementGroup device class.
//                It contains all properties and methods which the 
//                MeasurementGroup requires only once e.g. the commands.
//			
// project :      TANGO Device Server
//
// $Author$
//
// $Revision$
//
// $Log$
// Revision 1.7  2007/08/24 15:55:26  tcoutinho
// safety weekend commit
//
// Revision 1.6  2007/04/30 15:47:05  tcoutinho
// - new attribute "Channels"
// - new device property "Channel_List"
// - when add/remove channel, pool sends a change event on the MeasurementGroupList
//
// Revision 1.5  2007/04/23 15:17:59  tcoutinho
// - changes according to Sardana metting 26-03-2007: identical measurement groups can be created, Add/Remove  Exp. channel from a MG, etc
//
// Revision 1.4  2007/04/03 07:17:05  tcoutinho
// - following decision made on Sardana metting 26-03-2007, the save config feature will not be implemented on a measurement group basis.
//
// Revision 1.3  2007/02/28 16:21:52  tcoutinho
// - support for 0D channels
// - basic fixes after running first battery of tests on measurement group
//
// Revision 1.2  2007/02/22 11:56:22  tcoutinho
// - added support for ghost measurement group
// - added support for init/reload controller operations
// - fix some possible concurrency
// - added support for configuration (not finished)
//
// Revision 1.1  2007/02/03 15:20:38  tcoutinho
// - new Measurement Group Tango device
//
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#ifndef _MEASUREMENTGROUPCLASS_H
#define _MEASUREMENTGROUPCLASS_H

#include <tango.h>
#include <MeasurementGroup.h>


namespace MeasurementGroup_ns
{//=====================================
//	Define classes for attributes
//=====================================
/**
 * The class for the PseudoCounters attribute
 */
class PseudoCountersAttrib: public Tango::SpectrumAttr
{
public:
	PseudoCountersAttrib():SpectrumAttr("PseudoCounters", Tango::DEV_STRING, Tango::READ, 1024) {};
	~PseudoCountersAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<MeasurementGroup *>(dev))->read_PseudoCounters(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<MeasurementGroup *>(dev))->is_PseudoCounters_allowed(ty);}
};

/**
 * The class for the Channels attribute
 */
class ChannelsAttrib: public Tango::SpectrumAttr
{
public:
	ChannelsAttrib():SpectrumAttr("Channels", Tango::DEV_STRING, Tango::READ, 1024) {};
	~ChannelsAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<MeasurementGroup *>(dev))->read_Channels(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<MeasurementGroup *>(dev))->is_Channels_allowed(ty);}
};

/**
 * The class for the Counters attribute
 */
class CountersAttrib: public Tango::SpectrumAttr
{
public:
	CountersAttrib():SpectrumAttr("Counters", Tango::DEV_STRING, Tango::READ, 1024) {};
	~CountersAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<MeasurementGroup *>(dev))->read_Counters(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<MeasurementGroup *>(dev))->is_Counters_allowed(ty);}
};

/**
 * The class for the TwoDExpChannels attribute
 */
class TwoDExpChannelsAttrib: public Tango::SpectrumAttr
{
public:
	TwoDExpChannelsAttrib():SpectrumAttr("TwoDExpChannels", Tango::DEV_STRING, Tango::READ, 1024) {};
	~TwoDExpChannelsAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<MeasurementGroup *>(dev))->read_TwoDExpChannels(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<MeasurementGroup *>(dev))->is_TwoDExpChannels_allowed(ty);}
};

/**
 * The class for the OneDExpChannels attribute
 */
class OneDExpChannelsAttrib: public Tango::SpectrumAttr
{
public:
	OneDExpChannelsAttrib():SpectrumAttr("OneDExpChannels", Tango::DEV_STRING, Tango::READ, 1024) {};
	~OneDExpChannelsAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<MeasurementGroup *>(dev))->read_OneDExpChannels(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<MeasurementGroup *>(dev))->is_OneDExpChannels_allowed(ty);}
};

/**
 * The class for the ZeroDExpChannels attribute
 */
class ZeroDExpChannelsAttrib: public Tango::SpectrumAttr
{
public:
	ZeroDExpChannelsAttrib():SpectrumAttr("ZeroDExpChannels", Tango::DEV_STRING, Tango::READ, 1024) {};
	~ZeroDExpChannelsAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<MeasurementGroup *>(dev))->read_ZeroDExpChannels(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<MeasurementGroup *>(dev))->is_ZeroDExpChannels_allowed(ty);}
};

/**
 * The class for the Timer attribute
 */
class TimerAttrib: public Tango::Attr
{
public:
	TimerAttrib():Attr("Timer", Tango::DEV_STRING, Tango::READ_WRITE) {};
	~TimerAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<MeasurementGroup *>(dev))->read_Timer(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<MeasurementGroup *>(dev))->write_Timer(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<MeasurementGroup *>(dev))->is_Timer_allowed(ty);}
};

/**
 * The class for the Monitor attribute
 */
class MonitorAttrib: public Tango::Attr
{
public:
	MonitorAttrib():Attr("Monitor", Tango::DEV_STRING, Tango::READ_WRITE) {};
	~MonitorAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<MeasurementGroup *>(dev))->read_Monitor(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<MeasurementGroup *>(dev))->write_Monitor(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<MeasurementGroup *>(dev))->is_Monitor_allowed(ty);}
};

/**
 * The class for the Integration_time attribute
 */
class Integration_timeAttrib: public Tango::Attr
{
public:
	Integration_timeAttrib():Attr("Integration_time", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~Integration_timeAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<MeasurementGroup *>(dev))->read_Integration_time(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<MeasurementGroup *>(dev))->write_Integration_time(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<MeasurementGroup *>(dev))->is_Integration_time_allowed(ty);}
};

/**
 * The class for the Integration_count attribute
 */
class Integration_countAttrib: public Tango::Attr
{
public:
	Integration_countAttrib():Attr("Integration_count", Tango::DEV_LONG, Tango::READ_WRITE) {};
	~Integration_countAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<MeasurementGroup *>(dev))->read_Integration_count(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<MeasurementGroup *>(dev))->write_Integration_count(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<MeasurementGroup *>(dev))->is_Integration_count_allowed(ty);}
};

//=========================================
//	Define classes for commands
//=========================================
/**
 * The class for the RemoveExpChannel command
 */
class RemoveExpChannelCmd : public Tango::Command
{
public:
	RemoveExpChannelCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	RemoveExpChannelCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~RemoveExpChannelCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<MeasurementGroup *>(dev))->is_RemoveExpChannel_allowed(any);}
};


/**
 * The class for the AddExpChannel command
 */
class AddExpChannelCmd : public Tango::Command
{
public:
	AddExpChannelCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AddExpChannelCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AddExpChannelCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<MeasurementGroup *>(dev))->is_AddExpChannel_allowed(any);}
};


/**
 * The class for the Abort command
 */
class AbortClass : public Tango::Command
{
public:
	AbortClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AbortClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AbortClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<MeasurementGroup *>(dev))->is_Abort_allowed(any);}
};


/**
 * The class for the Start command
 */
class StartCmd : public Tango::Command
{
public:
	StartCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StartCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StartCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<MeasurementGroup *>(dev))->is_Start_allowed(any);}
};


/**
 * The MeasurementGroupClass singleton definition
 */
class MeasurementGroupClass : public Tango::DeviceClass
{
public:
//	properties member data

//	add your own data members here
//------------------------------------

	long 			nb_static_attr;
	bool			first_call_to_device_factory;
	int				polling_th_id;

protected:
	void create_ghost_group();

public:
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static MeasurementGroupClass *init(const char *);
	static MeasurementGroupClass *instance();
	~MeasurementGroupClass();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);
	
protected:
	MeasurementGroupClass(string &);
	static MeasurementGroupClass *_instance;
	void command_factory();
	void get_class_property();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();

private:
	void device_factory(const Tango::DevVarStringArray *);
};


}	//	namespace MeasurementGroup_ns

#endif // _MEASUREMENTGROUPCLASS_H
