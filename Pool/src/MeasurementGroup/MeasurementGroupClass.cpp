static const char *RcsId     = "$Header$";
static const char *TagName   = "$Name$";
static const char *HttpServer= "http://www.esrf.fr/computing/cs/tango/tango_doc/ds_doc/";
//+=============================================================================
//
// file :        MeasurementGroupClass.cpp
//
// description : C++ source for the MeasurementGroupClass. A singleton
//               class derived from DeviceClass. It implements the
//               command list and all properties and methods required
//               by the MeasurementGroup once per process.
//
// project :     TANGO Device Server
//
// $Author$
//
// $Revision$
//
// $Log$
// Revision 1.12  2007/08/30 12:40:39  tcoutinho
// - changes to support Pseudo counters.
//
// Revision 1.11  2007/08/24 15:55:26  tcoutinho
// safety weekend commit
//
// Revision 1.10  2007/07/23 16:41:58  tcoutinho
// CVS changed
//
// Revision 1.9  2007/05/22 12:56:02  etaurel
// - Add a test in order to refuse starting if there is no pool device defined
//
// Revision 1.8  2007/04/30 15:47:05  tcoutinho
// - new attribute "Channels"
// - new device property "Channel_List"
// - when add/remove channel, pool sends a change event on the MeasurementGroupList
//
// Revision 1.7  2007/04/23 15:17:59  tcoutinho
// - changes according to Sardana metting 26-03-2007: identical measurement groups can be created, Add/Remove  Exp. channel from a MG, etc
//
// Revision 1.6  2007/04/03 07:17:05  tcoutinho
// - following decision made on Sardana metting 26-03-2007, the save config feature will not be implemented on a measurement group basis.
//
// Revision 1.5  2007/02/28 16:21:51  tcoutinho
// - support for 0D channels
// - basic fixes after running first battery of tests on measurement group
//
// Revision 1.4  2007/02/22 11:56:22  tcoutinho
// - added support for ghost measurement group
// - added support for init/reload controller operations
// - fix some possible concurrency
// - added support for configuration (not finished)
//
// Revision 1.3  2007/02/08 10:50:19  etaurel
// - Some small changes after the merge
//
// Revision 1.2  2007/02/06 09:42:34  tcoutinho
// - safe development commit
//
// Revision 1.1  2007/02/03 15:20:38  tcoutinho
// - new Measurement Group Tango device
//
//
// copyleft :   European Synchrotron Radiation Facility
//              BP 220, Grenoble 38043
//              FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================



#include <MeasurementGroup.h>
#include <MeasurementGroupClass.h>

#include <tango.h>
#include <Pool.h>

//+----------------------------------------------------------------------------
/**
 *	Create MeasurementGroupClass singleton and return it in a C function for Python usage
 */
//+----------------------------------------------------------------------------
extern "C" {
#ifdef WIN32

__declspec(dllexport)

#endif

	Tango::DeviceClass *_create_MeasurementGroup_class(const char *name) {
		return MeasurementGroup_ns::MeasurementGroupClass::init(name);
	}
}


namespace MeasurementGroup_ns
{
//+----------------------------------------------------------------------------
//
// method : 		AddExpChannelCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *AddExpChannelCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "AddExpChannelCmd::execute(): arrived" << endl;

	Tango::DevString	argin;
	extract(in_any, argin);

	((static_cast<MeasurementGroup *>(device))->add_exp_channel(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		RemoveExpChannelCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *RemoveExpChannelCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "RemoveExpChannelCmd::execute(): arrived" << endl;

	Tango::DevString	argin;
	extract(in_any, argin);

	((static_cast<MeasurementGroup *>(device))->remove_exp_channel(argin));
	return new CORBA::Any();
}




//+----------------------------------------------------------------------------
//
// method : 		StartCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *StartCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "StartCmd::execute(): arrived" << endl;

	((static_cast<MeasurementGroup *>(device))->start());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		AbortClass::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *AbortClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "AbortClass::execute(): arrived" << endl;

	((static_cast<MeasurementGroup *>(device))->abort());
	return new CORBA::Any();
}


//
//----------------------------------------------------------------
//	Initialize pointer for singleton pattern
//----------------------------------------------------------------
//
MeasurementGroupClass *MeasurementGroupClass::_instance = NULL;

//+----------------------------------------------------------------------------
//
// method : 		MeasurementGroupClass::MeasurementGroupClass(string &s)
// 
// description : 	constructor for the MeasurementGroupClass
//
// in : - s : The class name
//
//-----------------------------------------------------------------------------
MeasurementGroupClass::MeasurementGroupClass(string &s):DeviceClass(s)
{

	cout2 << "Entering MeasurementGroupClass constructor" << endl;
	set_default_property();
	get_class_property();
	write_class_property();
	
	nb_static_attr = -1;
	first_call_to_device_factory = true;
	
	Tango::Util *tg = Tango::Util::instance();
	polling_th_id = tg->get_polling_thread_id();
	
	cout2 << "Leaving MeasurementGroupClass constructor" << endl;

}
//+----------------------------------------------------------------------------
//
// method : 		MeasurementGroupClass::~MeasurementGroupClass()
// 
// description : 	destructor for the MeasurementGroupClass
//
//-----------------------------------------------------------------------------
MeasurementGroupClass::~MeasurementGroupClass()
{
	_instance = NULL;
}

//+----------------------------------------------------------------------------
//
// method : 		MeasurementGroupClass::instance
// 
// description : 	Create the object if not already done. Otherwise, just
//			return a pointer to the object
//
// in : - name : The class name
//
//-----------------------------------------------------------------------------
MeasurementGroupClass *MeasurementGroupClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new MeasurementGroupClass(s);
		}
		catch (bad_alloc)
		{
			throw;
		}		
	}		
	return _instance;
}

MeasurementGroupClass *MeasurementGroupClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}

//+----------------------------------------------------------------------------
//
// method : 		MeasurementGroupClass::command_factory
// 
// description : 	Create the command object(s) and store them in the 
//			command list
//
//-----------------------------------------------------------------------------
void MeasurementGroupClass::command_factory()
{
	command_list.push_back(new StartCmd("Start",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new AbortClass("Abort",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new AddExpChannelCmd("AddExpChannel",
		Tango::DEV_STRING, Tango::DEV_VOID,
		"Experiment Channel name",
		"",
		Tango::OPERATOR));
	command_list.push_back(new RemoveExpChannelCmd("RemoveExpChannel",
		Tango::DEV_STRING, Tango::DEV_VOID,
		"Experiment channel name",
		"",
		Tango::OPERATOR));

	//	add polling if any
	for (unsigned int i=0 ; i<command_list.size(); i++)
	{
	}
}

//+----------------------------------------------------------------------------
//
// method : 		MeasurementGroupClass::get_class_property
// 
// description : 	Get the class property for specified name.
//
// in :		string	name : The property name
//
//+----------------------------------------------------------------------------
Tango::DbDatum MeasurementGroupClass::get_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}
//+----------------------------------------------------------------------------
//
// method : 		MeasurementGroupClass::get_default_device_property()
// 
// description : 	Return the default value for device property.
//
//-----------------------------------------------------------------------------
Tango::DbDatum MeasurementGroupClass::get_default_device_property(string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//+----------------------------------------------------------------------------
//
// method : 		MeasurementGroupClass::get_default_class_property()
// 
// description : 	Return the default value for class property.
//
//-----------------------------------------------------------------------------
Tango::DbDatum MeasurementGroupClass::get_default_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}
//+----------------------------------------------------------------------------
//
// method : 		MeasurementGroupClass::device_factory
// 
// description : 	Create the device object(s) and store them in the 
//			device list
//
// in :		Tango::DevVarStringArray *devlist_ptr : The device name list
//
//-----------------------------------------------------------------------------
void MeasurementGroupClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{

	//	Create all devices.(Automatic code generation)
	//-------------------------------------------------------------
	for (unsigned long i=0 ; i < devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
						
		// Create devices and add it into the device list
		//----------------------------------------------------
		device_list.push_back(new MeasurementGroup(this, (*devlist_ptr)[i]));							 

		// Export device to the outside world
		// Check before if database used.
		//---------------------------------------------
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(device_list.back());
		else
			export_device(device_list.back(), (*devlist_ptr)[i]);
	}
	//	End of Automatic code generation
	//-------------------------------------------------------------
	
	long nb_dev = 0;
	
	if (first_call_to_device_factory == true)
	{
		
//
// Create ghost group if it is the first call (Create this group as the first
// one that it gets the group identifier 0)
//
		create_ghost_group();
		
		nb_dev = device_list.size();

//
// At least the ghost group should be there
//
		assert(nb_dev > 0);
//
// Get the number of static attribute before any dynamic one is added
//
		nb_static_attr = device_list.back()->get_device_attr()->get_attr_nb();
		
		first_call_to_device_factory = false;
	}
	else
	{
		nb_dev = device_list.size();
	}
	
	long nb_new_device = devlist_ptr->length();
	long start_index;
	
	if (nb_dev != 0)
		start_index = nb_dev - nb_new_device;
	else
		start_index = 0;
		
	for (unsigned long i=0 ; i < nb_new_device ; i++)
	{
//
// Create dynamic attribute but remove the unwanted ones
//
		static_cast<MeasurementGroup *>(device_list[start_index + i])->create_dyn_attr();
		static_cast<MeasurementGroup *>(device_list[start_index + i])->remove_unwanted_dyn_attr_from_device();

//
// For the newly created dynamic attributes create properties in the DB 
// (one attribute property for each extra read-write attribute of each channel)  
//
		//static_cast<MeasurementGroup *>(device_list[start_index + i])->build_config();
	}

}
//+----------------------------------------------------------------------------
//	Method: MeasurementGroupClass::attribute_factory(vector<Tango::Attr *> &att_list)
//-----------------------------------------------------------------------------
void MeasurementGroupClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	//	Attribute : Integration_count
	Integration_countAttrib	*integration_count = new Integration_countAttrib();
	Tango::UserDefaultAttrProp	integration_count_prop;
	integration_count_prop.set_label("Integration Count");
	integration_count_prop.set_description("The group monitor count value");
	integration_count->set_default_properties(integration_count_prop);
	integration_count->set_memorized();
	integration_count->set_memorized_init(true);
	att_list.push_back(integration_count);

	//	Attribute : Integration_time
	Integration_timeAttrib	*integration_time = new Integration_timeAttrib();
	Tango::UserDefaultAttrProp	integration_time_prop;
	integration_time_prop.set_label("Integration Time");
	integration_time_prop.set_description("The group timer integration time.");
	integration_time->set_default_properties(integration_time_prop);
	integration_time->set_memorized();
	integration_time->set_memorized_init(true);
	att_list.push_back(integration_time);

	//	Attribute : Monitor
	MonitorAttrib	*monitor = new MonitorAttrib();
	Tango::UserDefaultAttrProp	monitor_prop;
	monitor_prop.set_label("Monitor");
	monitor_prop.set_description("Name of the channel used as a Monitor");
	monitor->set_default_properties(monitor_prop);
	monitor->set_memorized();
	monitor->set_memorized_init(true);
	att_list.push_back(monitor);

	//	Attribute : Timer
	TimerAttrib	*timer = new TimerAttrib();
	Tango::UserDefaultAttrProp	timer_prop;
	timer_prop.set_label("Timer");
	timer_prop.set_description("Name of the channel used as a Timer");
	timer->set_default_properties(timer_prop);
	timer->set_memorized();
	timer->set_memorized_init(true);
	att_list.push_back(timer);

	//	Attribute : ZeroDExpChannels
	ZeroDExpChannelsAttrib	*zero_dexp_channels = new ZeroDExpChannelsAttrib();
	Tango::UserDefaultAttrProp	zero_dexp_channels_prop;
	zero_dexp_channels_prop.set_label("0D Experiment Channels");
	zero_dexp_channels_prop.set_description("list of the 0DExperimentChannel name within the group");
	zero_dexp_channels->set_default_properties(zero_dexp_channels_prop);
	att_list.push_back(zero_dexp_channels);

	//	Attribute : OneDExpChannels
	OneDExpChannelsAttrib	*one_dexp_channels = new OneDExpChannelsAttrib();
	Tango::UserDefaultAttrProp	one_dexp_channels_prop;
	one_dexp_channels_prop.set_label("1D Experiment Channels");
	one_dexp_channels_prop.set_description("List of the 1DExperimentChannel within the group");
	one_dexp_channels->set_default_properties(one_dexp_channels_prop);
	att_list.push_back(one_dexp_channels);

	//	Attribute : TwoDExpChannels
	TwoDExpChannelsAttrib	*two_dexp_channels = new TwoDExpChannelsAttrib();
	Tango::UserDefaultAttrProp	two_dexp_channels_prop;
	two_dexp_channels_prop.set_label("2D Experiment Channels");
	two_dexp_channels_prop.set_description("List of the 2DExperimentChannel within the group");
	two_dexp_channels->set_default_properties(two_dexp_channels_prop);
	att_list.push_back(two_dexp_channels);

	//	Attribute : Counters
	CountersAttrib	*counters = new CountersAttrib();
	Tango::UserDefaultAttrProp	counters_prop;
	counters_prop.set_label("Counters");
	counters_prop.set_description("List of counter names");
	counters->set_default_properties(counters_prop);
	att_list.push_back(counters);

	//	Attribute : Channels
	ChannelsAttrib	*channels = new ChannelsAttrib();
	Tango::UserDefaultAttrProp	channels_prop;
	channels_prop.set_label("Channels");
	channels_prop.set_description("List of channel names");
	channels->set_default_properties(channels_prop);
	att_list.push_back(channels);

	//	Attribute : PseudoCounters
	PseudoCountersAttrib	*pseudo_counters = new PseudoCountersAttrib();
	Tango::UserDefaultAttrProp	pseudo_counters_prop;
	pseudo_counters_prop.set_label("Counters");
	pseudo_counters_prop.set_description("List of counter names");
	pseudo_counters->set_default_properties(pseudo_counters_prop);
	att_list.push_back(pseudo_counters);

	//	End of Automatic code generation
	//-------------------------------------------------------------
}

//+----------------------------------------------------------------------------
//
// method : 		MeasurementGroupClass::get_class_property()
// 
// description : 	Read the class properties from database.
//
//-----------------------------------------------------------------------------
void MeasurementGroupClass::get_class_property()
{
	//	Initialize your default values here (if not done with  POGO).
	//------------------------------------------------------------------

	//	Read class properties from database.(Automatic code generation)
	//------------------------------------------------------------------

	//	Call database and extract values
	//--------------------------------------------
	if (Tango::Util::instance()->_UseDb==true)
		get_db_class()->get_property(cl_prop);
	Tango::DbDatum	def_prop;
	int	i = -1;


	//	End of Automatic code generation
	//------------------------------------------------------------------

}

//+----------------------------------------------------------------------------
//
// method : 	MeasurementGroupClass::set_default_property
// 
// description: Set default property (class and device) for wizard.
//              For each property, add to wizard property name and description
//              If default value has been set, add it to wizard property and
//              store it in a DbDatum.
//
//-----------------------------------------------------------------------------
void MeasurementGroupClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;

	vector<string>	vect_data;
	//	Set Default Class Properties
	//	Set Default Device Properties
	prop_name = "Measurement_group_id";
	prop_desc = "The measurement group identifier device in the sardana device pool";
	prop_def  = "0";
	vect_data.clear();
	vect_data.push_back("0");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "User_group_elt";
	prop_desc = "List of channels in this measurement group";
	prop_def  = "";
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "Ct_List";
	prop_desc = "List of counter/timers in this measurement group";
	prop_def  = "";
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "ZeroDExpChannel_List";
	prop_desc = "List of 0D Experiment Channels in this measurement group";
	prop_def  = "";
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "OneDExpChannel_List";
	prop_desc = "List of 1D Experiment Channels in this measurement group";
	prop_def  = "";
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "TwoDExpChannel_List";
	prop_desc = "List of 2D Experiment Channels in this measurement group";
	prop_def  = "";
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "Phys_group_elt";
	prop_desc = "";
	prop_def  = "";
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "Pseudocounter_list";
	prop_desc = "List of pseudo counters in this measurement group";
	prop_def  = "";
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

}
//+----------------------------------------------------------------------------
//
// method : 		MeasurementGroupClass::write_class_property
// 
// description : 	Set class description as property in database
//
//-----------------------------------------------------------------------------
void MeasurementGroupClass::write_class_property()
{
	//	First time, check if database used
	//--------------------------------------------
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("MeasurementGroup");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("A Measurement Group Device used by the Sardana project device pool");
	description << str_desc;
	data.push_back(description);
		
	//	put cvs location
	string	rcsId(RcsId);
	string	filename(classname);
	start = rcsId.find("/");
	if (start!=string::npos)
	{
		filename += "Class.cpp";
		end   = rcsId.find(filename);
		if (end>start)
		{
			string	strloc = rcsId.substr(start, end-start);
			//	Check if specific repository
			start = strloc.find("/cvsroot/");
			if (start!=string::npos && start>0)
			{
				string	repository = strloc.substr(0, start);
				if (repository.find("/segfs/")!=string::npos)
					strloc = "ESRF:" + strloc.substr(start, strloc.length()-start);
			}
			Tango::DbDatum	cvs_loc("cvs_location");
			cvs_loc << strloc;
			data.push_back(cvs_loc);
		}
	}

	//	Get CVS tag revision
	string	tagname(TagName);
	header = "$Name: ";
	start = header.length();
	string	endstr(" $");
	end   = tagname.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strtag = tagname.substr(start, end-start);
		Tango::DbDatum	cvs_tag("cvs_tag");
		cvs_tag << strtag;
		data.push_back(cvs_tag);
	}

	//	Get URL location
	string	httpServ(HttpServer);
	if (httpServ.length()>0)
	{
		Tango::DbDatum	db_doc_url("doc_url");
		db_doc_url << httpServ;
		data.push_back(db_doc_url);
	}

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	vector<string> inheritance;
	inheritance.push_back("Device_3Impl");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	//--------------------------------------------
	get_db_class()->put_property(data);
}

//+----------------------------------------------------------------------------
//
// method : 		MeasurementGroupClass::create_ghost_group
// 
// description : 	Create the ghost group device
//
//-----------------------------------------------------------------------------
void MeasurementGroupClass::create_ghost_group()
{

//
// Build group name
//

	string grp_name("mntgrp/");
	Tango::Util *tg = Tango::Util::instance();
	string &inst = tg->get_ds_inst_name();
	grp_name = grp_name + inst + "/ghost";

//
// Retrieve Pool device
//

	Pool_ns::Pool *pool_dev;
	const vector<Tango::DeviceClass *> *cl_ptr = tg->get_class_list();
	unsigned long loop;
	for (loop = 0;loop < cl_ptr->size();loop++)
	{
		if ((*cl_ptr)[loop]->get_name() == "Pool")
		{
			vector< Tango::DeviceImpl *> &dev_list = (*cl_ptr)[loop]->get_device_list();
			if (dev_list.size() == 0)
			{
				Tango::Except::throw_exception((const char *)"MeasurementGroup_CantCreateGhost",
					  (const char *)"This device server cannot start without a Pool device defined.",
					  (const char *)"MeasurementGroupClass::create_ghost_group");				
			}
			pool_dev = static_cast<Pool_ns::Pool *>(dev_list[0]);
			break;
		}
	}
	if (loop == cl_ptr->size())
	{			
		TangoSys_OMemStream o;
		o << "No pool device class found in this process!!" << ends;
	
		Tango::Except::throw_exception((const char *)"MeasurementGroup_CantCreateGhost",o.str(),
					  (const char *)"MeasurementGroupClass::create_ghost_group");
	}
	
//
// Create necessary properties in db that the polling thread polls
// the state of this device
//

  	Tango::DbDatum poll_attr("polled_attr");
  	Tango::DbData db_data;

 	vector<string> poll_info; 			
 	poll_info.push_back("state");
 	poll_info.push_back(pool_dev->ghostGroup_PollingPeriod);
 	
  	poll_attr << poll_info;  
  	db_data.push_back(poll_attr);			

	try
	{  			
  		tg->get_database()->put_device_property(grp_name.c_str(),db_data);
	}
	catch (Tango::DevFailed &e)
	{
		TangoSys_OMemStream o;
  		o << "Can't start polling for ghost measurement group " << grp_name << ends;
  			
  		Tango::Except::re_throw_exception(e,(const char *)"MeasurementGroup_CantCreateGhost",o.str(),
  							  (const char *)"MeasurementGroupClass::create_ghost_group");
	}
	
//
// Create device but do not export it
//
	MeasurementGroup *mg = new MeasurementGroup(this, grp_name);
	device_list.insert(device_list.begin(),mg);
}

}	// namespace
