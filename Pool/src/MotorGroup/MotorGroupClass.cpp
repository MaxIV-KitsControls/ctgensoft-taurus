static const char *RcsId     = "$Header$";
static const char *TagName   = "$Name$";
static const char *HttpServer= "http://www.esrf.fr/computing/cs/tango/tango_doc/ds_doc/";
//+=============================================================================
//
// file :        MotorGroupClass.cpp
//
// description : C++ source for the MotorGroupClass. A singleton
//               class derived from DeviceClass. It implements the
//               command list and all properties and methods required
//               by the MotorGroup once per process.
//
// project :     TANGO Device Server
//
// $Author$
//
// $Revision$
//
// $Log$
// Revision 1.13  2007/05/22 12:57:05  etaurel
// - Fix some bugs in event propagation
//
// Revision 1.12  2007/05/17 07:02:12  etaurel
// - Some tabs....
//
// Revision 1.11  2007/04/30 14:51:20  tcoutinho
// - make possible to Add/Remove elements on motorgroup that are part of other motor group(s)
//
// Revision 1.10  2007/04/23 15:18:59  tcoutinho
// - first changes according to Sardana metting 26-03-2007: identical motor groups can be created, Add/Remove element from a MG, etc
//
// Revision 1.9  2007/02/08 08:54:25  etaurel
// - Many changes. I don't remember the list
//
// Revision 1.8  2006/12/20 10:26:08  tcoutinho
// - changes to support internal event propagation
// - bug fix in motor groups containing other motor groups or pseudo motors
//
// Revision 1.7  2006/12/05 09:51:42  tcoutinho
// - Fixed bug. build_grp_struct was not being called for regular MGs because of the ghost.
//
// Revision 1.6  2006/11/22 13:55:27  etaurel
// - Fix bug in device_factory
//
// Revision 1.5  2006/11/20 14:35:17  etaurel
// - Add ghost group and event on group position
//
// Revision 1.4  2006/11/03 15:48:28  etaurel
// - Miscellaneous changes that I don't remember
//
// Revision 1.3  2006/10/20 15:42:39  etaurel
// - First release with GetControllerInfo command supported and with
// controller properties
//
// Revision 1.2  2006/07/07 12:40:18  etaurel
// - Commit after implementing the group multi motor read
//
// Revision 1.1  2006/03/29 07:09:59  etaurel
// - Added motor group features
//
// copyleft :     CELLS/ALBA
//				  Edifici Ciències Nord. Mòdul C-3 central.
//  			  Campus Universitari de Bellaterra. Universitat Autònoma de Barcelona
//  			  08193 Bellaterra, Barcelona
//  			  Spain
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================


#include <tango.h>

#include <MotorGroup.h>
#include <MotorGroupClass.h>
#include <Pool.h>

namespace MotorGroup_ns
{
//+----------------------------------------------------------------------------
//
// method : 		AddElementCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *AddElementCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "AddElementCmd::execute(): arrived" << endl;

	Tango::DevString	argin;
	extract(in_any, argin);

	((static_cast<MotorGroup *>(device))->add_element(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		RemoveElementCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *RemoveElementCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "RemoveElementCmd::execute(): arrived" << endl;

	Tango::DevString	argin;
	extract(in_any, argin);

	((static_cast<MotorGroup *>(device))->remove_element(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		AbortClass::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *AbortClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "AbortClass::execute(): arrived" << endl;

	((static_cast<MotorGroup *>(device))->abort());
	return new CORBA::Any();
}

//
//----------------------------------------------------------------
//	Initialize pointer for singleton pattern
//----------------------------------------------------------------
//
MotorGroupClass *MotorGroupClass::_instance = NULL;

//+----------------------------------------------------------------------------
//
// method : 		MotorGroupClass::MotorGroupClass(string &s)
// 
// description : 	constructor for the MotorGroupClass
//
// in : - s : The class name
//
//-----------------------------------------------------------------------------
MotorGroupClass::MotorGroupClass(string &s):DeviceClass(s)
{

	cout2 << "Entering MotorGroupClass constructor" << endl;
/*	get_class_property();
	set_default_property();
	write_class_property();*/
	set_default_property();
	get_class_property();
	write_class_property();
	
	first_call_to_device_factory = true;
	Tango::Util *tg = Tango::Util::instance();
	polling_th_id = tg->get_polling_thread_id();
	
	cout2 << "Leaving MotorGroupClass constructor" << endl;

}
//+----------------------------------------------------------------------------
//
// method : 		MotorGroupClass::~MotorGroupClass()
// 
// description : 	destructor for the MotorGroupClass
//
//-----------------------------------------------------------------------------
MotorGroupClass::~MotorGroupClass()
{
	_instance = NULL;
}

//+----------------------------------------------------------------------------
//
// method : 		MotorGroupClass::instance
// 
// description : 	Create the object if not already done. Otherwise, just
//			return a pointer to the object
//
// in : - name : The class name
//
//-----------------------------------------------------------------------------
MotorGroupClass *MotorGroupClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new MotorGroupClass(s);
		}
		catch (bad_alloc)
		{
			throw;
		}		
	}		
	return _instance;
}

MotorGroupClass *MotorGroupClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}

//+----------------------------------------------------------------------------
//
// method : 		MotorGroupClass::command_factory
// 
// description : 	Create the command object(s) and store them in the 
//			command list
//
//-----------------------------------------------------------------------------
void MotorGroupClass::command_factory()
{
	command_list.push_back(new AbortClass("Abort",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new AddElementCmd("AddElement",
		Tango::DEV_STRING, Tango::DEV_VOID,
		"Element name",
		"",
		Tango::OPERATOR));
	command_list.push_back(new RemoveElementCmd("RemoveElement",
		Tango::DEV_STRING, Tango::DEV_VOID,
		"Element name",
		"",
		Tango::OPERATOR));

	//	add polling if any
	for (unsigned int i=0 ; i<command_list.size(); i++)
	{
	}
}

//+----------------------------------------------------------------------------
//
// method : 		MotorGroupClass::get_class_property
// 
// description : 	Get the class property for specified name.
//
// in :		string	name : The property name
//
//+----------------------------------------------------------------------------
Tango::DbDatum MotorGroupClass::get_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}
//+----------------------------------------------------------------------------
//
// method : 		MotorGroupClass::get_default_device_property()
// 
// description : 	Return the default value for device property.
//
//-----------------------------------------------------------------------------
Tango::DbDatum MotorGroupClass::get_default_device_property(string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//+----------------------------------------------------------------------------
//
// method : 		MotorGroupClass::get_default_class_property()
// 
// description : 	Return the default value for class property.
//
//-----------------------------------------------------------------------------
Tango::DbDatum MotorGroupClass::get_default_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}
//+----------------------------------------------------------------------------
//
// method : 		MotorGroupClass::device_factory
// 
// description : 	Create the device object(s) and store them in the 
//			device list
//
// in :		Tango::DevVarStringArray *devlist_ptr : The device name list
//
//-----------------------------------------------------------------------------
void MotorGroupClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{
	Tango::Util *tg = Tango::Util::instance();
  	Tango::Database *db = tg->get_database();

//
// Reorder the list of motor groups by dependency on other motor groups
// 
 	
  	list<MotorGroupDeps> mg_deps;
	for (unsigned long i=0 ; i < devlist_ptr->length() ; i++)
	{
  		MotorGroupDeps mg_dep;
  		mg_dep.name = (*devlist_ptr)[i];
  		mg_dep.alias = mg_dep.name.substr(mg_dep.name.rfind("/")+1);
  		transform(mg_dep.alias.begin(),mg_dep.alias.end(),mg_dep.alias.begin(),::tolower);
		Tango::DbData db_data;
  		db_data.push_back(Tango::DbDatum("Motor_group_list"));
  		db->get_device_property(mg_dep.name,db_data);
  		db_data[0] >> mg_dep.mg_direct_deps;
  		mg_deps.push_back(mg_dep);
	}
	
	list<MotorGroupDeps>::iterator mg_deps_ite = mg_deps.begin();
	for(;mg_deps_ite != mg_deps.end(); mg_deps_ite++)
	{
		vector<string>::iterator dep_ite = mg_deps_ite->mg_direct_deps.begin();
		for(;dep_ite != mg_deps_ite->mg_direct_deps.end(); dep_ite++)
		{
			string mg_name(*dep_ite);
			transform(mg_name.begin(), mg_name.end(), mg_name.begin(), ::tolower);
			
			list<MotorGroupDeps>::iterator ite = mg_deps.begin();
			for(;ite != mg_deps.end(); ite++)
			{
				if(mg_name == ite->alias)
				{
					mg_deps_ite->mg_deps.push_back(&(*ite));
					break;
				}	
			}
		}
	}
	
	mg_deps.sort();  	
	
	list<MotorGroupDeps>::iterator ite;
	for(ite = mg_deps.begin();ite != mg_deps.end(); ite++)
	{
		cout4 << "Device name : " << ite->name << endl;
						
		// Create devices and add it into the device list
		//----------------------------------------------------
		device_list.push_back(new MotorGroup(this, ite->name));							 

		// Export device to the outside world
		// Check before if database used.
		//---------------------------------------------
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(device_list.back());
		else
			export_device(device_list.back(), ite->name.c_str());
	}
	
	if (first_call_to_device_factory == true)
	{
//
// Create ghost group if it is the first call (Create this group as the first
// one that it gets the group identifier 0)
//
		create_ghost_group();

//
// Motor Group is currently the last device class to be registered in the DeviceFactory
// Therefore, when this code is reached it is sure that all the devices have been created.
// The post_init_device is called on the pool to fill any missing data structures
// 
// If the motor group is no longer the last tango class then this code should be moved
// to the device_factory method of the last tango class to be registered. 
//		
		vector<Tango::DeviceImpl *> &pool_devs = tg->get_device_list_by_class("Pool");
		
		assert(pool_devs.size() == 1);
		
		Pool_ns::Pool *pool_dev = static_cast<Pool_ns::Pool *>(pool_devs[0]);
		
		pool_dev->post_init_device();
		
		first_call_to_device_factory = false;
	}
	
	long nb_dev = device_list.size();

//
// Build group structure for each new group
//
	
	long nb_new_device = devlist_ptr->length();
	long start_index;
	
	if (nb_dev != 0)
		start_index = nb_dev - nb_new_device;
	else
		start_index = 0;
		
	for (long i=0 ; i < nb_new_device ; i++)
	{
		static_cast<MotorGroup *>(device_list[start_index + i])->build_grp_struct();
	}
}
//+----------------------------------------------------------------------------
//	Method: MotorGroupClass::attribute_factory(vector<Tango::Attr *> &att_list)
//-----------------------------------------------------------------------------
void MotorGroupClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	//	Attribute : Position
	PositionAttrib	*position = new PositionAttrib();
	att_list.push_back(position);

	//	Attribute : Motors
	MotorsAttrib	*motors = new MotorsAttrib();
	att_list.push_back(motors);

	//	Attribute : MotorGroups
	MotorGroupsAttrib	*motor_groups = new MotorGroupsAttrib();
	att_list.push_back(motor_groups);

	//	Attribute : PseudoMotors
	PseudoMotorsAttrib	*pseudo_motors = new PseudoMotorsAttrib();
	att_list.push_back(pseudo_motors);

	//	Attribute : Elements
	ElementsAttrib	*elements = new ElementsAttrib();
	att_list.push_back(elements);

	//	End of Automatic code generation
	//-------------------------------------------------------------
}

//+----------------------------------------------------------------------------
//
// method : 		MotorGroupClass::get_class_property()
// 
// description : 	Read the class properties from database.
//
//-----------------------------------------------------------------------------
void MotorGroupClass::get_class_property()
{
	//	Initialize your default values here (if not done with  POGO).
	//------------------------------------------------------------------

	//	Read class properties from database.(Automatic code generation)
	//------------------------------------------------------------------
	cl_prop.push_back(Tango::DbDatum("Sleep_bef_last_read"));

	//	Call database and extract values
	//--------------------------------------------
	if (Tango::Util::instance()->_UseDb==true)
		get_db_class()->get_property(cl_prop);
	Tango::DbDatum	def_prop;
	int	i = -1;

	//	Extract Sleep_bef_last_read value
	def_prop = get_default_class_property(cl_prop[++i].name);
	if (def_prop.is_empty()==false)	def_prop  >>  sleep_bef_last_read;
	if (cl_prop[i].is_empty()==false)	cl_prop[i]  >>  sleep_bef_last_read;
	else
		cl_prop[i]  <<  sleep_bef_last_read;

	//	End of Automatic code generation
	//------------------------------------------------------------------

}

//+----------------------------------------------------------------------------
//
// method : 	MotorGroupClass::set_default_property
// 
// description: Set default property (class and device) for wizard.
//              For each property, add to wizard property name and description
//              If default value has been set, add it to wizard property and
//              store it in a DbDatum.
//
//-----------------------------------------------------------------------------
void MotorGroupClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;

	vector<string>	vect_data;
	//	Set Default Class Properties
	prop_name = "Sleep_bef_last_read";
	prop_desc = "Number of mS to sleep before the last read during a motor movment";
	prop_def  = "0";
	vect_data.clear();
	vect_data.push_back("0");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		cl_def_prop.push_back(data);
		add_wiz_class_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_class_prop(prop_name, prop_desc);

	//	Set Default Device Properties
	prop_name = "Motor_group_id";
	prop_desc = "The motor group identifier";
	prop_def  = "0";
	vect_data.clear();
	vect_data.push_back("0");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "Pool_device";
	prop_desc = "The motor group pool device name";
	prop_def  = "";
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "Motor_list";
	prop_desc = "List of user motors";
	prop_def  = "";
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "Motor_group_list";
	prop_desc = "List of user motor groups";
	prop_def  = "";
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "Pseudo_motor_list";
	prop_desc = "List of user pseudo motors";
	prop_def  = "";
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
				
	prop_name = "Sleep_bef_last_read";
	prop_desc = "Number of mS to sleep before the last read during a motor movment";
	prop_def  = "0";
	vect_data.clear();
	vect_data.push_back("0");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "User_group_elt";
	prop_desc = "List of group element for the user point of view";
	prop_def  = "";
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "Phys_group_elt";
	prop_desc = "List of group element for the physical point of view";
	prop_def  = "";
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "Pos_spectrum_dim_x";
	prop_desc = "Size of the spectrum which should be written when the group Position\nattribute is written";
	prop_def  = "0";
	vect_data.clear();
	vect_data.push_back("0");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

}
//+----------------------------------------------------------------------------
//
// method : 		MotorGroupClass::write_class_property
// 
// description : 	Set class description as property in database
//
//-----------------------------------------------------------------------------
void MotorGroupClass::write_class_property()
{
	//	First time, check if database used
	//--------------------------------------------
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("Manage a group of motors");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("This class manages a motor group");
	description << str_desc;
	data.push_back(description);
		
	//	put cvs location
	string	rcsId(RcsId);
	string	filename(classname);
	start = rcsId.find("/");
	if (start!=string::npos)
	{
		filename += "Class.cpp";
		end   = rcsId.find(filename);
		if (end>start)
		{
			string	strloc = rcsId.substr(start, end-start);
			//	Check if specific repository
			start = strloc.find("/cvsroot/");
			if (start!=string::npos && start>0)
			{
				string	repository = strloc.substr(0, start);
				if (repository.find("/segfs/")!=string::npos)
					strloc = "ESRF:" + strloc.substr(start, strloc.length()-start);
			}
			Tango::DbDatum	cvs_loc("cvs_location");
			cvs_loc << strloc;
			data.push_back(cvs_loc);
		}
	}

	//	Get CVS tag revision
	string	tagname(TagName);
	header = "$Name: ";
	start = header.length();
	string	endstr(" $");
	end   = tagname.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strtag = tagname.substr(start, end-start);
		Tango::DbDatum	cvs_tag("cvs_tag");
		cvs_tag << strtag;
		data.push_back(cvs_tag);
	}

	//	Get URL location
	string	httpServ(HttpServer);
	if (httpServ.length()>0)
	{
		Tango::DbDatum	db_doc_url("doc_url");
		db_doc_url << httpServ;
		data.push_back(db_doc_url);
	}

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	vector<string> inheritance;
	inheritance.push_back("Device_3Impl");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	//--------------------------------------------
	get_db_class()->put_property(data);
}

//+----------------------------------------------------------------------------
//
// method : 		MotorGroupClass::create_ghost_group
// 
// description : 	Create the ghost group device
//
//-----------------------------------------------------------------------------
void MotorGroupClass::create_ghost_group()
{

//
// Build group name
//

	string grp_name("mg/");
	Tango::Util *tg = Tango::Util::instance();
	string &inst = tg->get_ds_inst_name();
	grp_name = grp_name + inst + "/ghost";

//
// Retrieve Pool device
//

	Pool_ns::Pool *pool_dev;
	const vector<Tango::DeviceClass *> *cl_ptr = tg->get_class_list();
	unsigned long loop;
	for (loop = 0;loop < cl_ptr->size();loop++)
	{
		if ((*cl_ptr)[loop]->get_name() == "Pool")
		{
			vector< Tango::DeviceImpl *> &dev_list = (*cl_ptr)[loop]->get_device_list();
			if (dev_list.size() == 0)
			{
				Tango::Except::throw_exception((const char *)"MeasurementGroup_CantCreateGhost",
					  (const char *)"This device server cannot start without a Pool device defined.",
					  (const char *)"MotorGroupClass::create_ghost_group");				
			}
			pool_dev = static_cast<Pool_ns::Pool *>(dev_list[0]);
			break;
		}
	}
	if (loop == cl_ptr->size())
	{			
		TangoSys_OMemStream o;
		o << "No pool device class found in this process!!" << ends;
	
		Tango::Except::throw_exception((const char *)"Motor_CantCreateMotorGroup",o.str(),
					  (const char *)"MotorGroupClass::create_ghost_group");
	}
	
//
// Create necessary properties in db that the polling thread polls
// the state of this device
//

  	Tango::DbDatum poll_attr("polled_attr");
  	Tango::DbData db_data;

 	vector<string> poll_info; 			
 	poll_info.push_back("state");
 	poll_info.push_back(pool_dev->ghostGroup_PollingPeriod);
 	
  	poll_attr << poll_info;  
  	db_data.push_back(poll_attr);			

	try
	{  			
  		tg->get_database()->put_device_property(grp_name.c_str(),db_data);
	}
	catch (Tango::DevFailed &e)
	{
		TangoSys_OMemStream o;
  		o << "Can't start polling for ghost group " << grp_name << ends;
  			
  		Tango::Except::re_throw_exception(e,(const char *)"Pool_CantCreateMotorGroup",o.str(),
  							  (const char *)"Pool::create_ghost_group");
	}
	
//
// Create device but do not export it
//

	device_list.insert(device_list.begin(),new MotorGroup(this, grp_name));
}


}	// namespace
