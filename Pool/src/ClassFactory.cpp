static const char *RcsId = "$Header$";
//+=============================================================================
//
// file :        ClassFactory.cpp
//
// description : C++ source for the class_factory method of the DServer
//               device class. This method is responsible to create
//               all class singletin for a device server. It is called
//               at device server startup
//
// project :     TANGO Device Server
//
// $Author$
//
// $Revision$
//
// $Log$
// Revision 1.14  2007/08/17 13:07:30  tcoutinho
// - pseudo motor restructure
// - pool base dev class restructure
// - initial commit for pseudo counters
//
// Revision 1.13  2007/07/17 11:41:57  tcoutinho
// replaced comunication with communication
//
// Revision 1.12  2007/07/12 13:14:06  tcoutinho
// - changed creation order.
//
// Revision 1.11  2007/06/28 07:15:34  tcoutinho
// safety commit during comunication channels development
//
// Revision 1.10  2007/02/06 09:41:18  tcoutinho
// - added MeasurementGroup
//
// Revision 1.9  2007/01/26 08:36:47  etaurel
// - We now have a first release of ZeroDController
//
// Revision 1.8  2007/01/05 15:02:37  etaurel
// - First implementation of the Counter Timer class
//
// Revision 1.7  2006/12/20 10:25:52  tcoutinho
// - changes to support internal event propagation
// - bug fix in motor groups containing other motor groups or pseudo motors
//
// Revision 1.6  2006/11/03 15:48:59  etaurel
// - Miscellaneous changes that I don't remember
//
// Revision 1.5  2006/09/18 10:32:09  etaurel
// - Commit after merge with pseudo-motor branch
//
// Revision 1.4  2006/07/07 12:38:40  etaurel
// - Some changes in file header
// - Commit after implementing the group multi motor read
//
// Revision 1.3  2006/03/29 07:08:59  etaurel
// - Added motor group features
//
// Revision 1.2  2006/03/14 14:54:08  etaurel
// - Again new changes in the internal structure
//
// Revision 1.1.1.1  2006/03/10 13:40:57  etaurel
// Initial import
//
//
// copyleft :     CELLS/ALBA
//				  Edifici Ciències Nord. Mòdul C-3 central.
//  			  Campus Universitari de Bellaterra. Universitat Autònoma de Barcelona
//  			  08193 Bellaterra, Barcelona
//  			  Spain
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#include <CtrlFiCa.h>
#include <tango.h>
#include <PoolClass.h>
#include <MotorClass.h>
#include <MotorGroupClass.h>
#include <PseudoMotorClass.h>
#include <CTExpChannelClass.h>
#include <ZeroDExpChannelClass.h>
#include <PseudoCounterClass.h>
#include <MeasurementGroupClass.h>
#include <CommunicationChannelClass.h>

/**
 *	Create PoolClass singleton and store it in DServer object.
 */

void Tango::DServer::class_factory()
{
	add_class(Pool_ns::PoolClass::init("Pool"));
	add_class(CommunicationChannel_ns::CommunicationChannelClass::init("CommunicationChannel"));
	add_class(Motor_ns::MotorClass::init("Motor"));
	add_class(PseudoMotor_ns::PseudoMotorClass::init("PseudoMotor"));
	add_class(CTExpChannel_ns::CTExpChannelClass::init("CTExpChannel"));
	add_class(ZeroDExpChannel_ns::ZeroDExpChannelClass::init("ZeroDExpChannel"));
	add_class(PseudoCounter_ns::PseudoCounterClass::init("PseudoCounter"));
	add_class(MeasurementGroup_ns::MeasurementGroupClass::init("MeasurementGroup"));
	
	
//	
// The last class to be registered contains special code (in the device_factory()
// method) to initialize pool data structures. If motor group is no longer the 
// last class to be registered please move the code
// 
	add_class(MotorGroup_ns::MotorGroupClass::init("MotorGroup"));
}
