static const char *RcsId = "$Header$";
//+=============================================================================
//
// file :         PoolStateMachine.cpp
//
// description :  C++ source for the Pool and its alowed. 
//                method for commands and attributes
//
// project :      TANGO Device Server
//
// $Author$
//
// $Revision$
//
// $Log$
// Revision 1.21  2007/08/20 06:37:32  tcoutinho
// development commit
//
// Revision 1.20  2007/08/17 13:07:30  tcoutinho
// - pseudo motor restructure
// - pool base dev class restructure
// - initial commit for pseudo counters
//
// Revision 1.19  2007/07/30 11:00:59  tcoutinho
// Fix bug 5 : Additional information for controllers
//
// Revision 1.18  2007/06/27 10:24:45  tcoutinho
// scond commit for comuncation channels. Added command/attribute skeleton with pogo
//
// Revision 1.17  2007/04/23 15:23:06  tcoutinho
// - changes according to Sardana metting 26-03-2007: ActiveMeasurementGroup attribute became obsolete
//
// Revision 1.16  2007/02/06 09:41:03  tcoutinho
// - added MeasurementGroup
//
// Revision 1.15  2007/01/05 15:02:38  etaurel
// - First implementation of the Counter Timer class
//
// Revision 1.14  2006/10/06 13:40:31  tcoutinho
// changed info command names, added properties functionality
//
// Revision 1.13  2006/09/21 10:20:54  etaurel
// - The motor group do not ID any more
//
// Revision 1.12  2006/09/21 07:25:58  etaurel
// - Changes due to the removal of Motor ID in the Tango interface
//
// Revision 1.11  2006/09/20 16:00:26  tcoutinho
// pseudo motor API changed
//
// Revision 1.10  2006/09/20 13:11:11  etaurel
// - For the user point of view, the controller does not have ID any more.
// We are now using the controller instance name (uniq) to give them a name
//
// Revision 1.9  2006/09/18 10:32:22  etaurel
// - Commit after merge with pseudo-motor branch
//
// Revision 1.8  2006/07/07 12:38:43  etaurel
// - Some changes in file header
// - Commit after implementing the group multi motor read
//
// Revision 1.7  2006/06/19 12:32:48  etaurel
// - Changes due to new MOVING state, more manual firing events
//
// Revision 1.6  2006/03/29 07:09:00  etaurel
// - Added motor group features
//
// Revision 1.5  2006/03/20 08:25:53  etaurel
// - Commit changes before changing the Motor interface
//
// Revision 1.4  2006/03/16 08:05:45  etaurel
// - Added code for the ControllerCode load and unload commands
// - Test and debug InnitController cmd with motor attached to the controller
//
// Revision 1.3  2006/03/14 14:54:10  etaurel
// - Again new changes in the internal structure
//
// Revision 1.2  2006/03/14 08:25:11  etaurel
// - Change the way objects are aorganized within the pool device
//
// Revision 1.1.1.1  2006/03/10 13:40:57  etaurel
// Initial import
//
// copyleft :     CELLS/ALBA
//				  Edifici Ciències Nord. Mòdul C-3 central.
//  			  Campus Universitari de Bellaterra. Universitat Autònoma de Barcelona
//  			  08193 Bellaterra, Barcelona
//  			  Spain
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#include <CtrlFiCa.h>
#include <tango.h>
#include <Pool.h>
#include <PoolClass.h>

/*====================================================================
 *	This file contains the methods to allow commands and attributes
 * read or write execution.
 *
 * If you wand to add your own code, add it between 
 * the "End/Re-Start of Generated Code" comments.
 *
 * If you want, you can also add your own methods.
 *====================================================================
 */

namespace Pool_ns
{

//=================================================
//		Attributes Allowed Methods
//=================================================

//+----------------------------------------------------------------------------
//
// method : 		Pool::is_ControllerList_allowed
// 
// description : 	Read/Write allowed for ControllerList attribute.
//
//-----------------------------------------------------------------------------
bool Pool::is_ControllerList_allowed(Tango::AttReqType type)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Pool::is_MotorList_allowed
// 
// description : 	Read/Write allowed for MotorList attribute.
//
//-----------------------------------------------------------------------------
bool Pool::is_MotorList_allowed(Tango::AttReqType type)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Pool::is_SimulationMode_allowed
// 
// description : 	Read/Write allowed for SimulationMode attribute.
//
//-----------------------------------------------------------------------------
bool Pool::is_SimulationMode_allowed(Tango::AttReqType type)
{
	if (get_state() == Tango::MOVING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Pool::is_MotorGroupList_allowed
// 
// description : 	Read/Write allowed for MotorGroupList attribute.
//
//-----------------------------------------------------------------------------
bool Pool::is_MotorGroupList_allowed(Tango::AttReqType type)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Pool::is_PseudoMotorList_allowed
// 
// description : 	Read/Write allowed for PseudoMotorList attribute.
//
//-----------------------------------------------------------------------------
bool Pool::is_PseudoMotorList_allowed(Tango::AttReqType type)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Pool::is_ControllerClassList_allowed
// 
// description : 	Read/Write allowed for ControllerClassList attribute.
//
//-----------------------------------------------------------------------------
bool Pool::is_ControllerClassList_allowed(Tango::AttReqType type)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Pool::is_ExpChannelList_allowed
// 
// description : 	Read/Write allowed for ExpChannelList attribute.
//
//-----------------------------------------------------------------------------
bool Pool::is_ExpChannelList_allowed(Tango::AttReqType type)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Pool::is_MeasurementGroupList_allowed
// 
// description : 	Read/Write allowed for MeasurementGroupList attribute.
//
//-----------------------------------------------------------------------------
bool Pool::is_MeasurementGroupList_allowed(Tango::AttReqType type)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Pool::is_ComChannelList_allowed
// 
// description : 	Read/Write allowed for ComChannelList attribute.
//
//-----------------------------------------------------------------------------
bool Pool::is_ComChannelList_allowed(Tango::AttReqType type)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Pool::is_PseudoCounterList_allowed
// 
// description : 	Read/Write allowed for PseudoCounterList attribute.
//
//-----------------------------------------------------------------------------
bool Pool::is_PseudoCounterList_allowed(Tango::AttReqType type)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}

//=================================================
//		Commands Allowed Methods
//=================================================

//+----------------------------------------------------------------------------
//
// method : 		Pool::is_CreateController_allowed
// 
// description : 	Execution allowed for CreateController command.
//
//-----------------------------------------------------------------------------
bool Pool::is_CreateController_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::MOVING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Pool::is_CreateMotor_allowed
// 
// description : 	Execution allowed for CreateMotor command.
//
//-----------------------------------------------------------------------------
bool Pool::is_CreateMotor_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::MOVING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Pool::is_DeleteMotor_allowed
// 
// description : 	Execution allowed for DeleteMotor command.
//
//-----------------------------------------------------------------------------
bool Pool::is_DeleteMotor_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::MOVING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Pool::is_DeleteController_allowed
// 
// description : 	Execution allowed for DeleteController command.
//
//-----------------------------------------------------------------------------
bool Pool::is_DeleteController_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::MOVING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Pool::is_InitController_allowed
// 
// description : 	Execution allowed for InitController command.
//
//-----------------------------------------------------------------------------
bool Pool::is_InitController_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::MOVING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Pool::is_ReloadControllerCode_allowed
// 
// description : 	Execution allowed for ReloadControllerCode command.
//
//-----------------------------------------------------------------------------
bool Pool::is_ReloadControllerCode_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::MOVING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Pool::is_CreateMotorGroup_allowed
// 
// description : 	Execution allowed for CreateMotorGroup command.
//
//-----------------------------------------------------------------------------
bool Pool::is_CreateMotorGroup_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::MOVING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Pool::is_DeleteMotorGroup_allowed
// 
// description : 	Execution allowed for DeleteMotorGroup command.
//
//-----------------------------------------------------------------------------
bool Pool::is_DeleteMotorGroup_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::MOVING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Pool::is_DeletePseudoMotor_allowed
// 
// description : 	Execution allowed for DeletePseudoMotor command.
//
//-----------------------------------------------------------------------------
bool Pool::is_DeletePseudoMotor_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::MOVING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Pool::is_SendToController_allowed
// 
// description : 	Execution allowed for SendToController command.
//
//-----------------------------------------------------------------------------
bool Pool::is_SendToController_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::MOVING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Pool::is_GetControllerInfo_allowed
// 
// description : 	Execution allowed for GetControllerInfo command.
//
//-----------------------------------------------------------------------------
bool Pool::is_GetControllerInfo_allowed(const CORBA::Any &any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Pool::is_CreateExpChannel_allowed
// 
// description : 	Execution allowed for CreateExpChannel command.
//
//-----------------------------------------------------------------------------
bool Pool::is_CreateExpChannel_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::MOVING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Pool::is_DeleteExpChannel_allowed
// 
// description : 	Execution allowed for DeleteExpChannel command.
//
//-----------------------------------------------------------------------------
bool Pool::is_DeleteExpChannel_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::MOVING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Pool::is_CreateMeasurementGroup_allowed
// 
// description : 	Execution allowed for CreateMeasurementGroup command.
//
//-----------------------------------------------------------------------------
bool Pool::is_CreateMeasurementGroup_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::MOVING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Pool::is_DeleteMeasurementGroup_allowed
// 
// description : 	Execution allowed for DeleteMeasurementGroup command.
//
//-----------------------------------------------------------------------------
bool Pool::is_DeleteMeasurementGroup_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::MOVING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Pool::is_CreateComChannel_allowed
// 
// description : 	Execution allowed for CreateComChannel command.
//
//-----------------------------------------------------------------------------
bool Pool::is_CreateComChannel_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::MOVING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Pool::is_DeleteComChannel_allowed
// 
// description : 	Execution allowed for DeleteComChannel command.
//
//-----------------------------------------------------------------------------
bool Pool::is_DeleteComChannel_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::MOVING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Pool::is_GetControllerInfoEx_allowed
// 
// description : 	Execution allowed for GetControllerInfoEx command.
//
//-----------------------------------------------------------------------------
bool Pool::is_GetControllerInfoEx_allowed(const CORBA::Any &any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Pool::is_DeletePseudoCounter_allowed
// 
// description : 	Execution allowed for DeletePseudoCounter command.
//
//-----------------------------------------------------------------------------
bool Pool::is_DeletePseudoCounter_allowed(const CORBA::Any &any)
{
	if (get_state() == Tango::MOVING)
	{
		//	End of Generated Code

		//	Re-Start of Generated Code
		return false;
	}
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Pool::is_GetFile_allowed
// 
// description : 	Execution allowed for GetFile command.
//
//-----------------------------------------------------------------------------
bool Pool::is_GetFile_allowed(const CORBA::Any &any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}
//+----------------------------------------------------------------------------
//
// method : 		Pool::is_PutFile_allowed
// 
// description : 	Execution allowed for PutFile command.
//
//-----------------------------------------------------------------------------
bool Pool::is_PutFile_allowed(const CORBA::Any &any)
{
		//	End of Generated Code

		//	Re-Start of Generated Code
	return true;
}

}	// namespace Pool_ns
