//=============================================================================
//
// file :         CommunicationChannelClass.h
//
// description :  Include for the CommunicationChannelClass root class.
//                This class is represents the singleton class for
//                the CommunicationChannel device class.
//                It contains all properties and methods which the 
//                CommunicationChannel requires only once e.g. the commands.
//			
// project :      TANGO Device Server
//
// $Author$
//
// $Revision$
//
// $Log$
// Revision 1.2  2007/07/16 12:19:39  tcoutinho
// Changed Comunication to Communication
//
// Revision 1.1  2007/07/16 12:12:23  tcoutinho
// Unfortunately I made a syntax error and named 'Comunication' instead of 'Communication'. The old directory was ComunicationChannel
//
// Revision 1.5  2007/07/12 13:09:25  tcoutinho
// - added Open, Close, ReadLine methods
//
// Revision 1.4  2007/07/09 14:03:25  tcoutinho
// added open and close methods
//
// Revision 1.3  2007/06/28 16:22:37  tcoutinho
// safety commit during comunication channels development
//
// Revision 1.2  2007/06/28 07:15:34  tcoutinho
// safety commit during comunication channels development
//
// Revision 1.1  2007/06/27 08:54:55  tcoutinho
// first commit for comuncation channels
//
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#ifndef _COMMUNICATIONCHANNELCLASS_H
#define _COMMUNICATIONCHANNELCLASS_H

#include <tango.h>
#include <CommunicationChannel.h>


namespace CommunicationChannel_ns
{//=====================================
//	Define classes for attributes
//=====================================
/// SimulationModeAttrib
class SimulationModeAttrib: public Tango::Attr
{
public:
	SimulationModeAttrib():Attr("SimulationMode", Tango::DEV_BOOLEAN, Tango::READ) {};
	~SimulationModeAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<CommunicationChannel *>(dev))->read_SimulationMode(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<CommunicationChannel *>(dev))->is_SimulationMode_allowed(ty);}
};

//=========================================
//	Define classes for commands
//=========================================
/// ReadLineClass
class ReadLineClass : public Tango::Command
{
public:
	ReadLineClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ReadLineClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ReadLineClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<CommunicationChannel *>(dev))->is_ReadLine_allowed(any);}
};


/// CloseClass
class CloseClass : public Tango::Command
{
public:
	CloseClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	CloseClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~CloseClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<CommunicationChannel *>(dev))->is_Close_allowed(any);}
};


/// OpenClass
class OpenClass : public Tango::Command
{
public:
	OpenClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	OpenClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~OpenClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<CommunicationChannel *>(dev))->is_Open_allowed(any);}
};


/// WriteReadCmd
class WriteReadCmd : public Tango::Command
{
public:
	WriteReadCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	WriteReadCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~WriteReadCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<CommunicationChannel *>(dev))->is_WriteRead_allowed(any);}
};


/// WriteCmd
class WriteCmd : public Tango::Command
{
public:
	WriteCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	WriteCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~WriteCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<CommunicationChannel *>(dev))->is_Write_allowed(any);}
};


/// ReadCmd
class ReadCmd : public Tango::Command
{
public:
	ReadCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ReadCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ReadCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<CommunicationChannel *>(dev))->is_Read_allowed(any);}
};



/**
 *  The CommunicationChannelClass singleton definition
 */
class CommunicationChannelClass : public Tango::DeviceClass
{
public:
//	properties member data

//	add your own data members here
//------------------------------------

	long 			nb_static_attr;
	bool			first_call_to_device_factory;

public:
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static CommunicationChannelClass *init(const char *);
	static CommunicationChannelClass *instance();
	~CommunicationChannelClass();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);
	
protected:
	CommunicationChannelClass(string &);
	static CommunicationChannelClass *_instance;
	void command_factory();
	void get_class_property();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();

private:
	void device_factory(const Tango::DevVarStringArray *);
};


}	//	namespace CommunicationChannel_ns

#endif // _COMMUNICATIONCHANNELCLASS_H
