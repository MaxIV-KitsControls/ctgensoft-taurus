//=============================================================================
//
// file :        CommunicationChannel.h
//
// description : Include for the CommunicationChannel class.
//
// project :	CommunicationChannel
//
// $Author$
//
// $Revision$
//
// $Log$
// Revision 1.4  2007/08/30 12:40:38  tcoutinho
// - changes to support Pseudo counters.
//
// Revision 1.3  2007/08/17 13:07:29  tcoutinho
// - pseudo motor restructure
// - pool base dev class restructure
// - initial commit for pseudo counters
//
// Revision 1.2  2007/07/16 12:19:39  tcoutinho
// Changed Comunication to Communication
//
// Revision 1.1  2007/07/16 12:12:23  tcoutinho
// Unfortunately I made a syntax error and named 'Comunication' instead of 'Communication'. The old directory was ComunicationChannel
//
// Revision 1.6  2007/07/12 13:09:25  tcoutinho
// - added Open, Close, ReadLine methods
//
// Revision 1.5  2007/07/09 14:03:25  tcoutinho
// added open and close methods
//
// Revision 1.4  2007/07/02 14:45:29  tcoutinho
// first stable comunication channel commit
//
// Revision 1.3  2007/06/28 16:22:37  tcoutinho
// safety commit during comunication channels development
//
// Revision 1.2  2007/06/28 07:15:34  tcoutinho
// safety commit during comunication channels development
//
// Revision 1.1  2007/06/27 08:54:55  tcoutinho
// first commit for comuncation channels
//
//
// copyleft :    European Synchrotron Radiation Facility
//               BP 220, Grenoble 38043
//               FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================
#ifndef _COMMUNICATIONCHANNEL_H
#define _COMMUNICATIONCHANNEL_H

#include <tango.h>
//using namespace Tango;

#include <PoolIndBaseDev.h>

/**
 * @author	$Author$
 * @version	$Revision$
 */

 //	Add your own constants definitions here.
 //-----------------------------------------------

namespace Pool_ns
{
	class Pool;
	struct CommunicationChannelPool;
}

/**
 * @namespace CommunicationChannel_ns
 * 
 * @brief The namespace for the communication channel tango class.
 * 
 * @author	tcoutinho 
 */
namespace CommunicationChannel_ns
{

/**
 * @class CommunicationChannel
 * 
 * @brief Communication Channel Device used by the Sardana project device pool.
 * 
 *	Device States Description:<BR/>
 *  Tango::ON :       The Communication channel is ON and waiting.<BR/>
 *  Tango::FAULT :    A fault has been reported by the device controller.<BR/>
 *  Tango::UNKNOWN :  Impossible to communicate with the device controller.
 */
//class CommunicationChannel: public Tango::Device_3Impl
class CommunicationChannel: public Pool_ns::PoolIndBaseDev
{
public :
	//	Add your own data members here
	//-----------------------------------------


	//	Here is the Start of the automatic code generation part
	//-------------------------------------------------------------	
/**
 *	@name Attributes
 *	Attributes member data.
 */
//@{
		Tango::DevBoolean	*attr_SimulationMode_read;
//@}


/**
 *	@name Device properties
 *	Device properties member data.
 */
//@{
/**
 *	The communication channel identifier
 */
	Tango::DevLong	channel_id;
//@}

/**@name Constructors
 * Miscellaneous constructors */
//@{
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	CommunicationChannel(Tango::DeviceClass *cl,string &s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	CommunicationChannel(Tango::DeviceClass *cl,const char *s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device name
 *	@param d	Device description.
 */
	CommunicationChannel(Tango::DeviceClass *cl,const char *s,const char *d);
//@}

/**@name Destructor
 * Only one desctructor is defined for this class */
//@{
/**
 * The object desctructor.
 */	
	~CommunicationChannel() {delete_device();};
/**
 *	will be called at device destruction or at init command.
 */
	void delete_device();
//@}

	
/**@name Miscellaneous methods */
//@{
/**
 *	Initialize the device
 */
	virtual void init_device();
/**
 *	Always executed method befor execution command method.
 */
	virtual void always_executed_hook();

//@}

/**
 * @name CommunicationChannel methods prototypes
 */

//@{
/**
 *	Hardware acquisition for attributes.
 */
	virtual void read_attr_hardware(vector<long> &attr_list);
/**
 *	Extract real attribute values for SimulationMode acquisition result.
 */
	virtual void read_SimulationMode(Tango::Attribute &attr);
/**
 *	Read/Write allowed for SimulationMode attribute.
 */
	virtual bool is_SimulationMode_allowed(Tango::AttReqType type);
/**
 *	Execution allowed for Read command.
 */
	virtual bool is_Read_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for Write command.
 */
	virtual bool is_Write_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for WriteRead command.
 */
	virtual bool is_WriteRead_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for Open command.
 */
	virtual bool is_Open_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for Close command.
 */
	virtual bool is_Close_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for ReadLine command.
 */
	virtual bool is_ReadLine_allowed(const CORBA::Any &any);
/**
 * This command gets the device status (stored in its <i>device_status</i> data member) and returns it to the caller.
 *	@return	Status description
 *	@exception DevFailed
 */
	virtual Tango::ConstDevString	dev_status();
/**
 * Atempts to read up to n bytes from the Communication channel.
 *	If n is 0(zero), Read() returns an empty array.
 *	If n is -1, Read() will return all data available in the channel.
 *	@param	argin	Number of bytes to read from the Communication channel. 0 will return an empty array. -1 will read all available data
 *	@return	The data stream read from the channel
 *	@exception DevFailed
 */
	Tango::DevVarCharArray	*read(Tango::DevLong);
/**
 * Sends the given data as parameter to the Communication channel.
 *	The result is the number of bytes actually sent to the channel.
 *	@param	argin	The data stream to be sent to the Communication channel
 *	@return	The number of bytes actually sent to the channel
 *	@exception DevFailed
 */
	Tango::DevLong	write(const Tango::DevVarCharArray *);
/**
 * Sends the given data as parameter to the Communication channel.
 *	After this operation completes it performs a read to get all data available in the Communication channel.
 *	@param	argin	The data stream to be sent to the Communication channel
 *	@return	The data stream read from the channel
 *	@exception DevFailed
 */
	Tango::DevVarCharArray	*write_read(const Tango::DevVarCharArray *);
/**
 * opens the communication channel
 *	@exception DevFailed
 */
	void	open();
/**
 * closes the communication channel
 *	@exception DevFailed
 */
	void	close();
/**
 * Atempts to read characters up to a new line character from the communication channel
 *	@return	The character read from the communication channel
 *	@exception DevFailed
 */
	Tango::DevVarCharArray	*read_line();

/**
 *	Read the device properties from database
 */
	 void get_device_property();
//@}

	//	Here is the end of the automatic code generation part
	//-------------------------------------------------------------	



protected :	
	//	Add your own data members here
	//-----------------------------------------
	
	/// Temporary buffer containning data to be transfered
	string	buf;
	
	void read_from_ctrl(long );
	void read_line_from_ctrl();
	Tango::DevLong write_to_ctrl(const unsigned char *, long );
	void write_read_ctrl(const unsigned char *, long , long );
	// Warning: the following method should only be executed
	// when the running thread has a lock on the Pool
	Pool_ns::PoolElement &get_pool_obj();

	void inform_ghost(Tango::DevState,Tango::DevState);
	
public:


/**
 * @name Virtual abstract methods from Pool_ns::PoolBaseDev
 */
//@{

/**
 * Gets the communication channel id within the pool.
 */	
	virtual long get_id()					{ return channel_id; }
	
/**
 * The base_abort method.
 */
	virtual void base_abort(bool)			{ }
//@}	

/**
 * @name Virtual methods overwritten from Pool_ns::PoolBaseDev
 */
//@{
	virtual void init_pool_element(Pool_ns::PoolElement *);
	
//@}	
};

}	// namespace_ns

#endif	// _COMMUNICATIONCHANNEL_H
